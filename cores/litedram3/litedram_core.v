// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : litedram_core.v
// Device     : 
// LiteX sha1 : 577674bf
// Date       : 2023-08-08 23:41:45
//------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module litedram_core (
    input  wire          clk,
    output wire   [14:0] ddram_a,
    output wire    [2:0] ddram_ba,
    output wire          ddram_cas_n,
    output wire          ddram_cke,
    output wire          ddram_clk_n,
    output wire          ddram_clk_p,
    output wire          ddram_cs_n,
    output wire    [1:0] ddram_dm,
    inout  wire   [15:0] ddram_dq,
    inout  wire    [1:0] ddram_dqs_n,
    inout  wire    [1:0] ddram_dqs_p,
    output wire          ddram_odt,
    output wire          ddram_ras_n,
    output wire          ddram_reset_n,
    output wire          ddram_we_n,
    output wire          init_done,
    output wire          init_error,
    output wire          pll_locked,
    input  wire          rst,
    input  wire          uart_rx,
    output reg           uart_tx,
    output wire          user_clk,
    input  wire   [28:0] user_port_axi_0_araddr,
    input  wire    [1:0] user_port_axi_0_arburst,
    input  wire    [5:0] user_port_axi_0_arid,
    input  wire    [7:0] user_port_axi_0_arlen,
    output wire          user_port_axi_0_arready,
    input  wire    [3:0] user_port_axi_0_arsize,
    input  wire          user_port_axi_0_arvalid,
    input  wire   [28:0] user_port_axi_0_awaddr,
    input  wire    [1:0] user_port_axi_0_awburst,
    input  wire    [5:0] user_port_axi_0_awid,
    input  wire    [7:0] user_port_axi_0_awlen,
    output wire          user_port_axi_0_awready,
    input  wire    [3:0] user_port_axi_0_awsize,
    input  wire          user_port_axi_0_awvalid,
    output wire    [5:0] user_port_axi_0_bid,
    input  wire          user_port_axi_0_bready,
    output wire    [1:0] user_port_axi_0_bresp,
    output wire          user_port_axi_0_bvalid,
    output wire   [63:0] user_port_axi_0_rdata,
    output wire    [5:0] user_port_axi_0_rid,
    output wire          user_port_axi_0_rlast,
    input  wire          user_port_axi_0_rready,
    output wire    [1:0] user_port_axi_0_rresp,
    output wire          user_port_axi_0_rvalid,
    input  wire   [63:0] user_port_axi_0_wdata,
    input  wire          user_port_axi_0_wlast,
    output wire          user_port_axi_0_wready,
    input  wire    [7:0] user_port_axi_0_wstrb,
    input  wire          user_port_axi_0_wvalid,
    output wire          user_rst
);


//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

reg     [2:0] builder_array_muxed0 = 3'd0;
reg    [14:0] builder_array_muxed1 = 15'd0;
reg           builder_array_muxed10 = 1'd0;
reg           builder_array_muxed11 = 1'd0;
reg           builder_array_muxed12 = 1'd0;
reg           builder_array_muxed13 = 1'd0;
reg     [2:0] builder_array_muxed14 = 3'd0;
reg    [14:0] builder_array_muxed15 = 15'd0;
reg           builder_array_muxed16 = 1'd0;
reg           builder_array_muxed17 = 1'd0;
reg           builder_array_muxed18 = 1'd0;
reg           builder_array_muxed19 = 1'd0;
reg           builder_array_muxed2 = 1'd0;
reg           builder_array_muxed20 = 1'd0;
reg     [2:0] builder_array_muxed21 = 3'd0;
reg    [14:0] builder_array_muxed22 = 15'd0;
reg           builder_array_muxed23 = 1'd0;
reg           builder_array_muxed24 = 1'd0;
reg           builder_array_muxed25 = 1'd0;
reg           builder_array_muxed26 = 1'd0;
reg           builder_array_muxed27 = 1'd0;
reg           builder_array_muxed3 = 1'd0;
reg           builder_array_muxed4 = 1'd0;
reg           builder_array_muxed5 = 1'd0;
reg           builder_array_muxed6 = 1'd0;
reg     [2:0] builder_array_muxed7 = 3'd0;
reg    [14:0] builder_array_muxed8 = 15'd0;
reg           builder_array_muxed9 = 1'd0;
reg    [19:0] builder_count = 20'd1000000;
wire   [13:0] builder_csr_interconnect_adr;
wire   [31:0] builder_csr_interconnect_dat_r;
wire   [31:0] builder_csr_interconnect_dat_w;
wire          builder_csr_interconnect_we;
wire   [31:0] builder_csrbank0_bus_errors_r;
reg           builder_csrbank0_bus_errors_re = 1'd0;
wire   [31:0] builder_csrbank0_bus_errors_w;
reg           builder_csrbank0_bus_errors_we = 1'd0;
wire    [1:0] builder_csrbank0_reset0_r;
reg           builder_csrbank0_reset0_re = 1'd0;
wire    [1:0] builder_csrbank0_reset0_w;
reg           builder_csrbank0_reset0_we = 1'd0;
wire   [31:0] builder_csrbank0_scratch0_r;
reg           builder_csrbank0_scratch0_re = 1'd0;
wire   [31:0] builder_csrbank0_scratch0_w;
reg           builder_csrbank0_scratch0_we = 1'd0;
wire          builder_csrbank0_sel;
wire          builder_csrbank1_init_done0_r;
reg           builder_csrbank1_init_done0_re = 1'd0;
wire          builder_csrbank1_init_done0_w;
reg           builder_csrbank1_init_done0_we = 1'd0;
wire          builder_csrbank1_init_error0_r;
reg           builder_csrbank1_init_error0_re = 1'd0;
wire          builder_csrbank1_init_error0_w;
reg           builder_csrbank1_init_error0_we = 1'd0;
wire          builder_csrbank1_sel;
wire    [1:0] builder_csrbank2_dly_sel0_r;
reg           builder_csrbank2_dly_sel0_re = 1'd0;
wire    [1:0] builder_csrbank2_dly_sel0_w;
reg           builder_csrbank2_dly_sel0_we = 1'd0;
wire    [4:0] builder_csrbank2_half_sys8x_taps0_r;
reg           builder_csrbank2_half_sys8x_taps0_re = 1'd0;
wire    [4:0] builder_csrbank2_half_sys8x_taps0_w;
reg           builder_csrbank2_half_sys8x_taps0_we = 1'd0;
wire    [1:0] builder_csrbank2_rdphase0_r;
reg           builder_csrbank2_rdphase0_re = 1'd0;
wire    [1:0] builder_csrbank2_rdphase0_w;
reg           builder_csrbank2_rdphase0_we = 1'd0;
wire          builder_csrbank2_rst0_r;
reg           builder_csrbank2_rst0_re = 1'd0;
wire          builder_csrbank2_rst0_w;
reg           builder_csrbank2_rst0_we = 1'd0;
wire          builder_csrbank2_sel;
wire          builder_csrbank2_wlevel_en0_r;
reg           builder_csrbank2_wlevel_en0_re = 1'd0;
wire          builder_csrbank2_wlevel_en0_w;
reg           builder_csrbank2_wlevel_en0_we = 1'd0;
wire    [1:0] builder_csrbank2_wrphase0_r;
reg           builder_csrbank2_wrphase0_re = 1'd0;
wire    [1:0] builder_csrbank2_wrphase0_w;
reg           builder_csrbank2_wrphase0_we = 1'd0;
wire    [3:0] builder_csrbank3_dfii_control0_r;
reg           builder_csrbank3_dfii_control0_re = 1'd0;
wire    [3:0] builder_csrbank3_dfii_control0_w;
reg           builder_csrbank3_dfii_control0_we = 1'd0;
wire   [14:0] builder_csrbank3_dfii_pi0_address0_r;
reg           builder_csrbank3_dfii_pi0_address0_re = 1'd0;
wire   [14:0] builder_csrbank3_dfii_pi0_address0_w;
reg           builder_csrbank3_dfii_pi0_address0_we = 1'd0;
wire    [2:0] builder_csrbank3_dfii_pi0_baddress0_r;
reg           builder_csrbank3_dfii_pi0_baddress0_re = 1'd0;
wire    [2:0] builder_csrbank3_dfii_pi0_baddress0_w;
reg           builder_csrbank3_dfii_pi0_baddress0_we = 1'd0;
wire    [7:0] builder_csrbank3_dfii_pi0_command0_r;
reg           builder_csrbank3_dfii_pi0_command0_re = 1'd0;
wire    [7:0] builder_csrbank3_dfii_pi0_command0_w;
reg           builder_csrbank3_dfii_pi0_command0_we = 1'd0;
wire   [31:0] builder_csrbank3_dfii_pi0_rddata_r;
reg           builder_csrbank3_dfii_pi0_rddata_re = 1'd0;
wire   [31:0] builder_csrbank3_dfii_pi0_rddata_w;
reg           builder_csrbank3_dfii_pi0_rddata_we = 1'd0;
wire   [31:0] builder_csrbank3_dfii_pi0_wrdata0_r;
reg           builder_csrbank3_dfii_pi0_wrdata0_re = 1'd0;
wire   [31:0] builder_csrbank3_dfii_pi0_wrdata0_w;
reg           builder_csrbank3_dfii_pi0_wrdata0_we = 1'd0;
wire   [14:0] builder_csrbank3_dfii_pi1_address0_r;
reg           builder_csrbank3_dfii_pi1_address0_re = 1'd0;
wire   [14:0] builder_csrbank3_dfii_pi1_address0_w;
reg           builder_csrbank3_dfii_pi1_address0_we = 1'd0;
wire    [2:0] builder_csrbank3_dfii_pi1_baddress0_r;
reg           builder_csrbank3_dfii_pi1_baddress0_re = 1'd0;
wire    [2:0] builder_csrbank3_dfii_pi1_baddress0_w;
reg           builder_csrbank3_dfii_pi1_baddress0_we = 1'd0;
wire    [7:0] builder_csrbank3_dfii_pi1_command0_r;
reg           builder_csrbank3_dfii_pi1_command0_re = 1'd0;
wire    [7:0] builder_csrbank3_dfii_pi1_command0_w;
reg           builder_csrbank3_dfii_pi1_command0_we = 1'd0;
wire   [31:0] builder_csrbank3_dfii_pi1_rddata_r;
reg           builder_csrbank3_dfii_pi1_rddata_re = 1'd0;
wire   [31:0] builder_csrbank3_dfii_pi1_rddata_w;
reg           builder_csrbank3_dfii_pi1_rddata_we = 1'd0;
wire   [31:0] builder_csrbank3_dfii_pi1_wrdata0_r;
reg           builder_csrbank3_dfii_pi1_wrdata0_re = 1'd0;
wire   [31:0] builder_csrbank3_dfii_pi1_wrdata0_w;
reg           builder_csrbank3_dfii_pi1_wrdata0_we = 1'd0;
wire   [14:0] builder_csrbank3_dfii_pi2_address0_r;
reg           builder_csrbank3_dfii_pi2_address0_re = 1'd0;
wire   [14:0] builder_csrbank3_dfii_pi2_address0_w;
reg           builder_csrbank3_dfii_pi2_address0_we = 1'd0;
wire    [2:0] builder_csrbank3_dfii_pi2_baddress0_r;
reg           builder_csrbank3_dfii_pi2_baddress0_re = 1'd0;
wire    [2:0] builder_csrbank3_dfii_pi2_baddress0_w;
reg           builder_csrbank3_dfii_pi2_baddress0_we = 1'd0;
wire    [7:0] builder_csrbank3_dfii_pi2_command0_r;
reg           builder_csrbank3_dfii_pi2_command0_re = 1'd0;
wire    [7:0] builder_csrbank3_dfii_pi2_command0_w;
reg           builder_csrbank3_dfii_pi2_command0_we = 1'd0;
wire   [31:0] builder_csrbank3_dfii_pi2_rddata_r;
reg           builder_csrbank3_dfii_pi2_rddata_re = 1'd0;
wire   [31:0] builder_csrbank3_dfii_pi2_rddata_w;
reg           builder_csrbank3_dfii_pi2_rddata_we = 1'd0;
wire   [31:0] builder_csrbank3_dfii_pi2_wrdata0_r;
reg           builder_csrbank3_dfii_pi2_wrdata0_re = 1'd0;
wire   [31:0] builder_csrbank3_dfii_pi2_wrdata0_w;
reg           builder_csrbank3_dfii_pi2_wrdata0_we = 1'd0;
wire   [14:0] builder_csrbank3_dfii_pi3_address0_r;
reg           builder_csrbank3_dfii_pi3_address0_re = 1'd0;
wire   [14:0] builder_csrbank3_dfii_pi3_address0_w;
reg           builder_csrbank3_dfii_pi3_address0_we = 1'd0;
wire    [2:0] builder_csrbank3_dfii_pi3_baddress0_r;
reg           builder_csrbank3_dfii_pi3_baddress0_re = 1'd0;
wire    [2:0] builder_csrbank3_dfii_pi3_baddress0_w;
reg           builder_csrbank3_dfii_pi3_baddress0_we = 1'd0;
wire    [7:0] builder_csrbank3_dfii_pi3_command0_r;
reg           builder_csrbank3_dfii_pi3_command0_re = 1'd0;
wire    [7:0] builder_csrbank3_dfii_pi3_command0_w;
reg           builder_csrbank3_dfii_pi3_command0_we = 1'd0;
wire   [31:0] builder_csrbank3_dfii_pi3_rddata_r;
reg           builder_csrbank3_dfii_pi3_rddata_re = 1'd0;
wire   [31:0] builder_csrbank3_dfii_pi3_rddata_w;
reg           builder_csrbank3_dfii_pi3_rddata_we = 1'd0;
wire   [31:0] builder_csrbank3_dfii_pi3_wrdata0_r;
reg           builder_csrbank3_dfii_pi3_wrdata0_re = 1'd0;
wire   [31:0] builder_csrbank3_dfii_pi3_wrdata0_w;
reg           builder_csrbank3_dfii_pi3_wrdata0_we = 1'd0;
wire          builder_csrbank3_sel;
wire          builder_csrbank4_en0_r;
reg           builder_csrbank4_en0_re = 1'd0;
wire          builder_csrbank4_en0_w;
reg           builder_csrbank4_en0_we = 1'd0;
wire          builder_csrbank4_ev_enable0_r;
reg           builder_csrbank4_ev_enable0_re = 1'd0;
wire          builder_csrbank4_ev_enable0_w;
reg           builder_csrbank4_ev_enable0_we = 1'd0;
wire          builder_csrbank4_ev_pending_r;
reg           builder_csrbank4_ev_pending_re = 1'd0;
wire          builder_csrbank4_ev_pending_w;
reg           builder_csrbank4_ev_pending_we = 1'd0;
wire          builder_csrbank4_ev_status_r;
reg           builder_csrbank4_ev_status_re = 1'd0;
wire          builder_csrbank4_ev_status_w;
reg           builder_csrbank4_ev_status_we = 1'd0;
wire   [31:0] builder_csrbank4_load0_r;
reg           builder_csrbank4_load0_re = 1'd0;
wire   [31:0] builder_csrbank4_load0_w;
reg           builder_csrbank4_load0_we = 1'd0;
wire   [31:0] builder_csrbank4_reload0_r;
reg           builder_csrbank4_reload0_re = 1'd0;
wire   [31:0] builder_csrbank4_reload0_w;
reg           builder_csrbank4_reload0_we = 1'd0;
wire          builder_csrbank4_sel;
wire          builder_csrbank4_update_value0_r;
reg           builder_csrbank4_update_value0_re = 1'd0;
wire          builder_csrbank4_update_value0_w;
reg           builder_csrbank4_update_value0_we = 1'd0;
wire   [31:0] builder_csrbank4_value_r;
reg           builder_csrbank4_value_re = 1'd0;
wire   [31:0] builder_csrbank4_value_w;
reg           builder_csrbank4_value_we = 1'd0;
wire    [1:0] builder_csrbank5_ev_enable0_r;
reg           builder_csrbank5_ev_enable0_re = 1'd0;
wire    [1:0] builder_csrbank5_ev_enable0_w;
reg           builder_csrbank5_ev_enable0_we = 1'd0;
wire    [1:0] builder_csrbank5_ev_pending_r;
reg           builder_csrbank5_ev_pending_re = 1'd0;
wire    [1:0] builder_csrbank5_ev_pending_w;
reg           builder_csrbank5_ev_pending_we = 1'd0;
wire    [1:0] builder_csrbank5_ev_status_r;
reg           builder_csrbank5_ev_status_re = 1'd0;
wire    [1:0] builder_csrbank5_ev_status_w;
reg           builder_csrbank5_ev_status_we = 1'd0;
wire          builder_csrbank5_rxempty_r;
reg           builder_csrbank5_rxempty_re = 1'd0;
wire          builder_csrbank5_rxempty_w;
reg           builder_csrbank5_rxempty_we = 1'd0;
wire          builder_csrbank5_rxfull_r;
reg           builder_csrbank5_rxfull_re = 1'd0;
wire          builder_csrbank5_rxfull_w;
reg           builder_csrbank5_rxfull_we = 1'd0;
wire          builder_csrbank5_sel;
wire          builder_csrbank5_txempty_r;
reg           builder_csrbank5_txempty_re = 1'd0;
wire          builder_csrbank5_txempty_w;
reg           builder_csrbank5_txempty_we = 1'd0;
wire          builder_csrbank5_txfull_r;
reg           builder_csrbank5_txfull_re = 1'd0;
wire          builder_csrbank5_txfull_w;
reg           builder_csrbank5_txfull_we = 1'd0;
wire          builder_done;
reg           builder_error = 1'd0;
reg           builder_grant = 1'd0;
wire   [13:0] builder_interface0_bank_bus_adr;
reg    [31:0] builder_interface0_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_interface0_bank_bus_dat_w;
wire          builder_interface0_bank_bus_we;
wire   [13:0] builder_interface1_bank_bus_adr;
reg    [31:0] builder_interface1_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_interface1_bank_bus_dat_w;
wire          builder_interface1_bank_bus_we;
wire   [13:0] builder_interface2_bank_bus_adr;
reg    [31:0] builder_interface2_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_interface2_bank_bus_dat_w;
wire          builder_interface2_bank_bus_we;
wire   [13:0] builder_interface3_bank_bus_adr;
reg    [31:0] builder_interface3_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_interface3_bank_bus_dat_w;
wire          builder_interface3_bank_bus_we;
wire   [13:0] builder_interface4_bank_bus_adr;
reg    [31:0] builder_interface4_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_interface4_bank_bus_dat_w;
wire          builder_interface4_bank_bus_we;
wire   [13:0] builder_interface5_bank_bus_adr;
reg    [31:0] builder_interface5_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_interface5_bank_bus_dat_w;
wire          builder_interface5_bank_bus_we;
reg    [13:0] builder_litedramcore_adr = 14'd0;
reg    [13:0] builder_litedramcore_adr_wishbone2csr_next_value1 = 14'd0;
reg           builder_litedramcore_adr_wishbone2csr_next_value_ce1 = 1'd0;
wire   [31:0] builder_litedramcore_dat_r;
reg    [31:0] builder_litedramcore_dat_w = 32'd0;
reg    [31:0] builder_litedramcore_dat_w_wishbone2csr_next_value0 = 32'd0;
reg           builder_litedramcore_dat_w_wishbone2csr_next_value_ce0 = 1'd0;
reg     [1:0] builder_litedramcore_fullmemorywe_next_state = 2'd0;
reg     [1:0] builder_litedramcore_fullmemorywe_state = 2'd0;
reg     [3:0] builder_litedramcore_litedramcore_bankmachine0_next_state = 4'd0;
reg     [3:0] builder_litedramcore_litedramcore_bankmachine0_state = 4'd0;
reg     [3:0] builder_litedramcore_litedramcore_bankmachine1_next_state = 4'd0;
reg     [3:0] builder_litedramcore_litedramcore_bankmachine1_state = 4'd0;
reg     [3:0] builder_litedramcore_litedramcore_bankmachine2_next_state = 4'd0;
reg     [3:0] builder_litedramcore_litedramcore_bankmachine2_state = 4'd0;
reg     [3:0] builder_litedramcore_litedramcore_bankmachine3_next_state = 4'd0;
reg     [3:0] builder_litedramcore_litedramcore_bankmachine3_state = 4'd0;
reg     [3:0] builder_litedramcore_litedramcore_bankmachine4_next_state = 4'd0;
reg     [3:0] builder_litedramcore_litedramcore_bankmachine4_state = 4'd0;
reg     [3:0] builder_litedramcore_litedramcore_bankmachine5_next_state = 4'd0;
reg     [3:0] builder_litedramcore_litedramcore_bankmachine5_state = 4'd0;
reg     [3:0] builder_litedramcore_litedramcore_bankmachine6_next_state = 4'd0;
reg     [3:0] builder_litedramcore_litedramcore_bankmachine6_state = 4'd0;
reg     [3:0] builder_litedramcore_litedramcore_bankmachine7_next_state = 4'd0;
reg     [3:0] builder_litedramcore_litedramcore_bankmachine7_state = 4'd0;
reg           builder_litedramcore_litedramcore_locked0 = 1'd0;
reg           builder_litedramcore_litedramcore_locked1 = 1'd0;
reg           builder_litedramcore_litedramcore_locked10 = 1'd0;
reg           builder_litedramcore_litedramcore_locked11 = 1'd0;
reg           builder_litedramcore_litedramcore_locked12 = 1'd0;
reg           builder_litedramcore_litedramcore_locked13 = 1'd0;
reg           builder_litedramcore_litedramcore_locked14 = 1'd0;
reg           builder_litedramcore_litedramcore_locked15 = 1'd0;
reg           builder_litedramcore_litedramcore_locked2 = 1'd0;
reg           builder_litedramcore_litedramcore_locked3 = 1'd0;
reg           builder_litedramcore_litedramcore_locked4 = 1'd0;
reg           builder_litedramcore_litedramcore_locked5 = 1'd0;
reg           builder_litedramcore_litedramcore_locked6 = 1'd0;
reg           builder_litedramcore_litedramcore_locked7 = 1'd0;
reg           builder_litedramcore_litedramcore_locked8 = 1'd0;
reg           builder_litedramcore_litedramcore_locked9 = 1'd0;
reg     [3:0] builder_litedramcore_litedramcore_multiplexer_next_state = 4'd0;
reg     [3:0] builder_litedramcore_litedramcore_multiplexer_state = 4'd0;
reg           builder_litedramcore_litedramcore_new_master_rdata_valid0 = 1'd0;
reg           builder_litedramcore_litedramcore_new_master_rdata_valid1 = 1'd0;
reg           builder_litedramcore_litedramcore_new_master_rdata_valid10 = 1'd0;
reg           builder_litedramcore_litedramcore_new_master_rdata_valid11 = 1'd0;
reg           builder_litedramcore_litedramcore_new_master_rdata_valid12 = 1'd0;
reg           builder_litedramcore_litedramcore_new_master_rdata_valid13 = 1'd0;
reg           builder_litedramcore_litedramcore_new_master_rdata_valid14 = 1'd0;
reg           builder_litedramcore_litedramcore_new_master_rdata_valid15 = 1'd0;
reg           builder_litedramcore_litedramcore_new_master_rdata_valid16 = 1'd0;
reg           builder_litedramcore_litedramcore_new_master_rdata_valid17 = 1'd0;
reg           builder_litedramcore_litedramcore_new_master_rdata_valid2 = 1'd0;
reg           builder_litedramcore_litedramcore_new_master_rdata_valid3 = 1'd0;
reg           builder_litedramcore_litedramcore_new_master_rdata_valid4 = 1'd0;
reg           builder_litedramcore_litedramcore_new_master_rdata_valid5 = 1'd0;
reg           builder_litedramcore_litedramcore_new_master_rdata_valid6 = 1'd0;
reg           builder_litedramcore_litedramcore_new_master_rdata_valid7 = 1'd0;
reg           builder_litedramcore_litedramcore_new_master_rdata_valid8 = 1'd0;
reg           builder_litedramcore_litedramcore_new_master_rdata_valid9 = 1'd0;
reg           builder_litedramcore_litedramcore_new_master_wdata_ready0 = 1'd0;
reg           builder_litedramcore_litedramcore_new_master_wdata_ready1 = 1'd0;
reg           builder_litedramcore_litedramcore_new_master_wdata_ready2 = 1'd0;
reg           builder_litedramcore_litedramcore_new_master_wdata_ready3 = 1'd0;
reg     [1:0] builder_litedramcore_litedramcore_next_state = 2'd0;
reg     [1:0] builder_litedramcore_litedramcore_refresher_next_state = 2'd0;
reg     [1:0] builder_litedramcore_litedramcore_refresher_state = 2'd0;
wire          builder_litedramcore_litedramcore_roundrobin0_ce;
reg           builder_litedramcore_litedramcore_roundrobin0_grant = 1'd0;
wire    [1:0] builder_litedramcore_litedramcore_roundrobin0_request;
wire          builder_litedramcore_litedramcore_roundrobin1_ce;
reg           builder_litedramcore_litedramcore_roundrobin1_grant = 1'd0;
wire    [1:0] builder_litedramcore_litedramcore_roundrobin1_request;
wire          builder_litedramcore_litedramcore_roundrobin2_ce;
reg           builder_litedramcore_litedramcore_roundrobin2_grant = 1'd0;
wire    [1:0] builder_litedramcore_litedramcore_roundrobin2_request;
wire          builder_litedramcore_litedramcore_roundrobin3_ce;
reg           builder_litedramcore_litedramcore_roundrobin3_grant = 1'd0;
wire    [1:0] builder_litedramcore_litedramcore_roundrobin3_request;
wire          builder_litedramcore_litedramcore_roundrobin4_ce;
reg           builder_litedramcore_litedramcore_roundrobin4_grant = 1'd0;
wire    [1:0] builder_litedramcore_litedramcore_roundrobin4_request;
wire          builder_litedramcore_litedramcore_roundrobin5_ce;
reg           builder_litedramcore_litedramcore_roundrobin5_grant = 1'd0;
wire    [1:0] builder_litedramcore_litedramcore_roundrobin5_request;
wire          builder_litedramcore_litedramcore_roundrobin6_ce;
reg           builder_litedramcore_litedramcore_roundrobin6_grant = 1'd0;
wire    [1:0] builder_litedramcore_litedramcore_roundrobin6_request;
wire          builder_litedramcore_litedramcore_roundrobin7_ce;
reg           builder_litedramcore_litedramcore_roundrobin7_grant = 1'd0;
wire    [1:0] builder_litedramcore_litedramcore_roundrobin7_request;
reg     [1:0] builder_litedramcore_litedramcore_state = 2'd0;
reg     [1:0] builder_litedramcore_litedramwishbone2native_next_state = 2'd0;
reg     [1:0] builder_litedramcore_litedramwishbone2native_state = 2'd0;
wire          builder_litedramcore_pll_fb;
wire          builder_litedramcore_reset0;
wire          builder_litedramcore_reset1;
wire          builder_litedramcore_reset2;
wire          builder_litedramcore_reset3;
wire          builder_litedramcore_reset4;
wire          builder_litedramcore_reset5;
wire          builder_litedramcore_reset6;
wire          builder_litedramcore_reset7;
reg           builder_litedramcore_rs232phyrx_next_state = 1'd0;
reg           builder_litedramcore_rs232phyrx_state = 1'd0;
reg           builder_litedramcore_rs232phytx_next_state = 1'd0;
reg           builder_litedramcore_rs232phytx_state = 1'd0;
reg           builder_litedramcore_we = 1'd0;
reg           builder_litedramcore_we_wishbone2csr_next_value2 = 1'd0;
reg           builder_litedramcore_we_wishbone2csr_next_value_ce2 = 1'd0;
reg     [1:0] builder_litedramcore_wishbone2csr_next_state = 2'd0;
reg     [1:0] builder_litedramcore_wishbone2csr_state = 2'd0;
reg           builder_litedramcore_wishbone_ack = 1'd0;
wire   [29:0] builder_litedramcore_wishbone_adr;
wire    [1:0] builder_litedramcore_wishbone_bte;
wire    [2:0] builder_litedramcore_wishbone_cti;
wire          builder_litedramcore_wishbone_cyc;
reg    [31:0] builder_litedramcore_wishbone_dat_r = 32'd0;
wire   [31:0] builder_litedramcore_wishbone_dat_w;
reg           builder_litedramcore_wishbone_err = 1'd0;
wire    [3:0] builder_litedramcore_wishbone_sel;
wire          builder_litedramcore_wishbone_stb;
wire          builder_litedramcore_wishbone_we;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg           builder_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *)
reg           builder_regs1 = 1'd0;
wire    [1:0] builder_request;
reg    [29:0] builder_rhs_array_muxed0 = 30'd0;
reg    [31:0] builder_rhs_array_muxed1 = 32'd0;
reg     [2:0] builder_rhs_array_muxed10 = 3'd0;
reg           builder_rhs_array_muxed11 = 1'd0;
reg           builder_rhs_array_muxed12 = 1'd0;
reg           builder_rhs_array_muxed13 = 1'd0;
reg           builder_rhs_array_muxed14 = 1'd0;
reg    [14:0] builder_rhs_array_muxed15 = 15'd0;
reg     [2:0] builder_rhs_array_muxed16 = 3'd0;
reg           builder_rhs_array_muxed17 = 1'd0;
reg           builder_rhs_array_muxed18 = 1'd0;
reg           builder_rhs_array_muxed19 = 1'd0;
reg     [3:0] builder_rhs_array_muxed2 = 4'd0;
reg    [21:0] builder_rhs_array_muxed20 = 22'd0;
reg           builder_rhs_array_muxed21 = 1'd0;
reg           builder_rhs_array_muxed22 = 1'd0;
reg    [21:0] builder_rhs_array_muxed23 = 22'd0;
reg           builder_rhs_array_muxed24 = 1'd0;
reg           builder_rhs_array_muxed25 = 1'd0;
reg    [21:0] builder_rhs_array_muxed26 = 22'd0;
reg           builder_rhs_array_muxed27 = 1'd0;
reg           builder_rhs_array_muxed28 = 1'd0;
reg    [21:0] builder_rhs_array_muxed29 = 22'd0;
reg           builder_rhs_array_muxed3 = 1'd0;
reg           builder_rhs_array_muxed30 = 1'd0;
reg           builder_rhs_array_muxed31 = 1'd0;
reg    [21:0] builder_rhs_array_muxed32 = 22'd0;
reg           builder_rhs_array_muxed33 = 1'd0;
reg           builder_rhs_array_muxed34 = 1'd0;
reg    [21:0] builder_rhs_array_muxed35 = 22'd0;
reg           builder_rhs_array_muxed36 = 1'd0;
reg           builder_rhs_array_muxed37 = 1'd0;
reg    [21:0] builder_rhs_array_muxed38 = 22'd0;
reg           builder_rhs_array_muxed39 = 1'd0;
reg           builder_rhs_array_muxed4 = 1'd0;
reg           builder_rhs_array_muxed40 = 1'd0;
reg    [21:0] builder_rhs_array_muxed41 = 22'd0;
reg           builder_rhs_array_muxed42 = 1'd0;
reg           builder_rhs_array_muxed43 = 1'd0;
reg           builder_rhs_array_muxed5 = 1'd0;
reg     [2:0] builder_rhs_array_muxed6 = 3'd0;
reg     [1:0] builder_rhs_array_muxed7 = 2'd0;
reg           builder_rhs_array_muxed8 = 1'd0;
reg    [14:0] builder_rhs_array_muxed9 = 15'd0;
reg           builder_shared_ack = 1'd0;
wire   [29:0] builder_shared_adr;
wire    [1:0] builder_shared_bte;
wire    [2:0] builder_shared_cti;
wire          builder_shared_cyc;
reg    [31:0] builder_shared_dat_r = 32'd0;
wire   [31:0] builder_shared_dat_w;
wire          builder_shared_err;
wire    [3:0] builder_shared_sel;
wire          builder_shared_stb;
wire          builder_shared_we;
reg     [3:0] builder_slave_sel = 4'd0;
reg     [3:0] builder_slave_sel_r = 4'd0;
reg           builder_t_array_muxed0 = 1'd0;
reg           builder_t_array_muxed1 = 1'd0;
reg           builder_t_array_muxed2 = 1'd0;
reg           builder_t_array_muxed3 = 1'd0;
reg           builder_t_array_muxed4 = 1'd0;
reg           builder_t_array_muxed5 = 1'd0;
wire          builder_wait;
wire          builder_xilinxasyncresetsynchronizerimpl0;
wire          builder_xilinxasyncresetsynchronizerimpl0_rst_meta;
wire          builder_xilinxasyncresetsynchronizerimpl1;
wire          builder_xilinxasyncresetsynchronizerimpl1_rst_meta;
wire          builder_xilinxasyncresetsynchronizerimpl2;
wire          builder_xilinxasyncresetsynchronizerimpl2_expr;
wire          builder_xilinxasyncresetsynchronizerimpl2_rst_meta;
wire          builder_xilinxasyncresetsynchronizerimpl3;
wire          builder_xilinxasyncresetsynchronizerimpl3_expr;
wire          builder_xilinxasyncresetsynchronizerimpl3_rst_meta;
wire          iodelay_clk;
wire          iodelay_rst;
wire          main_a7ddrphy0;
wire          main_a7ddrphy1;
reg     [7:0] main_a7ddrphy_bitslip00 = 8'd0;
reg     [7:0] main_a7ddrphy_bitslip01 = 8'd0;
reg     [7:0] main_a7ddrphy_bitslip02 = 8'd0;
wire    [7:0] main_a7ddrphy_bitslip03;
reg     [7:0] main_a7ddrphy_bitslip04 = 8'd0;
reg    [15:0] main_a7ddrphy_bitslip0_r0 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip0_r1 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip0_r2 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip0_r3 = 16'd0;
reg     [2:0] main_a7ddrphy_bitslip0_value0 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip0_value1 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip0_value2 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip0_value3 = 3'd7;
reg     [7:0] main_a7ddrphy_bitslip10 = 8'd0;
reg     [7:0] main_a7ddrphy_bitslip100 = 8'd0;
wire    [7:0] main_a7ddrphy_bitslip101;
reg     [7:0] main_a7ddrphy_bitslip102 = 8'd0;
reg    [15:0] main_a7ddrphy_bitslip10_r0 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip10_r1 = 16'd0;
reg     [2:0] main_a7ddrphy_bitslip10_value0 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip10_value1 = 3'd7;
reg     [7:0] main_a7ddrphy_bitslip11 = 8'd0;
reg     [7:0] main_a7ddrphy_bitslip110 = 8'd0;
wire    [7:0] main_a7ddrphy_bitslip111;
reg     [7:0] main_a7ddrphy_bitslip112 = 8'd0;
reg    [15:0] main_a7ddrphy_bitslip11_r0 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip11_r1 = 16'd0;
reg     [2:0] main_a7ddrphy_bitslip11_value0 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip11_value1 = 3'd7;
reg     [7:0] main_a7ddrphy_bitslip12 = 8'd0;
reg     [7:0] main_a7ddrphy_bitslip120 = 8'd0;
wire    [7:0] main_a7ddrphy_bitslip121;
reg     [7:0] main_a7ddrphy_bitslip122 = 8'd0;
reg    [15:0] main_a7ddrphy_bitslip12_r0 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip12_r1 = 16'd0;
reg     [2:0] main_a7ddrphy_bitslip12_value0 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip12_value1 = 3'd7;
wire    [7:0] main_a7ddrphy_bitslip13;
reg     [7:0] main_a7ddrphy_bitslip130 = 8'd0;
wire    [7:0] main_a7ddrphy_bitslip131;
reg     [7:0] main_a7ddrphy_bitslip132 = 8'd0;
reg    [15:0] main_a7ddrphy_bitslip13_r0 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip13_r1 = 16'd0;
reg     [2:0] main_a7ddrphy_bitslip13_value0 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip13_value1 = 3'd7;
reg     [7:0] main_a7ddrphy_bitslip14 = 8'd0;
reg     [7:0] main_a7ddrphy_bitslip140 = 8'd0;
wire    [7:0] main_a7ddrphy_bitslip141;
reg     [7:0] main_a7ddrphy_bitslip142 = 8'd0;
reg    [15:0] main_a7ddrphy_bitslip14_r0 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip14_r1 = 16'd0;
reg     [2:0] main_a7ddrphy_bitslip14_value0 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip14_value1 = 3'd7;
reg     [7:0] main_a7ddrphy_bitslip150 = 8'd0;
wire    [7:0] main_a7ddrphy_bitslip151;
reg     [7:0] main_a7ddrphy_bitslip152 = 8'd0;
reg    [15:0] main_a7ddrphy_bitslip15_r0 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip15_r1 = 16'd0;
reg     [2:0] main_a7ddrphy_bitslip15_value0 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip15_value1 = 3'd7;
reg    [15:0] main_a7ddrphy_bitslip1_r0 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip1_r1 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip1_r2 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip1_r3 = 16'd0;
reg     [2:0] main_a7ddrphy_bitslip1_value0 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip1_value1 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip1_value2 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip1_value3 = 3'd7;
reg     [7:0] main_a7ddrphy_bitslip20 = 8'd0;
wire    [7:0] main_a7ddrphy_bitslip21;
reg     [7:0] main_a7ddrphy_bitslip22 = 8'd0;
reg    [15:0] main_a7ddrphy_bitslip2_r0 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip2_r1 = 16'd0;
reg     [2:0] main_a7ddrphy_bitslip2_value0 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip2_value1 = 3'd7;
reg     [7:0] main_a7ddrphy_bitslip30 = 8'd0;
wire    [7:0] main_a7ddrphy_bitslip31;
reg     [7:0] main_a7ddrphy_bitslip32 = 8'd0;
reg    [15:0] main_a7ddrphy_bitslip3_r0 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip3_r1 = 16'd0;
reg     [2:0] main_a7ddrphy_bitslip3_value0 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip3_value1 = 3'd7;
reg     [7:0] main_a7ddrphy_bitslip40 = 8'd0;
wire    [7:0] main_a7ddrphy_bitslip41;
reg     [7:0] main_a7ddrphy_bitslip42 = 8'd0;
reg    [15:0] main_a7ddrphy_bitslip4_r0 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip4_r1 = 16'd0;
reg     [2:0] main_a7ddrphy_bitslip4_value0 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip4_value1 = 3'd7;
reg     [7:0] main_a7ddrphy_bitslip50 = 8'd0;
wire    [7:0] main_a7ddrphy_bitslip51;
reg     [7:0] main_a7ddrphy_bitslip52 = 8'd0;
reg    [15:0] main_a7ddrphy_bitslip5_r0 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip5_r1 = 16'd0;
reg     [2:0] main_a7ddrphy_bitslip5_value0 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip5_value1 = 3'd7;
reg     [7:0] main_a7ddrphy_bitslip60 = 8'd0;
wire    [7:0] main_a7ddrphy_bitslip61;
reg     [7:0] main_a7ddrphy_bitslip62 = 8'd0;
reg    [15:0] main_a7ddrphy_bitslip6_r0 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip6_r1 = 16'd0;
reg     [2:0] main_a7ddrphy_bitslip6_value0 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip6_value1 = 3'd7;
reg     [7:0] main_a7ddrphy_bitslip70 = 8'd0;
wire    [7:0] main_a7ddrphy_bitslip71;
reg     [7:0] main_a7ddrphy_bitslip72 = 8'd0;
reg    [15:0] main_a7ddrphy_bitslip7_r0 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip7_r1 = 16'd0;
reg     [2:0] main_a7ddrphy_bitslip7_value0 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip7_value1 = 3'd7;
reg     [7:0] main_a7ddrphy_bitslip80 = 8'd0;
wire    [7:0] main_a7ddrphy_bitslip81;
reg     [7:0] main_a7ddrphy_bitslip82 = 8'd0;
reg    [15:0] main_a7ddrphy_bitslip8_r0 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip8_r1 = 16'd0;
reg     [2:0] main_a7ddrphy_bitslip8_value0 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip8_value1 = 3'd7;
reg     [7:0] main_a7ddrphy_bitslip90 = 8'd0;
wire    [7:0] main_a7ddrphy_bitslip91;
reg     [7:0] main_a7ddrphy_bitslip92 = 8'd0;
reg    [15:0] main_a7ddrphy_bitslip9_r0 = 16'd0;
reg    [15:0] main_a7ddrphy_bitslip9_r1 = 16'd0;
reg     [2:0] main_a7ddrphy_bitslip9_value0 = 3'd7;
reg     [2:0] main_a7ddrphy_bitslip9_value1 = 3'd7;
wire          main_a7ddrphy_dfi_p0_act_n;
wire   [14:0] main_a7ddrphy_dfi_p0_address;
wire    [2:0] main_a7ddrphy_dfi_p0_bank;
wire          main_a7ddrphy_dfi_p0_cas_n;
wire          main_a7ddrphy_dfi_p0_cke;
wire          main_a7ddrphy_dfi_p0_cs_n;
wire          main_a7ddrphy_dfi_p0_odt;
wire          main_a7ddrphy_dfi_p0_ras_n;
reg    [31:0] main_a7ddrphy_dfi_p0_rddata = 32'd0;
wire          main_a7ddrphy_dfi_p0_rddata_en;
wire          main_a7ddrphy_dfi_p0_rddata_valid;
wire          main_a7ddrphy_dfi_p0_reset_n;
wire          main_a7ddrphy_dfi_p0_we_n;
wire   [31:0] main_a7ddrphy_dfi_p0_wrdata;
wire          main_a7ddrphy_dfi_p0_wrdata_en;
wire    [3:0] main_a7ddrphy_dfi_p0_wrdata_mask;
wire          main_a7ddrphy_dfi_p1_act_n;
wire   [14:0] main_a7ddrphy_dfi_p1_address;
wire    [2:0] main_a7ddrphy_dfi_p1_bank;
wire          main_a7ddrphy_dfi_p1_cas_n;
wire          main_a7ddrphy_dfi_p1_cke;
wire          main_a7ddrphy_dfi_p1_cs_n;
wire          main_a7ddrphy_dfi_p1_odt;
wire          main_a7ddrphy_dfi_p1_ras_n;
reg    [31:0] main_a7ddrphy_dfi_p1_rddata = 32'd0;
wire          main_a7ddrphy_dfi_p1_rddata_en;
wire          main_a7ddrphy_dfi_p1_rddata_valid;
wire          main_a7ddrphy_dfi_p1_reset_n;
wire          main_a7ddrphy_dfi_p1_we_n;
wire   [31:0] main_a7ddrphy_dfi_p1_wrdata;
wire          main_a7ddrphy_dfi_p1_wrdata_en;
wire    [3:0] main_a7ddrphy_dfi_p1_wrdata_mask;
wire          main_a7ddrphy_dfi_p2_act_n;
wire   [14:0] main_a7ddrphy_dfi_p2_address;
wire    [2:0] main_a7ddrphy_dfi_p2_bank;
wire          main_a7ddrphy_dfi_p2_cas_n;
wire          main_a7ddrphy_dfi_p2_cke;
wire          main_a7ddrphy_dfi_p2_cs_n;
wire          main_a7ddrphy_dfi_p2_odt;
wire          main_a7ddrphy_dfi_p2_ras_n;
reg    [31:0] main_a7ddrphy_dfi_p2_rddata = 32'd0;
wire          main_a7ddrphy_dfi_p2_rddata_en;
wire          main_a7ddrphy_dfi_p2_rddata_valid;
wire          main_a7ddrphy_dfi_p2_reset_n;
wire          main_a7ddrphy_dfi_p2_we_n;
wire   [31:0] main_a7ddrphy_dfi_p2_wrdata;
wire          main_a7ddrphy_dfi_p2_wrdata_en;
wire    [3:0] main_a7ddrphy_dfi_p2_wrdata_mask;
wire          main_a7ddrphy_dfi_p3_act_n;
wire   [14:0] main_a7ddrphy_dfi_p3_address;
wire    [2:0] main_a7ddrphy_dfi_p3_bank;
wire          main_a7ddrphy_dfi_p3_cas_n;
wire          main_a7ddrphy_dfi_p3_cke;
wire          main_a7ddrphy_dfi_p3_cs_n;
wire          main_a7ddrphy_dfi_p3_odt;
wire          main_a7ddrphy_dfi_p3_ras_n;
reg    [31:0] main_a7ddrphy_dfi_p3_rddata = 32'd0;
wire          main_a7ddrphy_dfi_p3_rddata_en;
wire          main_a7ddrphy_dfi_p3_rddata_valid;
wire          main_a7ddrphy_dfi_p3_reset_n;
wire          main_a7ddrphy_dfi_p3_we_n;
wire   [31:0] main_a7ddrphy_dfi_p3_wrdata;
wire          main_a7ddrphy_dfi_p3_wrdata_en;
wire    [3:0] main_a7ddrphy_dfi_p3_wrdata_mask;
reg           main_a7ddrphy_dly_sel_re = 1'd0;
reg     [1:0] main_a7ddrphy_dly_sel_storage = 2'd0;
wire          main_a7ddrphy_dq_i_delayed0;
wire          main_a7ddrphy_dq_i_delayed1;
wire          main_a7ddrphy_dq_i_delayed10;
wire          main_a7ddrphy_dq_i_delayed11;
wire          main_a7ddrphy_dq_i_delayed12;
wire          main_a7ddrphy_dq_i_delayed13;
wire          main_a7ddrphy_dq_i_delayed14;
wire          main_a7ddrphy_dq_i_delayed15;
wire          main_a7ddrphy_dq_i_delayed2;
wire          main_a7ddrphy_dq_i_delayed3;
wire          main_a7ddrphy_dq_i_delayed4;
wire          main_a7ddrphy_dq_i_delayed5;
wire          main_a7ddrphy_dq_i_delayed6;
wire          main_a7ddrphy_dq_i_delayed7;
wire          main_a7ddrphy_dq_i_delayed8;
wire          main_a7ddrphy_dq_i_delayed9;
wire          main_a7ddrphy_dq_i_nodelay0;
wire          main_a7ddrphy_dq_i_nodelay1;
wire          main_a7ddrphy_dq_i_nodelay10;
wire          main_a7ddrphy_dq_i_nodelay11;
wire          main_a7ddrphy_dq_i_nodelay12;
wire          main_a7ddrphy_dq_i_nodelay13;
wire          main_a7ddrphy_dq_i_nodelay14;
wire          main_a7ddrphy_dq_i_nodelay15;
wire          main_a7ddrphy_dq_i_nodelay2;
wire          main_a7ddrphy_dq_i_nodelay3;
wire          main_a7ddrphy_dq_i_nodelay4;
wire          main_a7ddrphy_dq_i_nodelay5;
wire          main_a7ddrphy_dq_i_nodelay6;
wire          main_a7ddrphy_dq_i_nodelay7;
wire          main_a7ddrphy_dq_i_nodelay8;
wire          main_a7ddrphy_dq_i_nodelay9;
wire          main_a7ddrphy_dq_o_nodelay0;
wire          main_a7ddrphy_dq_o_nodelay1;
wire          main_a7ddrphy_dq_o_nodelay10;
wire          main_a7ddrphy_dq_o_nodelay11;
wire          main_a7ddrphy_dq_o_nodelay12;
wire          main_a7ddrphy_dq_o_nodelay13;
wire          main_a7ddrphy_dq_o_nodelay14;
wire          main_a7ddrphy_dq_o_nodelay15;
wire          main_a7ddrphy_dq_o_nodelay2;
wire          main_a7ddrphy_dq_o_nodelay3;
wire          main_a7ddrphy_dq_o_nodelay4;
wire          main_a7ddrphy_dq_o_nodelay5;
wire          main_a7ddrphy_dq_o_nodelay6;
wire          main_a7ddrphy_dq_o_nodelay7;
wire          main_a7ddrphy_dq_o_nodelay8;
wire          main_a7ddrphy_dq_o_nodelay9;
wire          main_a7ddrphy_dq_oe;
wire          main_a7ddrphy_dq_oe_delay_tappeddelayline;
reg           main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline0 = 1'd0;
reg           main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1 = 1'd0;
wire          main_a7ddrphy_dq_t0;
wire          main_a7ddrphy_dq_t1;
wire          main_a7ddrphy_dq_t10;
wire          main_a7ddrphy_dq_t11;
wire          main_a7ddrphy_dq_t12;
wire          main_a7ddrphy_dq_t13;
wire          main_a7ddrphy_dq_t14;
wire          main_a7ddrphy_dq_t15;
wire          main_a7ddrphy_dq_t2;
wire          main_a7ddrphy_dq_t3;
wire          main_a7ddrphy_dq_t4;
wire          main_a7ddrphy_dq_t5;
wire          main_a7ddrphy_dq_t6;
wire          main_a7ddrphy_dq_t7;
wire          main_a7ddrphy_dq_t8;
wire          main_a7ddrphy_dq_t9;
wire          main_a7ddrphy_dqs_o_no_delay0;
wire          main_a7ddrphy_dqs_o_no_delay1;
reg           main_a7ddrphy_dqs_oe = 1'd0;
wire          main_a7ddrphy_dqs_oe_delay_tappeddelayline;
reg           main_a7ddrphy_dqs_oe_delay_tappeddelayline_tappeddelayline0 = 1'd0;
reg           main_a7ddrphy_dqs_oe_delay_tappeddelayline_tappeddelayline1 = 1'd0;
wire          main_a7ddrphy_dqs_postamble;
wire          main_a7ddrphy_dqs_preamble;
wire          main_a7ddrphy_dqs_t0;
wire          main_a7ddrphy_dqs_t1;
reg           main_a7ddrphy_dqspattern0 = 1'd0;
reg           main_a7ddrphy_dqspattern1 = 1'd0;
reg     [7:0] main_a7ddrphy_dqspattern_o0 = 8'd0;
reg     [7:0] main_a7ddrphy_dqspattern_o1 = 8'd0;
reg           main_a7ddrphy_half_sys8x_taps_re = 1'd0;
reg     [4:0] main_a7ddrphy_half_sys8x_taps_storage = 5'd8;
wire    [2:0] main_a7ddrphy_pads_ba;
reg           main_a7ddrphy_rddata_en_tappeddelayline0 = 1'd0;
reg           main_a7ddrphy_rddata_en_tappeddelayline1 = 1'd0;
reg           main_a7ddrphy_rddata_en_tappeddelayline2 = 1'd0;
reg           main_a7ddrphy_rddata_en_tappeddelayline3 = 1'd0;
reg           main_a7ddrphy_rddata_en_tappeddelayline4 = 1'd0;
reg           main_a7ddrphy_rddata_en_tappeddelayline5 = 1'd0;
reg           main_a7ddrphy_rddata_en_tappeddelayline6 = 1'd0;
reg           main_a7ddrphy_rddata_en_tappeddelayline7 = 1'd0;
wire          main_a7ddrphy_rdly_dq_bitslip_r;
reg           main_a7ddrphy_rdly_dq_bitslip_re = 1'd0;
wire          main_a7ddrphy_rdly_dq_bitslip_rst_r;
reg           main_a7ddrphy_rdly_dq_bitslip_rst_re = 1'd0;
reg           main_a7ddrphy_rdly_dq_bitslip_rst_w = 1'd0;
reg           main_a7ddrphy_rdly_dq_bitslip_rst_we = 1'd0;
reg           main_a7ddrphy_rdly_dq_bitslip_w = 1'd0;
reg           main_a7ddrphy_rdly_dq_bitslip_we = 1'd0;
wire          main_a7ddrphy_rdly_dq_inc_r;
reg           main_a7ddrphy_rdly_dq_inc_re = 1'd0;
reg           main_a7ddrphy_rdly_dq_inc_w = 1'd0;
reg           main_a7ddrphy_rdly_dq_inc_we = 1'd0;
wire          main_a7ddrphy_rdly_dq_rst_r;
reg           main_a7ddrphy_rdly_dq_rst_re = 1'd0;
reg           main_a7ddrphy_rdly_dq_rst_w = 1'd0;
reg           main_a7ddrphy_rdly_dq_rst_we = 1'd0;
reg           main_a7ddrphy_rdphase_re = 1'd0;
reg     [1:0] main_a7ddrphy_rdphase_storage = 2'd2;
reg           main_a7ddrphy_rst_re = 1'd0;
reg           main_a7ddrphy_rst_storage = 1'd0;
wire          main_a7ddrphy_sd_clk_se_nodelay;
wire          main_a7ddrphy_wdly_dq_bitslip_r;
reg           main_a7ddrphy_wdly_dq_bitslip_re = 1'd0;
wire          main_a7ddrphy_wdly_dq_bitslip_rst_r;
reg           main_a7ddrphy_wdly_dq_bitslip_rst_re = 1'd0;
reg           main_a7ddrphy_wdly_dq_bitslip_rst_w = 1'd0;
reg           main_a7ddrphy_wdly_dq_bitslip_rst_we = 1'd0;
reg           main_a7ddrphy_wdly_dq_bitslip_w = 1'd0;
reg           main_a7ddrphy_wdly_dq_bitslip_we = 1'd0;
reg           main_a7ddrphy_wlevel_en_re = 1'd0;
reg           main_a7ddrphy_wlevel_en_storage = 1'd0;
wire          main_a7ddrphy_wlevel_strobe_r;
reg           main_a7ddrphy_wlevel_strobe_re = 1'd0;
reg           main_a7ddrphy_wlevel_strobe_w = 1'd0;
reg           main_a7ddrphy_wlevel_strobe_we = 1'd0;
reg           main_a7ddrphy_wrdata_en_tappeddelayline0 = 1'd0;
reg           main_a7ddrphy_wrdata_en_tappeddelayline1 = 1'd0;
reg           main_a7ddrphy_wrdata_en_tappeddelayline2 = 1'd0;
reg           main_a7ddrphy_wrphase_re = 1'd0;
reg     [1:0] main_a7ddrphy_wrphase_storage = 2'd3;
reg           main_ar_first = 1'd0;
reg           main_ar_last = 1'd0;
reg           main_ar_param_dest = 1'd0;
wire    [5:0] main_ar_param_id;
reg           main_ar_param_user = 1'd0;
wire   [28:0] main_ar_payload_addr;
wire    [1:0] main_ar_payload_burst;
reg     [3:0] main_ar_payload_cache = 4'd0;
wire    [7:0] main_ar_payload_len;
reg           main_ar_payload_lock = 1'd0;
reg     [2:0] main_ar_payload_prot = 3'd0;
reg     [3:0] main_ar_payload_qos = 4'd0;
reg     [3:0] main_ar_payload_region = 4'd0;
wire    [2:0] main_ar_payload_size;
wire          main_ar_ready;
wire          main_ar_valid;
reg           main_aw_first = 1'd0;
reg           main_aw_last = 1'd0;
reg           main_aw_param_dest = 1'd0;
wire    [5:0] main_aw_param_id;
reg           main_aw_param_user = 1'd0;
wire   [28:0] main_aw_payload_addr;
wire    [1:0] main_aw_payload_burst;
reg     [3:0] main_aw_payload_cache = 4'd0;
wire    [7:0] main_aw_payload_len;
reg           main_aw_payload_lock = 1'd0;
reg     [2:0] main_aw_payload_prot = 3'd0;
reg     [3:0] main_aw_payload_qos = 4'd0;
reg     [3:0] main_aw_payload_region = 4'd0;
wire    [2:0] main_aw_payload_size;
wire          main_aw_ready;
wire          main_aw_valid;
wire          main_b_first;
wire          main_b_last;
wire    [5:0] main_b_param_id;
wire    [1:0] main_b_payload_resp;
wire          main_b_ready;
wire          main_b_valid;
wire          main_ce;
wire          main_clkin;
wire          main_clkout0;
wire          main_clkout1;
wire          main_clkout2;
wire          main_clkout3;
wire          main_clkout_buf0;
wire          main_clkout_buf1;
wire          main_clkout_buf2;
wire          main_clkout_buf3;
reg           main_grant = 1'd0;
reg           main_ic_reset = 1'd1;
reg           main_init_done_re = 1'd0;
reg           main_init_done_storage = 1'd0;
reg           main_init_error_re = 1'd0;
reg           main_init_error_storage = 1'd0;
reg           main_litedramcore_aborted = 1'd0;
reg           main_litedramcore_aborted_litedramwishbone2native_next_value = 1'd0;
reg           main_litedramcore_aborted_litedramwishbone2native_next_value_ce = 1'd0;
reg     [1:0] main_litedramcore_adr_offset_r = 2'd0;
wire          main_litedramcore_bus_error;
reg    [31:0] main_litedramcore_bus_errors = 32'd0;
reg           main_litedramcore_bus_errors_re = 1'd0;
wire   [31:0] main_litedramcore_bus_errors_status;
wire          main_litedramcore_bus_errors_we;
wire          main_litedramcore_cpu_rst;
wire          main_litedramcore_data_port_adr;
wire  [127:0] main_litedramcore_data_port_dat_r;
reg   [127:0] main_litedramcore_data_port_dat_w = 128'd0;
reg    [15:0] main_litedramcore_data_port_we = 16'd0;
reg           main_litedramcore_en_re = 1'd0;
reg           main_litedramcore_en_storage = 1'd0;
reg           main_litedramcore_enable_re = 1'd0;
reg           main_litedramcore_enable_storage = 1'd0;
reg           main_litedramcore_interface_ack = 1'd0;
wire   [29:0] main_litedramcore_interface_adr;
reg           main_litedramcore_interface_cyc = 1'd0;
reg   [127:0] main_litedramcore_interface_dat_r = 128'd0;
wire  [127:0] main_litedramcore_interface_dat_w;
wire   [15:0] main_litedramcore_interface_sel;
reg           main_litedramcore_interface_stb = 1'd0;
reg           main_litedramcore_interface_we = 1'd0;
wire          main_litedramcore_irq;
reg           main_litedramcore_is_ongoing = 1'd0;
wire   [13:0] main_litedramcore_litedramcore_adr;
reg           main_litedramcore_litedramcore_adr_burst = 1'd0;
wire   [31:0] main_litedramcore_litedramcore_dat_r;
reg           main_litedramcore_litedramcore_ram_bus_ack = 1'd0;
wire   [29:0] main_litedramcore_litedramcore_ram_bus_adr;
wire    [1:0] main_litedramcore_litedramcore_ram_bus_bte;
wire    [2:0] main_litedramcore_litedramcore_ram_bus_cti;
wire          main_litedramcore_litedramcore_ram_bus_cyc;
wire   [31:0] main_litedramcore_litedramcore_ram_bus_dat_r;
wire   [31:0] main_litedramcore_litedramcore_ram_bus_dat_w;
reg           main_litedramcore_litedramcore_ram_bus_err = 1'd0;
wire    [3:0] main_litedramcore_litedramcore_ram_bus_sel;
wire          main_litedramcore_litedramcore_ram_bus_stb;
wire          main_litedramcore_litedramcore_ram_bus_we;
reg           main_litedramcore_load_re = 1'd0;
reg    [31:0] main_litedramcore_load_storage = 32'd0;
reg           main_litedramcore_pending_r = 1'd0;
reg           main_litedramcore_pending_re = 1'd0;
wire          main_litedramcore_pending_status;
wire          main_litedramcore_pending_we;
wire          main_litedramcore_port_cmd_last;
wire   [24:0] main_litedramcore_port_cmd_payload_addr;
wire          main_litedramcore_port_cmd_payload_we;
wire          main_litedramcore_port_cmd_ready;
reg           main_litedramcore_port_cmd_valid = 1'd0;
wire          main_litedramcore_port_flush;
wire  [127:0] main_litedramcore_port_rdata_payload_data;
wire          main_litedramcore_port_rdata_ready;
wire          main_litedramcore_port_rdata_valid;
wire  [127:0] main_litedramcore_port_wdata_payload_data;
wire   [15:0] main_litedramcore_port_wdata_payload_we;
wire          main_litedramcore_port_wdata_ready;
reg           main_litedramcore_port_wdata_valid = 1'd0;
wire   [10:0] main_litedramcore_ram_adr;
reg           main_litedramcore_ram_adr_burst = 1'd0;
reg           main_litedramcore_ram_bus_ram_bus_ack = 1'd0;
wire   [29:0] main_litedramcore_ram_bus_ram_bus_adr;
wire    [1:0] main_litedramcore_ram_bus_ram_bus_bte;
wire    [2:0] main_litedramcore_ram_bus_ram_bus_cti;
wire          main_litedramcore_ram_bus_ram_bus_cyc;
wire   [31:0] main_litedramcore_ram_bus_ram_bus_dat_r;
wire   [31:0] main_litedramcore_ram_bus_ram_bus_dat_w;
reg           main_litedramcore_ram_bus_ram_bus_err = 1'd0;
wire    [3:0] main_litedramcore_ram_bus_ram_bus_sel;
wire          main_litedramcore_ram_bus_ram_bus_stb;
wire          main_litedramcore_ram_bus_ram_bus_we;
wire   [31:0] main_litedramcore_ram_dat_r;
wire   [31:0] main_litedramcore_ram_dat_w;
reg     [3:0] main_litedramcore_ram_we = 4'd0;
reg           main_litedramcore_reload_re = 1'd0;
reg    [31:0] main_litedramcore_reload_storage = 32'd0;
reg           main_litedramcore_reset_re = 1'd0;
reg     [1:0] main_litedramcore_reset_storage = 2'd0;
reg           main_litedramcore_scratch_re = 1'd0;
reg    [31:0] main_litedramcore_scratch_storage = 32'd305419896;
reg           main_litedramcore_sdram_bankmachine0_auto_precharge = 1'd0;
reg    [14:0] main_litedramcore_sdram_bankmachine0_cmd_payload_a = 15'd0;
wire    [2:0] main_litedramcore_sdram_bankmachine0_cmd_payload_ba;
reg           main_litedramcore_sdram_bankmachine0_cmd_payload_cas = 1'd0;
reg           main_litedramcore_sdram_bankmachine0_cmd_payload_is_cmd = 1'd0;
reg           main_litedramcore_sdram_bankmachine0_cmd_payload_is_read = 1'd0;
reg           main_litedramcore_sdram_bankmachine0_cmd_payload_is_write = 1'd0;
reg           main_litedramcore_sdram_bankmachine0_cmd_payload_ras = 1'd0;
reg           main_litedramcore_sdram_bankmachine0_cmd_payload_we = 1'd0;
reg           main_litedramcore_sdram_bankmachine0_cmd_ready = 1'd0;
reg           main_litedramcore_sdram_bankmachine0_cmd_valid = 1'd0;
reg     [3:0] main_litedramcore_sdram_bankmachine0_consume = 4'd0;
wire          main_litedramcore_sdram_bankmachine0_do_read;
wire          main_litedramcore_sdram_bankmachine0_fifo_in_first;
wire          main_litedramcore_sdram_bankmachine0_fifo_in_last;
wire   [21:0] main_litedramcore_sdram_bankmachine0_fifo_in_payload_addr;
wire          main_litedramcore_sdram_bankmachine0_fifo_in_payload_we;
wire          main_litedramcore_sdram_bankmachine0_fifo_out_first;
wire          main_litedramcore_sdram_bankmachine0_fifo_out_last;
wire   [21:0] main_litedramcore_sdram_bankmachine0_fifo_out_payload_addr;
wire          main_litedramcore_sdram_bankmachine0_fifo_out_payload_we;
reg     [4:0] main_litedramcore_sdram_bankmachine0_level = 5'd0;
wire          main_litedramcore_sdram_bankmachine0_pipe_valid_sink_first;
wire          main_litedramcore_sdram_bankmachine0_pipe_valid_sink_last;
wire   [21:0] main_litedramcore_sdram_bankmachine0_pipe_valid_sink_payload_addr;
wire          main_litedramcore_sdram_bankmachine0_pipe_valid_sink_payload_we;
wire          main_litedramcore_sdram_bankmachine0_pipe_valid_sink_ready;
wire          main_litedramcore_sdram_bankmachine0_pipe_valid_sink_valid;
reg           main_litedramcore_sdram_bankmachine0_pipe_valid_source_first = 1'd0;
reg           main_litedramcore_sdram_bankmachine0_pipe_valid_source_last = 1'd0;
reg    [21:0] main_litedramcore_sdram_bankmachine0_pipe_valid_source_payload_addr = 22'd0;
reg           main_litedramcore_sdram_bankmachine0_pipe_valid_source_payload_we = 1'd0;
wire          main_litedramcore_sdram_bankmachine0_pipe_valid_source_ready;
reg           main_litedramcore_sdram_bankmachine0_pipe_valid_source_valid = 1'd0;
reg     [3:0] main_litedramcore_sdram_bankmachine0_produce = 4'd0;
wire    [3:0] main_litedramcore_sdram_bankmachine0_rdport_adr;
wire   [24:0] main_litedramcore_sdram_bankmachine0_rdport_dat_r;
reg           main_litedramcore_sdram_bankmachine0_refresh_gnt = 1'd0;
wire          main_litedramcore_sdram_bankmachine0_refresh_req;
reg           main_litedramcore_sdram_bankmachine0_replace = 1'd0;
wire   [21:0] main_litedramcore_sdram_bankmachine0_req_addr;
wire          main_litedramcore_sdram_bankmachine0_req_lock;
reg           main_litedramcore_sdram_bankmachine0_req_rdata_valid = 1'd0;
wire          main_litedramcore_sdram_bankmachine0_req_ready;
wire          main_litedramcore_sdram_bankmachine0_req_valid;
reg           main_litedramcore_sdram_bankmachine0_req_wdata_ready = 1'd0;
wire          main_litedramcore_sdram_bankmachine0_req_we;
reg    [14:0] main_litedramcore_sdram_bankmachine0_row = 15'd0;
reg           main_litedramcore_sdram_bankmachine0_row_close = 1'd0;
reg           main_litedramcore_sdram_bankmachine0_row_col_n_addr_sel = 1'd0;
wire          main_litedramcore_sdram_bankmachine0_row_hit;
reg           main_litedramcore_sdram_bankmachine0_row_open = 1'd0;
reg           main_litedramcore_sdram_bankmachine0_row_opened = 1'd0;
reg           main_litedramcore_sdram_bankmachine0_sink_first = 1'd0;
reg           main_litedramcore_sdram_bankmachine0_sink_last = 1'd0;
wire   [21:0] main_litedramcore_sdram_bankmachine0_sink_payload_addr;
wire          main_litedramcore_sdram_bankmachine0_sink_payload_we;
wire          main_litedramcore_sdram_bankmachine0_sink_ready;
wire          main_litedramcore_sdram_bankmachine0_sink_sink_first;
wire          main_litedramcore_sdram_bankmachine0_sink_sink_last;
wire   [21:0] main_litedramcore_sdram_bankmachine0_sink_sink_payload_addr;
wire          main_litedramcore_sdram_bankmachine0_sink_sink_payload_we;
wire          main_litedramcore_sdram_bankmachine0_sink_sink_ready;
wire          main_litedramcore_sdram_bankmachine0_sink_sink_valid;
wire          main_litedramcore_sdram_bankmachine0_sink_valid;
wire          main_litedramcore_sdram_bankmachine0_source_first;
wire          main_litedramcore_sdram_bankmachine0_source_last;
wire   [21:0] main_litedramcore_sdram_bankmachine0_source_payload_addr;
wire          main_litedramcore_sdram_bankmachine0_source_payload_we;
wire          main_litedramcore_sdram_bankmachine0_source_ready;
wire          main_litedramcore_sdram_bankmachine0_source_source_first;
wire          main_litedramcore_sdram_bankmachine0_source_source_last;
wire   [21:0] main_litedramcore_sdram_bankmachine0_source_source_payload_addr;
wire          main_litedramcore_sdram_bankmachine0_source_source_payload_we;
wire          main_litedramcore_sdram_bankmachine0_source_source_ready;
wire          main_litedramcore_sdram_bankmachine0_source_source_valid;
wire          main_litedramcore_sdram_bankmachine0_source_valid;
wire   [24:0] main_litedramcore_sdram_bankmachine0_syncfifo0_din;
wire   [24:0] main_litedramcore_sdram_bankmachine0_syncfifo0_dout;
wire          main_litedramcore_sdram_bankmachine0_syncfifo0_re;
wire          main_litedramcore_sdram_bankmachine0_syncfifo0_readable;
wire          main_litedramcore_sdram_bankmachine0_syncfifo0_we;
wire          main_litedramcore_sdram_bankmachine0_syncfifo0_writable;
reg     [2:0] main_litedramcore_sdram_bankmachine0_trascon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_litedramcore_sdram_bankmachine0_trascon_ready = 1'd0;
wire          main_litedramcore_sdram_bankmachine0_trascon_valid;
reg     [2:0] main_litedramcore_sdram_bankmachine0_trccon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_litedramcore_sdram_bankmachine0_trccon_ready = 1'd0;
wire          main_litedramcore_sdram_bankmachine0_trccon_valid;
reg     [2:0] main_litedramcore_sdram_bankmachine0_twtpcon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_litedramcore_sdram_bankmachine0_twtpcon_ready = 1'd0;
wire          main_litedramcore_sdram_bankmachine0_twtpcon_valid;
reg     [3:0] main_litedramcore_sdram_bankmachine0_wrport_adr = 4'd0;
wire   [24:0] main_litedramcore_sdram_bankmachine0_wrport_dat_r;
wire   [24:0] main_litedramcore_sdram_bankmachine0_wrport_dat_w;
wire          main_litedramcore_sdram_bankmachine0_wrport_we;
reg           main_litedramcore_sdram_bankmachine1_auto_precharge = 1'd0;
reg    [14:0] main_litedramcore_sdram_bankmachine1_cmd_payload_a = 15'd0;
wire    [2:0] main_litedramcore_sdram_bankmachine1_cmd_payload_ba;
reg           main_litedramcore_sdram_bankmachine1_cmd_payload_cas = 1'd0;
reg           main_litedramcore_sdram_bankmachine1_cmd_payload_is_cmd = 1'd0;
reg           main_litedramcore_sdram_bankmachine1_cmd_payload_is_read = 1'd0;
reg           main_litedramcore_sdram_bankmachine1_cmd_payload_is_write = 1'd0;
reg           main_litedramcore_sdram_bankmachine1_cmd_payload_ras = 1'd0;
reg           main_litedramcore_sdram_bankmachine1_cmd_payload_we = 1'd0;
reg           main_litedramcore_sdram_bankmachine1_cmd_ready = 1'd0;
reg           main_litedramcore_sdram_bankmachine1_cmd_valid = 1'd0;
reg     [3:0] main_litedramcore_sdram_bankmachine1_consume = 4'd0;
wire          main_litedramcore_sdram_bankmachine1_do_read;
wire          main_litedramcore_sdram_bankmachine1_fifo_in_first;
wire          main_litedramcore_sdram_bankmachine1_fifo_in_last;
wire   [21:0] main_litedramcore_sdram_bankmachine1_fifo_in_payload_addr;
wire          main_litedramcore_sdram_bankmachine1_fifo_in_payload_we;
wire          main_litedramcore_sdram_bankmachine1_fifo_out_first;
wire          main_litedramcore_sdram_bankmachine1_fifo_out_last;
wire   [21:0] main_litedramcore_sdram_bankmachine1_fifo_out_payload_addr;
wire          main_litedramcore_sdram_bankmachine1_fifo_out_payload_we;
reg     [4:0] main_litedramcore_sdram_bankmachine1_level = 5'd0;
wire          main_litedramcore_sdram_bankmachine1_pipe_valid_sink_first;
wire          main_litedramcore_sdram_bankmachine1_pipe_valid_sink_last;
wire   [21:0] main_litedramcore_sdram_bankmachine1_pipe_valid_sink_payload_addr;
wire          main_litedramcore_sdram_bankmachine1_pipe_valid_sink_payload_we;
wire          main_litedramcore_sdram_bankmachine1_pipe_valid_sink_ready;
wire          main_litedramcore_sdram_bankmachine1_pipe_valid_sink_valid;
reg           main_litedramcore_sdram_bankmachine1_pipe_valid_source_first = 1'd0;
reg           main_litedramcore_sdram_bankmachine1_pipe_valid_source_last = 1'd0;
reg    [21:0] main_litedramcore_sdram_bankmachine1_pipe_valid_source_payload_addr = 22'd0;
reg           main_litedramcore_sdram_bankmachine1_pipe_valid_source_payload_we = 1'd0;
wire          main_litedramcore_sdram_bankmachine1_pipe_valid_source_ready;
reg           main_litedramcore_sdram_bankmachine1_pipe_valid_source_valid = 1'd0;
reg     [3:0] main_litedramcore_sdram_bankmachine1_produce = 4'd0;
wire    [3:0] main_litedramcore_sdram_bankmachine1_rdport_adr;
wire   [24:0] main_litedramcore_sdram_bankmachine1_rdport_dat_r;
reg           main_litedramcore_sdram_bankmachine1_refresh_gnt = 1'd0;
wire          main_litedramcore_sdram_bankmachine1_refresh_req;
reg           main_litedramcore_sdram_bankmachine1_replace = 1'd0;
wire   [21:0] main_litedramcore_sdram_bankmachine1_req_addr;
wire          main_litedramcore_sdram_bankmachine1_req_lock;
reg           main_litedramcore_sdram_bankmachine1_req_rdata_valid = 1'd0;
wire          main_litedramcore_sdram_bankmachine1_req_ready;
wire          main_litedramcore_sdram_bankmachine1_req_valid;
reg           main_litedramcore_sdram_bankmachine1_req_wdata_ready = 1'd0;
wire          main_litedramcore_sdram_bankmachine1_req_we;
reg    [14:0] main_litedramcore_sdram_bankmachine1_row = 15'd0;
reg           main_litedramcore_sdram_bankmachine1_row_close = 1'd0;
reg           main_litedramcore_sdram_bankmachine1_row_col_n_addr_sel = 1'd0;
wire          main_litedramcore_sdram_bankmachine1_row_hit;
reg           main_litedramcore_sdram_bankmachine1_row_open = 1'd0;
reg           main_litedramcore_sdram_bankmachine1_row_opened = 1'd0;
reg           main_litedramcore_sdram_bankmachine1_sink_first = 1'd0;
reg           main_litedramcore_sdram_bankmachine1_sink_last = 1'd0;
wire   [21:0] main_litedramcore_sdram_bankmachine1_sink_payload_addr;
wire          main_litedramcore_sdram_bankmachine1_sink_payload_we;
wire          main_litedramcore_sdram_bankmachine1_sink_ready;
wire          main_litedramcore_sdram_bankmachine1_sink_sink_first;
wire          main_litedramcore_sdram_bankmachine1_sink_sink_last;
wire   [21:0] main_litedramcore_sdram_bankmachine1_sink_sink_payload_addr;
wire          main_litedramcore_sdram_bankmachine1_sink_sink_payload_we;
wire          main_litedramcore_sdram_bankmachine1_sink_sink_ready;
wire          main_litedramcore_sdram_bankmachine1_sink_sink_valid;
wire          main_litedramcore_sdram_bankmachine1_sink_valid;
wire          main_litedramcore_sdram_bankmachine1_source_first;
wire          main_litedramcore_sdram_bankmachine1_source_last;
wire   [21:0] main_litedramcore_sdram_bankmachine1_source_payload_addr;
wire          main_litedramcore_sdram_bankmachine1_source_payload_we;
wire          main_litedramcore_sdram_bankmachine1_source_ready;
wire          main_litedramcore_sdram_bankmachine1_source_source_first;
wire          main_litedramcore_sdram_bankmachine1_source_source_last;
wire   [21:0] main_litedramcore_sdram_bankmachine1_source_source_payload_addr;
wire          main_litedramcore_sdram_bankmachine1_source_source_payload_we;
wire          main_litedramcore_sdram_bankmachine1_source_source_ready;
wire          main_litedramcore_sdram_bankmachine1_source_source_valid;
wire          main_litedramcore_sdram_bankmachine1_source_valid;
wire   [24:0] main_litedramcore_sdram_bankmachine1_syncfifo1_din;
wire   [24:0] main_litedramcore_sdram_bankmachine1_syncfifo1_dout;
wire          main_litedramcore_sdram_bankmachine1_syncfifo1_re;
wire          main_litedramcore_sdram_bankmachine1_syncfifo1_readable;
wire          main_litedramcore_sdram_bankmachine1_syncfifo1_we;
wire          main_litedramcore_sdram_bankmachine1_syncfifo1_writable;
reg     [2:0] main_litedramcore_sdram_bankmachine1_trascon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_litedramcore_sdram_bankmachine1_trascon_ready = 1'd0;
wire          main_litedramcore_sdram_bankmachine1_trascon_valid;
reg     [2:0] main_litedramcore_sdram_bankmachine1_trccon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_litedramcore_sdram_bankmachine1_trccon_ready = 1'd0;
wire          main_litedramcore_sdram_bankmachine1_trccon_valid;
reg     [2:0] main_litedramcore_sdram_bankmachine1_twtpcon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_litedramcore_sdram_bankmachine1_twtpcon_ready = 1'd0;
wire          main_litedramcore_sdram_bankmachine1_twtpcon_valid;
reg     [3:0] main_litedramcore_sdram_bankmachine1_wrport_adr = 4'd0;
wire   [24:0] main_litedramcore_sdram_bankmachine1_wrport_dat_r;
wire   [24:0] main_litedramcore_sdram_bankmachine1_wrport_dat_w;
wire          main_litedramcore_sdram_bankmachine1_wrport_we;
reg           main_litedramcore_sdram_bankmachine2_auto_precharge = 1'd0;
reg    [14:0] main_litedramcore_sdram_bankmachine2_cmd_payload_a = 15'd0;
wire    [2:0] main_litedramcore_sdram_bankmachine2_cmd_payload_ba;
reg           main_litedramcore_sdram_bankmachine2_cmd_payload_cas = 1'd0;
reg           main_litedramcore_sdram_bankmachine2_cmd_payload_is_cmd = 1'd0;
reg           main_litedramcore_sdram_bankmachine2_cmd_payload_is_read = 1'd0;
reg           main_litedramcore_sdram_bankmachine2_cmd_payload_is_write = 1'd0;
reg           main_litedramcore_sdram_bankmachine2_cmd_payload_ras = 1'd0;
reg           main_litedramcore_sdram_bankmachine2_cmd_payload_we = 1'd0;
reg           main_litedramcore_sdram_bankmachine2_cmd_ready = 1'd0;
reg           main_litedramcore_sdram_bankmachine2_cmd_valid = 1'd0;
reg     [3:0] main_litedramcore_sdram_bankmachine2_consume = 4'd0;
wire          main_litedramcore_sdram_bankmachine2_do_read;
wire          main_litedramcore_sdram_bankmachine2_fifo_in_first;
wire          main_litedramcore_sdram_bankmachine2_fifo_in_last;
wire   [21:0] main_litedramcore_sdram_bankmachine2_fifo_in_payload_addr;
wire          main_litedramcore_sdram_bankmachine2_fifo_in_payload_we;
wire          main_litedramcore_sdram_bankmachine2_fifo_out_first;
wire          main_litedramcore_sdram_bankmachine2_fifo_out_last;
wire   [21:0] main_litedramcore_sdram_bankmachine2_fifo_out_payload_addr;
wire          main_litedramcore_sdram_bankmachine2_fifo_out_payload_we;
reg     [4:0] main_litedramcore_sdram_bankmachine2_level = 5'd0;
wire          main_litedramcore_sdram_bankmachine2_pipe_valid_sink_first;
wire          main_litedramcore_sdram_bankmachine2_pipe_valid_sink_last;
wire   [21:0] main_litedramcore_sdram_bankmachine2_pipe_valid_sink_payload_addr;
wire          main_litedramcore_sdram_bankmachine2_pipe_valid_sink_payload_we;
wire          main_litedramcore_sdram_bankmachine2_pipe_valid_sink_ready;
wire          main_litedramcore_sdram_bankmachine2_pipe_valid_sink_valid;
reg           main_litedramcore_sdram_bankmachine2_pipe_valid_source_first = 1'd0;
reg           main_litedramcore_sdram_bankmachine2_pipe_valid_source_last = 1'd0;
reg    [21:0] main_litedramcore_sdram_bankmachine2_pipe_valid_source_payload_addr = 22'd0;
reg           main_litedramcore_sdram_bankmachine2_pipe_valid_source_payload_we = 1'd0;
wire          main_litedramcore_sdram_bankmachine2_pipe_valid_source_ready;
reg           main_litedramcore_sdram_bankmachine2_pipe_valid_source_valid = 1'd0;
reg     [3:0] main_litedramcore_sdram_bankmachine2_produce = 4'd0;
wire    [3:0] main_litedramcore_sdram_bankmachine2_rdport_adr;
wire   [24:0] main_litedramcore_sdram_bankmachine2_rdport_dat_r;
reg           main_litedramcore_sdram_bankmachine2_refresh_gnt = 1'd0;
wire          main_litedramcore_sdram_bankmachine2_refresh_req;
reg           main_litedramcore_sdram_bankmachine2_replace = 1'd0;
wire   [21:0] main_litedramcore_sdram_bankmachine2_req_addr;
wire          main_litedramcore_sdram_bankmachine2_req_lock;
reg           main_litedramcore_sdram_bankmachine2_req_rdata_valid = 1'd0;
wire          main_litedramcore_sdram_bankmachine2_req_ready;
wire          main_litedramcore_sdram_bankmachine2_req_valid;
reg           main_litedramcore_sdram_bankmachine2_req_wdata_ready = 1'd0;
wire          main_litedramcore_sdram_bankmachine2_req_we;
reg    [14:0] main_litedramcore_sdram_bankmachine2_row = 15'd0;
reg           main_litedramcore_sdram_bankmachine2_row_close = 1'd0;
reg           main_litedramcore_sdram_bankmachine2_row_col_n_addr_sel = 1'd0;
wire          main_litedramcore_sdram_bankmachine2_row_hit;
reg           main_litedramcore_sdram_bankmachine2_row_open = 1'd0;
reg           main_litedramcore_sdram_bankmachine2_row_opened = 1'd0;
reg           main_litedramcore_sdram_bankmachine2_sink_first = 1'd0;
reg           main_litedramcore_sdram_bankmachine2_sink_last = 1'd0;
wire   [21:0] main_litedramcore_sdram_bankmachine2_sink_payload_addr;
wire          main_litedramcore_sdram_bankmachine2_sink_payload_we;
wire          main_litedramcore_sdram_bankmachine2_sink_ready;
wire          main_litedramcore_sdram_bankmachine2_sink_sink_first;
wire          main_litedramcore_sdram_bankmachine2_sink_sink_last;
wire   [21:0] main_litedramcore_sdram_bankmachine2_sink_sink_payload_addr;
wire          main_litedramcore_sdram_bankmachine2_sink_sink_payload_we;
wire          main_litedramcore_sdram_bankmachine2_sink_sink_ready;
wire          main_litedramcore_sdram_bankmachine2_sink_sink_valid;
wire          main_litedramcore_sdram_bankmachine2_sink_valid;
wire          main_litedramcore_sdram_bankmachine2_source_first;
wire          main_litedramcore_sdram_bankmachine2_source_last;
wire   [21:0] main_litedramcore_sdram_bankmachine2_source_payload_addr;
wire          main_litedramcore_sdram_bankmachine2_source_payload_we;
wire          main_litedramcore_sdram_bankmachine2_source_ready;
wire          main_litedramcore_sdram_bankmachine2_source_source_first;
wire          main_litedramcore_sdram_bankmachine2_source_source_last;
wire   [21:0] main_litedramcore_sdram_bankmachine2_source_source_payload_addr;
wire          main_litedramcore_sdram_bankmachine2_source_source_payload_we;
wire          main_litedramcore_sdram_bankmachine2_source_source_ready;
wire          main_litedramcore_sdram_bankmachine2_source_source_valid;
wire          main_litedramcore_sdram_bankmachine2_source_valid;
wire   [24:0] main_litedramcore_sdram_bankmachine2_syncfifo2_din;
wire   [24:0] main_litedramcore_sdram_bankmachine2_syncfifo2_dout;
wire          main_litedramcore_sdram_bankmachine2_syncfifo2_re;
wire          main_litedramcore_sdram_bankmachine2_syncfifo2_readable;
wire          main_litedramcore_sdram_bankmachine2_syncfifo2_we;
wire          main_litedramcore_sdram_bankmachine2_syncfifo2_writable;
reg     [2:0] main_litedramcore_sdram_bankmachine2_trascon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_litedramcore_sdram_bankmachine2_trascon_ready = 1'd0;
wire          main_litedramcore_sdram_bankmachine2_trascon_valid;
reg     [2:0] main_litedramcore_sdram_bankmachine2_trccon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_litedramcore_sdram_bankmachine2_trccon_ready = 1'd0;
wire          main_litedramcore_sdram_bankmachine2_trccon_valid;
reg     [2:0] main_litedramcore_sdram_bankmachine2_twtpcon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_litedramcore_sdram_bankmachine2_twtpcon_ready = 1'd0;
wire          main_litedramcore_sdram_bankmachine2_twtpcon_valid;
reg     [3:0] main_litedramcore_sdram_bankmachine2_wrport_adr = 4'd0;
wire   [24:0] main_litedramcore_sdram_bankmachine2_wrport_dat_r;
wire   [24:0] main_litedramcore_sdram_bankmachine2_wrport_dat_w;
wire          main_litedramcore_sdram_bankmachine2_wrport_we;
reg           main_litedramcore_sdram_bankmachine3_auto_precharge = 1'd0;
reg    [14:0] main_litedramcore_sdram_bankmachine3_cmd_payload_a = 15'd0;
wire    [2:0] main_litedramcore_sdram_bankmachine3_cmd_payload_ba;
reg           main_litedramcore_sdram_bankmachine3_cmd_payload_cas = 1'd0;
reg           main_litedramcore_sdram_bankmachine3_cmd_payload_is_cmd = 1'd0;
reg           main_litedramcore_sdram_bankmachine3_cmd_payload_is_read = 1'd0;
reg           main_litedramcore_sdram_bankmachine3_cmd_payload_is_write = 1'd0;
reg           main_litedramcore_sdram_bankmachine3_cmd_payload_ras = 1'd0;
reg           main_litedramcore_sdram_bankmachine3_cmd_payload_we = 1'd0;
reg           main_litedramcore_sdram_bankmachine3_cmd_ready = 1'd0;
reg           main_litedramcore_sdram_bankmachine3_cmd_valid = 1'd0;
reg     [3:0] main_litedramcore_sdram_bankmachine3_consume = 4'd0;
wire          main_litedramcore_sdram_bankmachine3_do_read;
wire          main_litedramcore_sdram_bankmachine3_fifo_in_first;
wire          main_litedramcore_sdram_bankmachine3_fifo_in_last;
wire   [21:0] main_litedramcore_sdram_bankmachine3_fifo_in_payload_addr;
wire          main_litedramcore_sdram_bankmachine3_fifo_in_payload_we;
wire          main_litedramcore_sdram_bankmachine3_fifo_out_first;
wire          main_litedramcore_sdram_bankmachine3_fifo_out_last;
wire   [21:0] main_litedramcore_sdram_bankmachine3_fifo_out_payload_addr;
wire          main_litedramcore_sdram_bankmachine3_fifo_out_payload_we;
reg     [4:0] main_litedramcore_sdram_bankmachine3_level = 5'd0;
wire          main_litedramcore_sdram_bankmachine3_pipe_valid_sink_first;
wire          main_litedramcore_sdram_bankmachine3_pipe_valid_sink_last;
wire   [21:0] main_litedramcore_sdram_bankmachine3_pipe_valid_sink_payload_addr;
wire          main_litedramcore_sdram_bankmachine3_pipe_valid_sink_payload_we;
wire          main_litedramcore_sdram_bankmachine3_pipe_valid_sink_ready;
wire          main_litedramcore_sdram_bankmachine3_pipe_valid_sink_valid;
reg           main_litedramcore_sdram_bankmachine3_pipe_valid_source_first = 1'd0;
reg           main_litedramcore_sdram_bankmachine3_pipe_valid_source_last = 1'd0;
reg    [21:0] main_litedramcore_sdram_bankmachine3_pipe_valid_source_payload_addr = 22'd0;
reg           main_litedramcore_sdram_bankmachine3_pipe_valid_source_payload_we = 1'd0;
wire          main_litedramcore_sdram_bankmachine3_pipe_valid_source_ready;
reg           main_litedramcore_sdram_bankmachine3_pipe_valid_source_valid = 1'd0;
reg     [3:0] main_litedramcore_sdram_bankmachine3_produce = 4'd0;
wire    [3:0] main_litedramcore_sdram_bankmachine3_rdport_adr;
wire   [24:0] main_litedramcore_sdram_bankmachine3_rdport_dat_r;
reg           main_litedramcore_sdram_bankmachine3_refresh_gnt = 1'd0;
wire          main_litedramcore_sdram_bankmachine3_refresh_req;
reg           main_litedramcore_sdram_bankmachine3_replace = 1'd0;
wire   [21:0] main_litedramcore_sdram_bankmachine3_req_addr;
wire          main_litedramcore_sdram_bankmachine3_req_lock;
reg           main_litedramcore_sdram_bankmachine3_req_rdata_valid = 1'd0;
wire          main_litedramcore_sdram_bankmachine3_req_ready;
wire          main_litedramcore_sdram_bankmachine3_req_valid;
reg           main_litedramcore_sdram_bankmachine3_req_wdata_ready = 1'd0;
wire          main_litedramcore_sdram_bankmachine3_req_we;
reg    [14:0] main_litedramcore_sdram_bankmachine3_row = 15'd0;
reg           main_litedramcore_sdram_bankmachine3_row_close = 1'd0;
reg           main_litedramcore_sdram_bankmachine3_row_col_n_addr_sel = 1'd0;
wire          main_litedramcore_sdram_bankmachine3_row_hit;
reg           main_litedramcore_sdram_bankmachine3_row_open = 1'd0;
reg           main_litedramcore_sdram_bankmachine3_row_opened = 1'd0;
reg           main_litedramcore_sdram_bankmachine3_sink_first = 1'd0;
reg           main_litedramcore_sdram_bankmachine3_sink_last = 1'd0;
wire   [21:0] main_litedramcore_sdram_bankmachine3_sink_payload_addr;
wire          main_litedramcore_sdram_bankmachine3_sink_payload_we;
wire          main_litedramcore_sdram_bankmachine3_sink_ready;
wire          main_litedramcore_sdram_bankmachine3_sink_sink_first;
wire          main_litedramcore_sdram_bankmachine3_sink_sink_last;
wire   [21:0] main_litedramcore_sdram_bankmachine3_sink_sink_payload_addr;
wire          main_litedramcore_sdram_bankmachine3_sink_sink_payload_we;
wire          main_litedramcore_sdram_bankmachine3_sink_sink_ready;
wire          main_litedramcore_sdram_bankmachine3_sink_sink_valid;
wire          main_litedramcore_sdram_bankmachine3_sink_valid;
wire          main_litedramcore_sdram_bankmachine3_source_first;
wire          main_litedramcore_sdram_bankmachine3_source_last;
wire   [21:0] main_litedramcore_sdram_bankmachine3_source_payload_addr;
wire          main_litedramcore_sdram_bankmachine3_source_payload_we;
wire          main_litedramcore_sdram_bankmachine3_source_ready;
wire          main_litedramcore_sdram_bankmachine3_source_source_first;
wire          main_litedramcore_sdram_bankmachine3_source_source_last;
wire   [21:0] main_litedramcore_sdram_bankmachine3_source_source_payload_addr;
wire          main_litedramcore_sdram_bankmachine3_source_source_payload_we;
wire          main_litedramcore_sdram_bankmachine3_source_source_ready;
wire          main_litedramcore_sdram_bankmachine3_source_source_valid;
wire          main_litedramcore_sdram_bankmachine3_source_valid;
wire   [24:0] main_litedramcore_sdram_bankmachine3_syncfifo3_din;
wire   [24:0] main_litedramcore_sdram_bankmachine3_syncfifo3_dout;
wire          main_litedramcore_sdram_bankmachine3_syncfifo3_re;
wire          main_litedramcore_sdram_bankmachine3_syncfifo3_readable;
wire          main_litedramcore_sdram_bankmachine3_syncfifo3_we;
wire          main_litedramcore_sdram_bankmachine3_syncfifo3_writable;
reg     [2:0] main_litedramcore_sdram_bankmachine3_trascon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_litedramcore_sdram_bankmachine3_trascon_ready = 1'd0;
wire          main_litedramcore_sdram_bankmachine3_trascon_valid;
reg     [2:0] main_litedramcore_sdram_bankmachine3_trccon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_litedramcore_sdram_bankmachine3_trccon_ready = 1'd0;
wire          main_litedramcore_sdram_bankmachine3_trccon_valid;
reg     [2:0] main_litedramcore_sdram_bankmachine3_twtpcon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_litedramcore_sdram_bankmachine3_twtpcon_ready = 1'd0;
wire          main_litedramcore_sdram_bankmachine3_twtpcon_valid;
reg     [3:0] main_litedramcore_sdram_bankmachine3_wrport_adr = 4'd0;
wire   [24:0] main_litedramcore_sdram_bankmachine3_wrport_dat_r;
wire   [24:0] main_litedramcore_sdram_bankmachine3_wrport_dat_w;
wire          main_litedramcore_sdram_bankmachine3_wrport_we;
reg           main_litedramcore_sdram_bankmachine4_auto_precharge = 1'd0;
reg    [14:0] main_litedramcore_sdram_bankmachine4_cmd_payload_a = 15'd0;
wire    [2:0] main_litedramcore_sdram_bankmachine4_cmd_payload_ba;
reg           main_litedramcore_sdram_bankmachine4_cmd_payload_cas = 1'd0;
reg           main_litedramcore_sdram_bankmachine4_cmd_payload_is_cmd = 1'd0;
reg           main_litedramcore_sdram_bankmachine4_cmd_payload_is_read = 1'd0;
reg           main_litedramcore_sdram_bankmachine4_cmd_payload_is_write = 1'd0;
reg           main_litedramcore_sdram_bankmachine4_cmd_payload_ras = 1'd0;
reg           main_litedramcore_sdram_bankmachine4_cmd_payload_we = 1'd0;
reg           main_litedramcore_sdram_bankmachine4_cmd_ready = 1'd0;
reg           main_litedramcore_sdram_bankmachine4_cmd_valid = 1'd0;
reg     [3:0] main_litedramcore_sdram_bankmachine4_consume = 4'd0;
wire          main_litedramcore_sdram_bankmachine4_do_read;
wire          main_litedramcore_sdram_bankmachine4_fifo_in_first;
wire          main_litedramcore_sdram_bankmachine4_fifo_in_last;
wire   [21:0] main_litedramcore_sdram_bankmachine4_fifo_in_payload_addr;
wire          main_litedramcore_sdram_bankmachine4_fifo_in_payload_we;
wire          main_litedramcore_sdram_bankmachine4_fifo_out_first;
wire          main_litedramcore_sdram_bankmachine4_fifo_out_last;
wire   [21:0] main_litedramcore_sdram_bankmachine4_fifo_out_payload_addr;
wire          main_litedramcore_sdram_bankmachine4_fifo_out_payload_we;
reg     [4:0] main_litedramcore_sdram_bankmachine4_level = 5'd0;
wire          main_litedramcore_sdram_bankmachine4_pipe_valid_sink_first;
wire          main_litedramcore_sdram_bankmachine4_pipe_valid_sink_last;
wire   [21:0] main_litedramcore_sdram_bankmachine4_pipe_valid_sink_payload_addr;
wire          main_litedramcore_sdram_bankmachine4_pipe_valid_sink_payload_we;
wire          main_litedramcore_sdram_bankmachine4_pipe_valid_sink_ready;
wire          main_litedramcore_sdram_bankmachine4_pipe_valid_sink_valid;
reg           main_litedramcore_sdram_bankmachine4_pipe_valid_source_first = 1'd0;
reg           main_litedramcore_sdram_bankmachine4_pipe_valid_source_last = 1'd0;
reg    [21:0] main_litedramcore_sdram_bankmachine4_pipe_valid_source_payload_addr = 22'd0;
reg           main_litedramcore_sdram_bankmachine4_pipe_valid_source_payload_we = 1'd0;
wire          main_litedramcore_sdram_bankmachine4_pipe_valid_source_ready;
reg           main_litedramcore_sdram_bankmachine4_pipe_valid_source_valid = 1'd0;
reg     [3:0] main_litedramcore_sdram_bankmachine4_produce = 4'd0;
wire    [3:0] main_litedramcore_sdram_bankmachine4_rdport_adr;
wire   [24:0] main_litedramcore_sdram_bankmachine4_rdport_dat_r;
reg           main_litedramcore_sdram_bankmachine4_refresh_gnt = 1'd0;
wire          main_litedramcore_sdram_bankmachine4_refresh_req;
reg           main_litedramcore_sdram_bankmachine4_replace = 1'd0;
wire   [21:0] main_litedramcore_sdram_bankmachine4_req_addr;
wire          main_litedramcore_sdram_bankmachine4_req_lock;
reg           main_litedramcore_sdram_bankmachine4_req_rdata_valid = 1'd0;
wire          main_litedramcore_sdram_bankmachine4_req_ready;
wire          main_litedramcore_sdram_bankmachine4_req_valid;
reg           main_litedramcore_sdram_bankmachine4_req_wdata_ready = 1'd0;
wire          main_litedramcore_sdram_bankmachine4_req_we;
reg    [14:0] main_litedramcore_sdram_bankmachine4_row = 15'd0;
reg           main_litedramcore_sdram_bankmachine4_row_close = 1'd0;
reg           main_litedramcore_sdram_bankmachine4_row_col_n_addr_sel = 1'd0;
wire          main_litedramcore_sdram_bankmachine4_row_hit;
reg           main_litedramcore_sdram_bankmachine4_row_open = 1'd0;
reg           main_litedramcore_sdram_bankmachine4_row_opened = 1'd0;
reg           main_litedramcore_sdram_bankmachine4_sink_first = 1'd0;
reg           main_litedramcore_sdram_bankmachine4_sink_last = 1'd0;
wire   [21:0] main_litedramcore_sdram_bankmachine4_sink_payload_addr;
wire          main_litedramcore_sdram_bankmachine4_sink_payload_we;
wire          main_litedramcore_sdram_bankmachine4_sink_ready;
wire          main_litedramcore_sdram_bankmachine4_sink_sink_first;
wire          main_litedramcore_sdram_bankmachine4_sink_sink_last;
wire   [21:0] main_litedramcore_sdram_bankmachine4_sink_sink_payload_addr;
wire          main_litedramcore_sdram_bankmachine4_sink_sink_payload_we;
wire          main_litedramcore_sdram_bankmachine4_sink_sink_ready;
wire          main_litedramcore_sdram_bankmachine4_sink_sink_valid;
wire          main_litedramcore_sdram_bankmachine4_sink_valid;
wire          main_litedramcore_sdram_bankmachine4_source_first;
wire          main_litedramcore_sdram_bankmachine4_source_last;
wire   [21:0] main_litedramcore_sdram_bankmachine4_source_payload_addr;
wire          main_litedramcore_sdram_bankmachine4_source_payload_we;
wire          main_litedramcore_sdram_bankmachine4_source_ready;
wire          main_litedramcore_sdram_bankmachine4_source_source_first;
wire          main_litedramcore_sdram_bankmachine4_source_source_last;
wire   [21:0] main_litedramcore_sdram_bankmachine4_source_source_payload_addr;
wire          main_litedramcore_sdram_bankmachine4_source_source_payload_we;
wire          main_litedramcore_sdram_bankmachine4_source_source_ready;
wire          main_litedramcore_sdram_bankmachine4_source_source_valid;
wire          main_litedramcore_sdram_bankmachine4_source_valid;
wire   [24:0] main_litedramcore_sdram_bankmachine4_syncfifo4_din;
wire   [24:0] main_litedramcore_sdram_bankmachine4_syncfifo4_dout;
wire          main_litedramcore_sdram_bankmachine4_syncfifo4_re;
wire          main_litedramcore_sdram_bankmachine4_syncfifo4_readable;
wire          main_litedramcore_sdram_bankmachine4_syncfifo4_we;
wire          main_litedramcore_sdram_bankmachine4_syncfifo4_writable;
reg     [2:0] main_litedramcore_sdram_bankmachine4_trascon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_litedramcore_sdram_bankmachine4_trascon_ready = 1'd0;
wire          main_litedramcore_sdram_bankmachine4_trascon_valid;
reg     [2:0] main_litedramcore_sdram_bankmachine4_trccon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_litedramcore_sdram_bankmachine4_trccon_ready = 1'd0;
wire          main_litedramcore_sdram_bankmachine4_trccon_valid;
reg     [2:0] main_litedramcore_sdram_bankmachine4_twtpcon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_litedramcore_sdram_bankmachine4_twtpcon_ready = 1'd0;
wire          main_litedramcore_sdram_bankmachine4_twtpcon_valid;
reg     [3:0] main_litedramcore_sdram_bankmachine4_wrport_adr = 4'd0;
wire   [24:0] main_litedramcore_sdram_bankmachine4_wrport_dat_r;
wire   [24:0] main_litedramcore_sdram_bankmachine4_wrport_dat_w;
wire          main_litedramcore_sdram_bankmachine4_wrport_we;
reg           main_litedramcore_sdram_bankmachine5_auto_precharge = 1'd0;
reg    [14:0] main_litedramcore_sdram_bankmachine5_cmd_payload_a = 15'd0;
wire    [2:0] main_litedramcore_sdram_bankmachine5_cmd_payload_ba;
reg           main_litedramcore_sdram_bankmachine5_cmd_payload_cas = 1'd0;
reg           main_litedramcore_sdram_bankmachine5_cmd_payload_is_cmd = 1'd0;
reg           main_litedramcore_sdram_bankmachine5_cmd_payload_is_read = 1'd0;
reg           main_litedramcore_sdram_bankmachine5_cmd_payload_is_write = 1'd0;
reg           main_litedramcore_sdram_bankmachine5_cmd_payload_ras = 1'd0;
reg           main_litedramcore_sdram_bankmachine5_cmd_payload_we = 1'd0;
reg           main_litedramcore_sdram_bankmachine5_cmd_ready = 1'd0;
reg           main_litedramcore_sdram_bankmachine5_cmd_valid = 1'd0;
reg     [3:0] main_litedramcore_sdram_bankmachine5_consume = 4'd0;
wire          main_litedramcore_sdram_bankmachine5_do_read;
wire          main_litedramcore_sdram_bankmachine5_fifo_in_first;
wire          main_litedramcore_sdram_bankmachine5_fifo_in_last;
wire   [21:0] main_litedramcore_sdram_bankmachine5_fifo_in_payload_addr;
wire          main_litedramcore_sdram_bankmachine5_fifo_in_payload_we;
wire          main_litedramcore_sdram_bankmachine5_fifo_out_first;
wire          main_litedramcore_sdram_bankmachine5_fifo_out_last;
wire   [21:0] main_litedramcore_sdram_bankmachine5_fifo_out_payload_addr;
wire          main_litedramcore_sdram_bankmachine5_fifo_out_payload_we;
reg     [4:0] main_litedramcore_sdram_bankmachine5_level = 5'd0;
wire          main_litedramcore_sdram_bankmachine5_pipe_valid_sink_first;
wire          main_litedramcore_sdram_bankmachine5_pipe_valid_sink_last;
wire   [21:0] main_litedramcore_sdram_bankmachine5_pipe_valid_sink_payload_addr;
wire          main_litedramcore_sdram_bankmachine5_pipe_valid_sink_payload_we;
wire          main_litedramcore_sdram_bankmachine5_pipe_valid_sink_ready;
wire          main_litedramcore_sdram_bankmachine5_pipe_valid_sink_valid;
reg           main_litedramcore_sdram_bankmachine5_pipe_valid_source_first = 1'd0;
reg           main_litedramcore_sdram_bankmachine5_pipe_valid_source_last = 1'd0;
reg    [21:0] main_litedramcore_sdram_bankmachine5_pipe_valid_source_payload_addr = 22'd0;
reg           main_litedramcore_sdram_bankmachine5_pipe_valid_source_payload_we = 1'd0;
wire          main_litedramcore_sdram_bankmachine5_pipe_valid_source_ready;
reg           main_litedramcore_sdram_bankmachine5_pipe_valid_source_valid = 1'd0;
reg     [3:0] main_litedramcore_sdram_bankmachine5_produce = 4'd0;
wire    [3:0] main_litedramcore_sdram_bankmachine5_rdport_adr;
wire   [24:0] main_litedramcore_sdram_bankmachine5_rdport_dat_r;
reg           main_litedramcore_sdram_bankmachine5_refresh_gnt = 1'd0;
wire          main_litedramcore_sdram_bankmachine5_refresh_req;
reg           main_litedramcore_sdram_bankmachine5_replace = 1'd0;
wire   [21:0] main_litedramcore_sdram_bankmachine5_req_addr;
wire          main_litedramcore_sdram_bankmachine5_req_lock;
reg           main_litedramcore_sdram_bankmachine5_req_rdata_valid = 1'd0;
wire          main_litedramcore_sdram_bankmachine5_req_ready;
wire          main_litedramcore_sdram_bankmachine5_req_valid;
reg           main_litedramcore_sdram_bankmachine5_req_wdata_ready = 1'd0;
wire          main_litedramcore_sdram_bankmachine5_req_we;
reg    [14:0] main_litedramcore_sdram_bankmachine5_row = 15'd0;
reg           main_litedramcore_sdram_bankmachine5_row_close = 1'd0;
reg           main_litedramcore_sdram_bankmachine5_row_col_n_addr_sel = 1'd0;
wire          main_litedramcore_sdram_bankmachine5_row_hit;
reg           main_litedramcore_sdram_bankmachine5_row_open = 1'd0;
reg           main_litedramcore_sdram_bankmachine5_row_opened = 1'd0;
reg           main_litedramcore_sdram_bankmachine5_sink_first = 1'd0;
reg           main_litedramcore_sdram_bankmachine5_sink_last = 1'd0;
wire   [21:0] main_litedramcore_sdram_bankmachine5_sink_payload_addr;
wire          main_litedramcore_sdram_bankmachine5_sink_payload_we;
wire          main_litedramcore_sdram_bankmachine5_sink_ready;
wire          main_litedramcore_sdram_bankmachine5_sink_sink_first;
wire          main_litedramcore_sdram_bankmachine5_sink_sink_last;
wire   [21:0] main_litedramcore_sdram_bankmachine5_sink_sink_payload_addr;
wire          main_litedramcore_sdram_bankmachine5_sink_sink_payload_we;
wire          main_litedramcore_sdram_bankmachine5_sink_sink_ready;
wire          main_litedramcore_sdram_bankmachine5_sink_sink_valid;
wire          main_litedramcore_sdram_bankmachine5_sink_valid;
wire          main_litedramcore_sdram_bankmachine5_source_first;
wire          main_litedramcore_sdram_bankmachine5_source_last;
wire   [21:0] main_litedramcore_sdram_bankmachine5_source_payload_addr;
wire          main_litedramcore_sdram_bankmachine5_source_payload_we;
wire          main_litedramcore_sdram_bankmachine5_source_ready;
wire          main_litedramcore_sdram_bankmachine5_source_source_first;
wire          main_litedramcore_sdram_bankmachine5_source_source_last;
wire   [21:0] main_litedramcore_sdram_bankmachine5_source_source_payload_addr;
wire          main_litedramcore_sdram_bankmachine5_source_source_payload_we;
wire          main_litedramcore_sdram_bankmachine5_source_source_ready;
wire          main_litedramcore_sdram_bankmachine5_source_source_valid;
wire          main_litedramcore_sdram_bankmachine5_source_valid;
wire   [24:0] main_litedramcore_sdram_bankmachine5_syncfifo5_din;
wire   [24:0] main_litedramcore_sdram_bankmachine5_syncfifo5_dout;
wire          main_litedramcore_sdram_bankmachine5_syncfifo5_re;
wire          main_litedramcore_sdram_bankmachine5_syncfifo5_readable;
wire          main_litedramcore_sdram_bankmachine5_syncfifo5_we;
wire          main_litedramcore_sdram_bankmachine5_syncfifo5_writable;
reg     [2:0] main_litedramcore_sdram_bankmachine5_trascon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_litedramcore_sdram_bankmachine5_trascon_ready = 1'd0;
wire          main_litedramcore_sdram_bankmachine5_trascon_valid;
reg     [2:0] main_litedramcore_sdram_bankmachine5_trccon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_litedramcore_sdram_bankmachine5_trccon_ready = 1'd0;
wire          main_litedramcore_sdram_bankmachine5_trccon_valid;
reg     [2:0] main_litedramcore_sdram_bankmachine5_twtpcon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_litedramcore_sdram_bankmachine5_twtpcon_ready = 1'd0;
wire          main_litedramcore_sdram_bankmachine5_twtpcon_valid;
reg     [3:0] main_litedramcore_sdram_bankmachine5_wrport_adr = 4'd0;
wire   [24:0] main_litedramcore_sdram_bankmachine5_wrport_dat_r;
wire   [24:0] main_litedramcore_sdram_bankmachine5_wrport_dat_w;
wire          main_litedramcore_sdram_bankmachine5_wrport_we;
reg           main_litedramcore_sdram_bankmachine6_auto_precharge = 1'd0;
reg    [14:0] main_litedramcore_sdram_bankmachine6_cmd_payload_a = 15'd0;
wire    [2:0] main_litedramcore_sdram_bankmachine6_cmd_payload_ba;
reg           main_litedramcore_sdram_bankmachine6_cmd_payload_cas = 1'd0;
reg           main_litedramcore_sdram_bankmachine6_cmd_payload_is_cmd = 1'd0;
reg           main_litedramcore_sdram_bankmachine6_cmd_payload_is_read = 1'd0;
reg           main_litedramcore_sdram_bankmachine6_cmd_payload_is_write = 1'd0;
reg           main_litedramcore_sdram_bankmachine6_cmd_payload_ras = 1'd0;
reg           main_litedramcore_sdram_bankmachine6_cmd_payload_we = 1'd0;
reg           main_litedramcore_sdram_bankmachine6_cmd_ready = 1'd0;
reg           main_litedramcore_sdram_bankmachine6_cmd_valid = 1'd0;
reg     [3:0] main_litedramcore_sdram_bankmachine6_consume = 4'd0;
wire          main_litedramcore_sdram_bankmachine6_do_read;
wire          main_litedramcore_sdram_bankmachine6_fifo_in_first;
wire          main_litedramcore_sdram_bankmachine6_fifo_in_last;
wire   [21:0] main_litedramcore_sdram_bankmachine6_fifo_in_payload_addr;
wire          main_litedramcore_sdram_bankmachine6_fifo_in_payload_we;
wire          main_litedramcore_sdram_bankmachine6_fifo_out_first;
wire          main_litedramcore_sdram_bankmachine6_fifo_out_last;
wire   [21:0] main_litedramcore_sdram_bankmachine6_fifo_out_payload_addr;
wire          main_litedramcore_sdram_bankmachine6_fifo_out_payload_we;
reg     [4:0] main_litedramcore_sdram_bankmachine6_level = 5'd0;
wire          main_litedramcore_sdram_bankmachine6_pipe_valid_sink_first;
wire          main_litedramcore_sdram_bankmachine6_pipe_valid_sink_last;
wire   [21:0] main_litedramcore_sdram_bankmachine6_pipe_valid_sink_payload_addr;
wire          main_litedramcore_sdram_bankmachine6_pipe_valid_sink_payload_we;
wire          main_litedramcore_sdram_bankmachine6_pipe_valid_sink_ready;
wire          main_litedramcore_sdram_bankmachine6_pipe_valid_sink_valid;
reg           main_litedramcore_sdram_bankmachine6_pipe_valid_source_first = 1'd0;
reg           main_litedramcore_sdram_bankmachine6_pipe_valid_source_last = 1'd0;
reg    [21:0] main_litedramcore_sdram_bankmachine6_pipe_valid_source_payload_addr = 22'd0;
reg           main_litedramcore_sdram_bankmachine6_pipe_valid_source_payload_we = 1'd0;
wire          main_litedramcore_sdram_bankmachine6_pipe_valid_source_ready;
reg           main_litedramcore_sdram_bankmachine6_pipe_valid_source_valid = 1'd0;
reg     [3:0] main_litedramcore_sdram_bankmachine6_produce = 4'd0;
wire    [3:0] main_litedramcore_sdram_bankmachine6_rdport_adr;
wire   [24:0] main_litedramcore_sdram_bankmachine6_rdport_dat_r;
reg           main_litedramcore_sdram_bankmachine6_refresh_gnt = 1'd0;
wire          main_litedramcore_sdram_bankmachine6_refresh_req;
reg           main_litedramcore_sdram_bankmachine6_replace = 1'd0;
wire   [21:0] main_litedramcore_sdram_bankmachine6_req_addr;
wire          main_litedramcore_sdram_bankmachine6_req_lock;
reg           main_litedramcore_sdram_bankmachine6_req_rdata_valid = 1'd0;
wire          main_litedramcore_sdram_bankmachine6_req_ready;
wire          main_litedramcore_sdram_bankmachine6_req_valid;
reg           main_litedramcore_sdram_bankmachine6_req_wdata_ready = 1'd0;
wire          main_litedramcore_sdram_bankmachine6_req_we;
reg    [14:0] main_litedramcore_sdram_bankmachine6_row = 15'd0;
reg           main_litedramcore_sdram_bankmachine6_row_close = 1'd0;
reg           main_litedramcore_sdram_bankmachine6_row_col_n_addr_sel = 1'd0;
wire          main_litedramcore_sdram_bankmachine6_row_hit;
reg           main_litedramcore_sdram_bankmachine6_row_open = 1'd0;
reg           main_litedramcore_sdram_bankmachine6_row_opened = 1'd0;
reg           main_litedramcore_sdram_bankmachine6_sink_first = 1'd0;
reg           main_litedramcore_sdram_bankmachine6_sink_last = 1'd0;
wire   [21:0] main_litedramcore_sdram_bankmachine6_sink_payload_addr;
wire          main_litedramcore_sdram_bankmachine6_sink_payload_we;
wire          main_litedramcore_sdram_bankmachine6_sink_ready;
wire          main_litedramcore_sdram_bankmachine6_sink_sink_first;
wire          main_litedramcore_sdram_bankmachine6_sink_sink_last;
wire   [21:0] main_litedramcore_sdram_bankmachine6_sink_sink_payload_addr;
wire          main_litedramcore_sdram_bankmachine6_sink_sink_payload_we;
wire          main_litedramcore_sdram_bankmachine6_sink_sink_ready;
wire          main_litedramcore_sdram_bankmachine6_sink_sink_valid;
wire          main_litedramcore_sdram_bankmachine6_sink_valid;
wire          main_litedramcore_sdram_bankmachine6_source_first;
wire          main_litedramcore_sdram_bankmachine6_source_last;
wire   [21:0] main_litedramcore_sdram_bankmachine6_source_payload_addr;
wire          main_litedramcore_sdram_bankmachine6_source_payload_we;
wire          main_litedramcore_sdram_bankmachine6_source_ready;
wire          main_litedramcore_sdram_bankmachine6_source_source_first;
wire          main_litedramcore_sdram_bankmachine6_source_source_last;
wire   [21:0] main_litedramcore_sdram_bankmachine6_source_source_payload_addr;
wire          main_litedramcore_sdram_bankmachine6_source_source_payload_we;
wire          main_litedramcore_sdram_bankmachine6_source_source_ready;
wire          main_litedramcore_sdram_bankmachine6_source_source_valid;
wire          main_litedramcore_sdram_bankmachine6_source_valid;
wire   [24:0] main_litedramcore_sdram_bankmachine6_syncfifo6_din;
wire   [24:0] main_litedramcore_sdram_bankmachine6_syncfifo6_dout;
wire          main_litedramcore_sdram_bankmachine6_syncfifo6_re;
wire          main_litedramcore_sdram_bankmachine6_syncfifo6_readable;
wire          main_litedramcore_sdram_bankmachine6_syncfifo6_we;
wire          main_litedramcore_sdram_bankmachine6_syncfifo6_writable;
reg     [2:0] main_litedramcore_sdram_bankmachine6_trascon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_litedramcore_sdram_bankmachine6_trascon_ready = 1'd0;
wire          main_litedramcore_sdram_bankmachine6_trascon_valid;
reg     [2:0] main_litedramcore_sdram_bankmachine6_trccon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_litedramcore_sdram_bankmachine6_trccon_ready = 1'd0;
wire          main_litedramcore_sdram_bankmachine6_trccon_valid;
reg     [2:0] main_litedramcore_sdram_bankmachine6_twtpcon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_litedramcore_sdram_bankmachine6_twtpcon_ready = 1'd0;
wire          main_litedramcore_sdram_bankmachine6_twtpcon_valid;
reg     [3:0] main_litedramcore_sdram_bankmachine6_wrport_adr = 4'd0;
wire   [24:0] main_litedramcore_sdram_bankmachine6_wrport_dat_r;
wire   [24:0] main_litedramcore_sdram_bankmachine6_wrport_dat_w;
wire          main_litedramcore_sdram_bankmachine6_wrport_we;
reg           main_litedramcore_sdram_bankmachine7_auto_precharge = 1'd0;
reg    [14:0] main_litedramcore_sdram_bankmachine7_cmd_payload_a = 15'd0;
wire    [2:0] main_litedramcore_sdram_bankmachine7_cmd_payload_ba;
reg           main_litedramcore_sdram_bankmachine7_cmd_payload_cas = 1'd0;
reg           main_litedramcore_sdram_bankmachine7_cmd_payload_is_cmd = 1'd0;
reg           main_litedramcore_sdram_bankmachine7_cmd_payload_is_read = 1'd0;
reg           main_litedramcore_sdram_bankmachine7_cmd_payload_is_write = 1'd0;
reg           main_litedramcore_sdram_bankmachine7_cmd_payload_ras = 1'd0;
reg           main_litedramcore_sdram_bankmachine7_cmd_payload_we = 1'd0;
reg           main_litedramcore_sdram_bankmachine7_cmd_ready = 1'd0;
reg           main_litedramcore_sdram_bankmachine7_cmd_valid = 1'd0;
reg     [3:0] main_litedramcore_sdram_bankmachine7_consume = 4'd0;
wire          main_litedramcore_sdram_bankmachine7_do_read;
wire          main_litedramcore_sdram_bankmachine7_fifo_in_first;
wire          main_litedramcore_sdram_bankmachine7_fifo_in_last;
wire   [21:0] main_litedramcore_sdram_bankmachine7_fifo_in_payload_addr;
wire          main_litedramcore_sdram_bankmachine7_fifo_in_payload_we;
wire          main_litedramcore_sdram_bankmachine7_fifo_out_first;
wire          main_litedramcore_sdram_bankmachine7_fifo_out_last;
wire   [21:0] main_litedramcore_sdram_bankmachine7_fifo_out_payload_addr;
wire          main_litedramcore_sdram_bankmachine7_fifo_out_payload_we;
reg     [4:0] main_litedramcore_sdram_bankmachine7_level = 5'd0;
wire          main_litedramcore_sdram_bankmachine7_pipe_valid_sink_first;
wire          main_litedramcore_sdram_bankmachine7_pipe_valid_sink_last;
wire   [21:0] main_litedramcore_sdram_bankmachine7_pipe_valid_sink_payload_addr;
wire          main_litedramcore_sdram_bankmachine7_pipe_valid_sink_payload_we;
wire          main_litedramcore_sdram_bankmachine7_pipe_valid_sink_ready;
wire          main_litedramcore_sdram_bankmachine7_pipe_valid_sink_valid;
reg           main_litedramcore_sdram_bankmachine7_pipe_valid_source_first = 1'd0;
reg           main_litedramcore_sdram_bankmachine7_pipe_valid_source_last = 1'd0;
reg    [21:0] main_litedramcore_sdram_bankmachine7_pipe_valid_source_payload_addr = 22'd0;
reg           main_litedramcore_sdram_bankmachine7_pipe_valid_source_payload_we = 1'd0;
wire          main_litedramcore_sdram_bankmachine7_pipe_valid_source_ready;
reg           main_litedramcore_sdram_bankmachine7_pipe_valid_source_valid = 1'd0;
reg     [3:0] main_litedramcore_sdram_bankmachine7_produce = 4'd0;
wire    [3:0] main_litedramcore_sdram_bankmachine7_rdport_adr;
wire   [24:0] main_litedramcore_sdram_bankmachine7_rdport_dat_r;
reg           main_litedramcore_sdram_bankmachine7_refresh_gnt = 1'd0;
wire          main_litedramcore_sdram_bankmachine7_refresh_req;
reg           main_litedramcore_sdram_bankmachine7_replace = 1'd0;
wire   [21:0] main_litedramcore_sdram_bankmachine7_req_addr;
wire          main_litedramcore_sdram_bankmachine7_req_lock;
reg           main_litedramcore_sdram_bankmachine7_req_rdata_valid = 1'd0;
wire          main_litedramcore_sdram_bankmachine7_req_ready;
wire          main_litedramcore_sdram_bankmachine7_req_valid;
reg           main_litedramcore_sdram_bankmachine7_req_wdata_ready = 1'd0;
wire          main_litedramcore_sdram_bankmachine7_req_we;
reg    [14:0] main_litedramcore_sdram_bankmachine7_row = 15'd0;
reg           main_litedramcore_sdram_bankmachine7_row_close = 1'd0;
reg           main_litedramcore_sdram_bankmachine7_row_col_n_addr_sel = 1'd0;
wire          main_litedramcore_sdram_bankmachine7_row_hit;
reg           main_litedramcore_sdram_bankmachine7_row_open = 1'd0;
reg           main_litedramcore_sdram_bankmachine7_row_opened = 1'd0;
reg           main_litedramcore_sdram_bankmachine7_sink_first = 1'd0;
reg           main_litedramcore_sdram_bankmachine7_sink_last = 1'd0;
wire   [21:0] main_litedramcore_sdram_bankmachine7_sink_payload_addr;
wire          main_litedramcore_sdram_bankmachine7_sink_payload_we;
wire          main_litedramcore_sdram_bankmachine7_sink_ready;
wire          main_litedramcore_sdram_bankmachine7_sink_sink_first;
wire          main_litedramcore_sdram_bankmachine7_sink_sink_last;
wire   [21:0] main_litedramcore_sdram_bankmachine7_sink_sink_payload_addr;
wire          main_litedramcore_sdram_bankmachine7_sink_sink_payload_we;
wire          main_litedramcore_sdram_bankmachine7_sink_sink_ready;
wire          main_litedramcore_sdram_bankmachine7_sink_sink_valid;
wire          main_litedramcore_sdram_bankmachine7_sink_valid;
wire          main_litedramcore_sdram_bankmachine7_source_first;
wire          main_litedramcore_sdram_bankmachine7_source_last;
wire   [21:0] main_litedramcore_sdram_bankmachine7_source_payload_addr;
wire          main_litedramcore_sdram_bankmachine7_source_payload_we;
wire          main_litedramcore_sdram_bankmachine7_source_ready;
wire          main_litedramcore_sdram_bankmachine7_source_source_first;
wire          main_litedramcore_sdram_bankmachine7_source_source_last;
wire   [21:0] main_litedramcore_sdram_bankmachine7_source_source_payload_addr;
wire          main_litedramcore_sdram_bankmachine7_source_source_payload_we;
wire          main_litedramcore_sdram_bankmachine7_source_source_ready;
wire          main_litedramcore_sdram_bankmachine7_source_source_valid;
wire          main_litedramcore_sdram_bankmachine7_source_valid;
wire   [24:0] main_litedramcore_sdram_bankmachine7_syncfifo7_din;
wire   [24:0] main_litedramcore_sdram_bankmachine7_syncfifo7_dout;
wire          main_litedramcore_sdram_bankmachine7_syncfifo7_re;
wire          main_litedramcore_sdram_bankmachine7_syncfifo7_readable;
wire          main_litedramcore_sdram_bankmachine7_syncfifo7_we;
wire          main_litedramcore_sdram_bankmachine7_syncfifo7_writable;
reg     [2:0] main_litedramcore_sdram_bankmachine7_trascon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_litedramcore_sdram_bankmachine7_trascon_ready = 1'd0;
wire          main_litedramcore_sdram_bankmachine7_trascon_valid;
reg     [2:0] main_litedramcore_sdram_bankmachine7_trccon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_litedramcore_sdram_bankmachine7_trccon_ready = 1'd0;
wire          main_litedramcore_sdram_bankmachine7_trccon_valid;
reg     [2:0] main_litedramcore_sdram_bankmachine7_twtpcon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_litedramcore_sdram_bankmachine7_twtpcon_ready = 1'd0;
wire          main_litedramcore_sdram_bankmachine7_twtpcon_valid;
reg     [3:0] main_litedramcore_sdram_bankmachine7_wrport_adr = 4'd0;
wire   [24:0] main_litedramcore_sdram_bankmachine7_wrport_dat_r;
wire   [24:0] main_litedramcore_sdram_bankmachine7_wrport_dat_w;
wire          main_litedramcore_sdram_bankmachine7_wrport_we;
wire          main_litedramcore_sdram_cas_allowed;
wire          main_litedramcore_sdram_choose_cmd_ce;
wire   [14:0] main_litedramcore_sdram_choose_cmd_cmd_payload_a;
wire    [2:0] main_litedramcore_sdram_choose_cmd_cmd_payload_ba;
reg           main_litedramcore_sdram_choose_cmd_cmd_payload_cas = 1'd0;
wire          main_litedramcore_sdram_choose_cmd_cmd_payload_is_cmd;
wire          main_litedramcore_sdram_choose_cmd_cmd_payload_is_read;
wire          main_litedramcore_sdram_choose_cmd_cmd_payload_is_write;
reg           main_litedramcore_sdram_choose_cmd_cmd_payload_ras = 1'd0;
reg           main_litedramcore_sdram_choose_cmd_cmd_payload_we = 1'd0;
reg           main_litedramcore_sdram_choose_cmd_cmd_ready = 1'd0;
wire          main_litedramcore_sdram_choose_cmd_cmd_valid;
reg     [2:0] main_litedramcore_sdram_choose_cmd_grant = 3'd0;
wire    [7:0] main_litedramcore_sdram_choose_cmd_request;
reg     [7:0] main_litedramcore_sdram_choose_cmd_valids = 8'd0;
reg           main_litedramcore_sdram_choose_cmd_want_activates = 1'd0;
reg           main_litedramcore_sdram_choose_cmd_want_cmds = 1'd0;
reg           main_litedramcore_sdram_choose_cmd_want_reads = 1'd0;
reg           main_litedramcore_sdram_choose_cmd_want_writes = 1'd0;
wire          main_litedramcore_sdram_choose_req_ce;
wire   [14:0] main_litedramcore_sdram_choose_req_cmd_payload_a;
wire    [2:0] main_litedramcore_sdram_choose_req_cmd_payload_ba;
reg           main_litedramcore_sdram_choose_req_cmd_payload_cas = 1'd0;
wire          main_litedramcore_sdram_choose_req_cmd_payload_is_cmd;
wire          main_litedramcore_sdram_choose_req_cmd_payload_is_read;
wire          main_litedramcore_sdram_choose_req_cmd_payload_is_write;
reg           main_litedramcore_sdram_choose_req_cmd_payload_ras = 1'd0;
reg           main_litedramcore_sdram_choose_req_cmd_payload_we = 1'd0;
reg           main_litedramcore_sdram_choose_req_cmd_ready = 1'd0;
wire          main_litedramcore_sdram_choose_req_cmd_valid;
reg     [2:0] main_litedramcore_sdram_choose_req_grant = 3'd0;
wire    [7:0] main_litedramcore_sdram_choose_req_request;
reg     [7:0] main_litedramcore_sdram_choose_req_valids = 8'd0;
reg           main_litedramcore_sdram_choose_req_want_activates = 1'd0;
reg           main_litedramcore_sdram_choose_req_want_cmds = 1'd0;
reg           main_litedramcore_sdram_choose_req_want_reads = 1'd0;
reg           main_litedramcore_sdram_choose_req_want_writes = 1'd0;
wire          main_litedramcore_sdram_cke;
reg           main_litedramcore_sdram_cmd_last = 1'd0;
reg    [14:0] main_litedramcore_sdram_cmd_payload_a = 15'd0;
reg     [2:0] main_litedramcore_sdram_cmd_payload_ba = 3'd0;
reg           main_litedramcore_sdram_cmd_payload_cas = 1'd0;
reg           main_litedramcore_sdram_cmd_payload_is_read = 1'd0;
reg           main_litedramcore_sdram_cmd_payload_is_write = 1'd0;
reg           main_litedramcore_sdram_cmd_payload_ras = 1'd0;
reg           main_litedramcore_sdram_cmd_payload_we = 1'd0;
reg           main_litedramcore_sdram_cmd_ready = 1'd0;
reg           main_litedramcore_sdram_cmd_valid = 1'd0;
reg           main_litedramcore_sdram_csr_dfi_p0_act_n = 1'd1;
wire   [14:0] main_litedramcore_sdram_csr_dfi_p0_address;
wire    [2:0] main_litedramcore_sdram_csr_dfi_p0_bank;
reg           main_litedramcore_sdram_csr_dfi_p0_cas_n = 1'd1;
wire          main_litedramcore_sdram_csr_dfi_p0_cke;
reg           main_litedramcore_sdram_csr_dfi_p0_cs_n = 1'd1;
wire          main_litedramcore_sdram_csr_dfi_p0_odt;
reg           main_litedramcore_sdram_csr_dfi_p0_ras_n = 1'd1;
reg    [31:0] main_litedramcore_sdram_csr_dfi_p0_rddata = 32'd0;
wire          main_litedramcore_sdram_csr_dfi_p0_rddata_en;
reg           main_litedramcore_sdram_csr_dfi_p0_rddata_valid = 1'd0;
wire          main_litedramcore_sdram_csr_dfi_p0_reset_n;
reg           main_litedramcore_sdram_csr_dfi_p0_we_n = 1'd1;
wire   [31:0] main_litedramcore_sdram_csr_dfi_p0_wrdata;
wire          main_litedramcore_sdram_csr_dfi_p0_wrdata_en;
wire    [3:0] main_litedramcore_sdram_csr_dfi_p0_wrdata_mask;
reg           main_litedramcore_sdram_csr_dfi_p1_act_n = 1'd1;
wire   [14:0] main_litedramcore_sdram_csr_dfi_p1_address;
wire    [2:0] main_litedramcore_sdram_csr_dfi_p1_bank;
reg           main_litedramcore_sdram_csr_dfi_p1_cas_n = 1'd1;
wire          main_litedramcore_sdram_csr_dfi_p1_cke;
reg           main_litedramcore_sdram_csr_dfi_p1_cs_n = 1'd1;
wire          main_litedramcore_sdram_csr_dfi_p1_odt;
reg           main_litedramcore_sdram_csr_dfi_p1_ras_n = 1'd1;
reg    [31:0] main_litedramcore_sdram_csr_dfi_p1_rddata = 32'd0;
wire          main_litedramcore_sdram_csr_dfi_p1_rddata_en;
reg           main_litedramcore_sdram_csr_dfi_p1_rddata_valid = 1'd0;
wire          main_litedramcore_sdram_csr_dfi_p1_reset_n;
reg           main_litedramcore_sdram_csr_dfi_p1_we_n = 1'd1;
wire   [31:0] main_litedramcore_sdram_csr_dfi_p1_wrdata;
wire          main_litedramcore_sdram_csr_dfi_p1_wrdata_en;
wire    [3:0] main_litedramcore_sdram_csr_dfi_p1_wrdata_mask;
reg           main_litedramcore_sdram_csr_dfi_p2_act_n = 1'd1;
wire   [14:0] main_litedramcore_sdram_csr_dfi_p2_address;
wire    [2:0] main_litedramcore_sdram_csr_dfi_p2_bank;
reg           main_litedramcore_sdram_csr_dfi_p2_cas_n = 1'd1;
wire          main_litedramcore_sdram_csr_dfi_p2_cke;
reg           main_litedramcore_sdram_csr_dfi_p2_cs_n = 1'd1;
wire          main_litedramcore_sdram_csr_dfi_p2_odt;
reg           main_litedramcore_sdram_csr_dfi_p2_ras_n = 1'd1;
reg    [31:0] main_litedramcore_sdram_csr_dfi_p2_rddata = 32'd0;
wire          main_litedramcore_sdram_csr_dfi_p2_rddata_en;
reg           main_litedramcore_sdram_csr_dfi_p2_rddata_valid = 1'd0;
wire          main_litedramcore_sdram_csr_dfi_p2_reset_n;
reg           main_litedramcore_sdram_csr_dfi_p2_we_n = 1'd1;
wire   [31:0] main_litedramcore_sdram_csr_dfi_p2_wrdata;
wire          main_litedramcore_sdram_csr_dfi_p2_wrdata_en;
wire    [3:0] main_litedramcore_sdram_csr_dfi_p2_wrdata_mask;
reg           main_litedramcore_sdram_csr_dfi_p3_act_n = 1'd1;
wire   [14:0] main_litedramcore_sdram_csr_dfi_p3_address;
wire    [2:0] main_litedramcore_sdram_csr_dfi_p3_bank;
reg           main_litedramcore_sdram_csr_dfi_p3_cas_n = 1'd1;
wire          main_litedramcore_sdram_csr_dfi_p3_cke;
reg           main_litedramcore_sdram_csr_dfi_p3_cs_n = 1'd1;
wire          main_litedramcore_sdram_csr_dfi_p3_odt;
reg           main_litedramcore_sdram_csr_dfi_p3_ras_n = 1'd1;
reg    [31:0] main_litedramcore_sdram_csr_dfi_p3_rddata = 32'd0;
wire          main_litedramcore_sdram_csr_dfi_p3_rddata_en;
reg           main_litedramcore_sdram_csr_dfi_p3_rddata_valid = 1'd0;
wire          main_litedramcore_sdram_csr_dfi_p3_reset_n;
reg           main_litedramcore_sdram_csr_dfi_p3_we_n = 1'd1;
wire   [31:0] main_litedramcore_sdram_csr_dfi_p3_wrdata;
wire          main_litedramcore_sdram_csr_dfi_p3_wrdata_en;
wire    [3:0] main_litedramcore_sdram_csr_dfi_p3_wrdata_mask;
reg           main_litedramcore_sdram_dfi_p0_act_n = 1'd1;
reg    [14:0] main_litedramcore_sdram_dfi_p0_address = 15'd0;
reg     [2:0] main_litedramcore_sdram_dfi_p0_bank = 3'd0;
reg           main_litedramcore_sdram_dfi_p0_cas_n = 1'd1;
wire          main_litedramcore_sdram_dfi_p0_cke;
reg           main_litedramcore_sdram_dfi_p0_cs_n = 1'd1;
wire          main_litedramcore_sdram_dfi_p0_odt;
reg           main_litedramcore_sdram_dfi_p0_ras_n = 1'd1;
wire   [31:0] main_litedramcore_sdram_dfi_p0_rddata;
reg           main_litedramcore_sdram_dfi_p0_rddata_en = 1'd0;
wire          main_litedramcore_sdram_dfi_p0_rddata_valid;
wire          main_litedramcore_sdram_dfi_p0_reset_n;
reg           main_litedramcore_sdram_dfi_p0_we_n = 1'd1;
wire   [31:0] main_litedramcore_sdram_dfi_p0_wrdata;
reg           main_litedramcore_sdram_dfi_p0_wrdata_en = 1'd0;
wire    [3:0] main_litedramcore_sdram_dfi_p0_wrdata_mask;
reg           main_litedramcore_sdram_dfi_p1_act_n = 1'd1;
reg    [14:0] main_litedramcore_sdram_dfi_p1_address = 15'd0;
reg     [2:0] main_litedramcore_sdram_dfi_p1_bank = 3'd0;
reg           main_litedramcore_sdram_dfi_p1_cas_n = 1'd1;
wire          main_litedramcore_sdram_dfi_p1_cke;
reg           main_litedramcore_sdram_dfi_p1_cs_n = 1'd1;
wire          main_litedramcore_sdram_dfi_p1_odt;
reg           main_litedramcore_sdram_dfi_p1_ras_n = 1'd1;
wire   [31:0] main_litedramcore_sdram_dfi_p1_rddata;
reg           main_litedramcore_sdram_dfi_p1_rddata_en = 1'd0;
wire          main_litedramcore_sdram_dfi_p1_rddata_valid;
wire          main_litedramcore_sdram_dfi_p1_reset_n;
reg           main_litedramcore_sdram_dfi_p1_we_n = 1'd1;
wire   [31:0] main_litedramcore_sdram_dfi_p1_wrdata;
reg           main_litedramcore_sdram_dfi_p1_wrdata_en = 1'd0;
wire    [3:0] main_litedramcore_sdram_dfi_p1_wrdata_mask;
reg           main_litedramcore_sdram_dfi_p2_act_n = 1'd1;
reg    [14:0] main_litedramcore_sdram_dfi_p2_address = 15'd0;
reg     [2:0] main_litedramcore_sdram_dfi_p2_bank = 3'd0;
reg           main_litedramcore_sdram_dfi_p2_cas_n = 1'd1;
wire          main_litedramcore_sdram_dfi_p2_cke;
reg           main_litedramcore_sdram_dfi_p2_cs_n = 1'd1;
wire          main_litedramcore_sdram_dfi_p2_odt;
reg           main_litedramcore_sdram_dfi_p2_ras_n = 1'd1;
wire   [31:0] main_litedramcore_sdram_dfi_p2_rddata;
reg           main_litedramcore_sdram_dfi_p2_rddata_en = 1'd0;
wire          main_litedramcore_sdram_dfi_p2_rddata_valid;
wire          main_litedramcore_sdram_dfi_p2_reset_n;
reg           main_litedramcore_sdram_dfi_p2_we_n = 1'd1;
wire   [31:0] main_litedramcore_sdram_dfi_p2_wrdata;
reg           main_litedramcore_sdram_dfi_p2_wrdata_en = 1'd0;
wire    [3:0] main_litedramcore_sdram_dfi_p2_wrdata_mask;
reg           main_litedramcore_sdram_dfi_p3_act_n = 1'd1;
reg    [14:0] main_litedramcore_sdram_dfi_p3_address = 15'd0;
reg     [2:0] main_litedramcore_sdram_dfi_p3_bank = 3'd0;
reg           main_litedramcore_sdram_dfi_p3_cas_n = 1'd1;
wire          main_litedramcore_sdram_dfi_p3_cke;
reg           main_litedramcore_sdram_dfi_p3_cs_n = 1'd1;
wire          main_litedramcore_sdram_dfi_p3_odt;
reg           main_litedramcore_sdram_dfi_p3_ras_n = 1'd1;
wire   [31:0] main_litedramcore_sdram_dfi_p3_rddata;
reg           main_litedramcore_sdram_dfi_p3_rddata_en = 1'd0;
wire          main_litedramcore_sdram_dfi_p3_rddata_valid;
wire          main_litedramcore_sdram_dfi_p3_reset_n;
reg           main_litedramcore_sdram_dfi_p3_we_n = 1'd1;
wire   [31:0] main_litedramcore_sdram_dfi_p3_wrdata;
reg           main_litedramcore_sdram_dfi_p3_wrdata_en = 1'd0;
wire    [3:0] main_litedramcore_sdram_dfi_p3_wrdata_mask;
reg           main_litedramcore_sdram_en0 = 1'd0;
reg           main_litedramcore_sdram_en1 = 1'd0;
reg           main_litedramcore_sdram_ext_dfi_p0_act_n = 1'd1;
reg    [14:0] main_litedramcore_sdram_ext_dfi_p0_address = 15'd0;
reg     [2:0] main_litedramcore_sdram_ext_dfi_p0_bank = 3'd0;
reg           main_litedramcore_sdram_ext_dfi_p0_cas_n = 1'd1;
reg           main_litedramcore_sdram_ext_dfi_p0_cke = 1'd0;
reg           main_litedramcore_sdram_ext_dfi_p0_cs_n = 1'd1;
reg           main_litedramcore_sdram_ext_dfi_p0_odt = 1'd0;
reg           main_litedramcore_sdram_ext_dfi_p0_ras_n = 1'd1;
reg    [31:0] main_litedramcore_sdram_ext_dfi_p0_rddata = 32'd0;
reg           main_litedramcore_sdram_ext_dfi_p0_rddata_en = 1'd0;
reg           main_litedramcore_sdram_ext_dfi_p0_rddata_valid = 1'd0;
reg           main_litedramcore_sdram_ext_dfi_p0_reset_n = 1'd0;
reg           main_litedramcore_sdram_ext_dfi_p0_we_n = 1'd1;
reg    [31:0] main_litedramcore_sdram_ext_dfi_p0_wrdata = 32'd0;
reg           main_litedramcore_sdram_ext_dfi_p0_wrdata_en = 1'd0;
reg     [3:0] main_litedramcore_sdram_ext_dfi_p0_wrdata_mask = 4'd0;
reg           main_litedramcore_sdram_ext_dfi_p1_act_n = 1'd1;
reg    [14:0] main_litedramcore_sdram_ext_dfi_p1_address = 15'd0;
reg     [2:0] main_litedramcore_sdram_ext_dfi_p1_bank = 3'd0;
reg           main_litedramcore_sdram_ext_dfi_p1_cas_n = 1'd1;
reg           main_litedramcore_sdram_ext_dfi_p1_cke = 1'd0;
reg           main_litedramcore_sdram_ext_dfi_p1_cs_n = 1'd1;
reg           main_litedramcore_sdram_ext_dfi_p1_odt = 1'd0;
reg           main_litedramcore_sdram_ext_dfi_p1_ras_n = 1'd1;
reg    [31:0] main_litedramcore_sdram_ext_dfi_p1_rddata = 32'd0;
reg           main_litedramcore_sdram_ext_dfi_p1_rddata_en = 1'd0;
reg           main_litedramcore_sdram_ext_dfi_p1_rddata_valid = 1'd0;
reg           main_litedramcore_sdram_ext_dfi_p1_reset_n = 1'd0;
reg           main_litedramcore_sdram_ext_dfi_p1_we_n = 1'd1;
reg    [31:0] main_litedramcore_sdram_ext_dfi_p1_wrdata = 32'd0;
reg           main_litedramcore_sdram_ext_dfi_p1_wrdata_en = 1'd0;
reg     [3:0] main_litedramcore_sdram_ext_dfi_p1_wrdata_mask = 4'd0;
reg           main_litedramcore_sdram_ext_dfi_p2_act_n = 1'd1;
reg    [14:0] main_litedramcore_sdram_ext_dfi_p2_address = 15'd0;
reg     [2:0] main_litedramcore_sdram_ext_dfi_p2_bank = 3'd0;
reg           main_litedramcore_sdram_ext_dfi_p2_cas_n = 1'd1;
reg           main_litedramcore_sdram_ext_dfi_p2_cke = 1'd0;
reg           main_litedramcore_sdram_ext_dfi_p2_cs_n = 1'd1;
reg           main_litedramcore_sdram_ext_dfi_p2_odt = 1'd0;
reg           main_litedramcore_sdram_ext_dfi_p2_ras_n = 1'd1;
reg    [31:0] main_litedramcore_sdram_ext_dfi_p2_rddata = 32'd0;
reg           main_litedramcore_sdram_ext_dfi_p2_rddata_en = 1'd0;
reg           main_litedramcore_sdram_ext_dfi_p2_rddata_valid = 1'd0;
reg           main_litedramcore_sdram_ext_dfi_p2_reset_n = 1'd0;
reg           main_litedramcore_sdram_ext_dfi_p2_we_n = 1'd1;
reg    [31:0] main_litedramcore_sdram_ext_dfi_p2_wrdata = 32'd0;
reg           main_litedramcore_sdram_ext_dfi_p2_wrdata_en = 1'd0;
reg     [3:0] main_litedramcore_sdram_ext_dfi_p2_wrdata_mask = 4'd0;
reg           main_litedramcore_sdram_ext_dfi_p3_act_n = 1'd1;
reg    [14:0] main_litedramcore_sdram_ext_dfi_p3_address = 15'd0;
reg     [2:0] main_litedramcore_sdram_ext_dfi_p3_bank = 3'd0;
reg           main_litedramcore_sdram_ext_dfi_p3_cas_n = 1'd1;
reg           main_litedramcore_sdram_ext_dfi_p3_cke = 1'd0;
reg           main_litedramcore_sdram_ext_dfi_p3_cs_n = 1'd1;
reg           main_litedramcore_sdram_ext_dfi_p3_odt = 1'd0;
reg           main_litedramcore_sdram_ext_dfi_p3_ras_n = 1'd1;
reg    [31:0] main_litedramcore_sdram_ext_dfi_p3_rddata = 32'd0;
reg           main_litedramcore_sdram_ext_dfi_p3_rddata_en = 1'd0;
reg           main_litedramcore_sdram_ext_dfi_p3_rddata_valid = 1'd0;
reg           main_litedramcore_sdram_ext_dfi_p3_reset_n = 1'd0;
reg           main_litedramcore_sdram_ext_dfi_p3_we_n = 1'd1;
reg    [31:0] main_litedramcore_sdram_ext_dfi_p3_wrdata = 32'd0;
reg           main_litedramcore_sdram_ext_dfi_p3_wrdata_en = 1'd0;
reg     [3:0] main_litedramcore_sdram_ext_dfi_p3_wrdata_mask = 4'd0;
reg           main_litedramcore_sdram_ext_dfi_sel = 1'd0;
wire          main_litedramcore_sdram_go_to_refresh;
wire   [21:0] main_litedramcore_sdram_interface_bank0_addr;
wire          main_litedramcore_sdram_interface_bank0_lock;
wire          main_litedramcore_sdram_interface_bank0_rdata_valid;
wire          main_litedramcore_sdram_interface_bank0_ready;
wire          main_litedramcore_sdram_interface_bank0_valid;
wire          main_litedramcore_sdram_interface_bank0_wdata_ready;
wire          main_litedramcore_sdram_interface_bank0_we;
wire   [21:0] main_litedramcore_sdram_interface_bank1_addr;
wire          main_litedramcore_sdram_interface_bank1_lock;
wire          main_litedramcore_sdram_interface_bank1_rdata_valid;
wire          main_litedramcore_sdram_interface_bank1_ready;
wire          main_litedramcore_sdram_interface_bank1_valid;
wire          main_litedramcore_sdram_interface_bank1_wdata_ready;
wire          main_litedramcore_sdram_interface_bank1_we;
wire   [21:0] main_litedramcore_sdram_interface_bank2_addr;
wire          main_litedramcore_sdram_interface_bank2_lock;
wire          main_litedramcore_sdram_interface_bank2_rdata_valid;
wire          main_litedramcore_sdram_interface_bank2_ready;
wire          main_litedramcore_sdram_interface_bank2_valid;
wire          main_litedramcore_sdram_interface_bank2_wdata_ready;
wire          main_litedramcore_sdram_interface_bank2_we;
wire   [21:0] main_litedramcore_sdram_interface_bank3_addr;
wire          main_litedramcore_sdram_interface_bank3_lock;
wire          main_litedramcore_sdram_interface_bank3_rdata_valid;
wire          main_litedramcore_sdram_interface_bank3_ready;
wire          main_litedramcore_sdram_interface_bank3_valid;
wire          main_litedramcore_sdram_interface_bank3_wdata_ready;
wire          main_litedramcore_sdram_interface_bank3_we;
wire   [21:0] main_litedramcore_sdram_interface_bank4_addr;
wire          main_litedramcore_sdram_interface_bank4_lock;
wire          main_litedramcore_sdram_interface_bank4_rdata_valid;
wire          main_litedramcore_sdram_interface_bank4_ready;
wire          main_litedramcore_sdram_interface_bank4_valid;
wire          main_litedramcore_sdram_interface_bank4_wdata_ready;
wire          main_litedramcore_sdram_interface_bank4_we;
wire   [21:0] main_litedramcore_sdram_interface_bank5_addr;
wire          main_litedramcore_sdram_interface_bank5_lock;
wire          main_litedramcore_sdram_interface_bank5_rdata_valid;
wire          main_litedramcore_sdram_interface_bank5_ready;
wire          main_litedramcore_sdram_interface_bank5_valid;
wire          main_litedramcore_sdram_interface_bank5_wdata_ready;
wire          main_litedramcore_sdram_interface_bank5_we;
wire   [21:0] main_litedramcore_sdram_interface_bank6_addr;
wire          main_litedramcore_sdram_interface_bank6_lock;
wire          main_litedramcore_sdram_interface_bank6_rdata_valid;
wire          main_litedramcore_sdram_interface_bank6_ready;
wire          main_litedramcore_sdram_interface_bank6_valid;
wire          main_litedramcore_sdram_interface_bank6_wdata_ready;
wire          main_litedramcore_sdram_interface_bank6_we;
wire   [21:0] main_litedramcore_sdram_interface_bank7_addr;
wire          main_litedramcore_sdram_interface_bank7_lock;
wire          main_litedramcore_sdram_interface_bank7_rdata_valid;
wire          main_litedramcore_sdram_interface_bank7_ready;
wire          main_litedramcore_sdram_interface_bank7_valid;
wire          main_litedramcore_sdram_interface_bank7_wdata_ready;
wire          main_litedramcore_sdram_interface_bank7_we;
wire  [127:0] main_litedramcore_sdram_interface_rdata;
reg   [127:0] main_litedramcore_sdram_interface_wdata = 128'd0;
reg    [15:0] main_litedramcore_sdram_interface_wdata_we = 16'd0;
reg           main_litedramcore_sdram_master_p0_act_n = 1'd1;
reg    [14:0] main_litedramcore_sdram_master_p0_address = 15'd0;
reg     [2:0] main_litedramcore_sdram_master_p0_bank = 3'd0;
reg           main_litedramcore_sdram_master_p0_cas_n = 1'd1;
reg           main_litedramcore_sdram_master_p0_cke = 1'd0;
reg           main_litedramcore_sdram_master_p0_cs_n = 1'd1;
reg           main_litedramcore_sdram_master_p0_odt = 1'd0;
reg           main_litedramcore_sdram_master_p0_ras_n = 1'd1;
wire   [31:0] main_litedramcore_sdram_master_p0_rddata;
reg           main_litedramcore_sdram_master_p0_rddata_en = 1'd0;
wire          main_litedramcore_sdram_master_p0_rddata_valid;
reg           main_litedramcore_sdram_master_p0_reset_n = 1'd0;
reg           main_litedramcore_sdram_master_p0_we_n = 1'd1;
reg    [31:0] main_litedramcore_sdram_master_p0_wrdata = 32'd0;
reg           main_litedramcore_sdram_master_p0_wrdata_en = 1'd0;
reg     [3:0] main_litedramcore_sdram_master_p0_wrdata_mask = 4'd0;
reg           main_litedramcore_sdram_master_p1_act_n = 1'd1;
reg    [14:0] main_litedramcore_sdram_master_p1_address = 15'd0;
reg     [2:0] main_litedramcore_sdram_master_p1_bank = 3'd0;
reg           main_litedramcore_sdram_master_p1_cas_n = 1'd1;
reg           main_litedramcore_sdram_master_p1_cke = 1'd0;
reg           main_litedramcore_sdram_master_p1_cs_n = 1'd1;
reg           main_litedramcore_sdram_master_p1_odt = 1'd0;
reg           main_litedramcore_sdram_master_p1_ras_n = 1'd1;
wire   [31:0] main_litedramcore_sdram_master_p1_rddata;
reg           main_litedramcore_sdram_master_p1_rddata_en = 1'd0;
wire          main_litedramcore_sdram_master_p1_rddata_valid;
reg           main_litedramcore_sdram_master_p1_reset_n = 1'd0;
reg           main_litedramcore_sdram_master_p1_we_n = 1'd1;
reg    [31:0] main_litedramcore_sdram_master_p1_wrdata = 32'd0;
reg           main_litedramcore_sdram_master_p1_wrdata_en = 1'd0;
reg     [3:0] main_litedramcore_sdram_master_p1_wrdata_mask = 4'd0;
reg           main_litedramcore_sdram_master_p2_act_n = 1'd1;
reg    [14:0] main_litedramcore_sdram_master_p2_address = 15'd0;
reg     [2:0] main_litedramcore_sdram_master_p2_bank = 3'd0;
reg           main_litedramcore_sdram_master_p2_cas_n = 1'd1;
reg           main_litedramcore_sdram_master_p2_cke = 1'd0;
reg           main_litedramcore_sdram_master_p2_cs_n = 1'd1;
reg           main_litedramcore_sdram_master_p2_odt = 1'd0;
reg           main_litedramcore_sdram_master_p2_ras_n = 1'd1;
wire   [31:0] main_litedramcore_sdram_master_p2_rddata;
reg           main_litedramcore_sdram_master_p2_rddata_en = 1'd0;
wire          main_litedramcore_sdram_master_p2_rddata_valid;
reg           main_litedramcore_sdram_master_p2_reset_n = 1'd0;
reg           main_litedramcore_sdram_master_p2_we_n = 1'd1;
reg    [31:0] main_litedramcore_sdram_master_p2_wrdata = 32'd0;
reg           main_litedramcore_sdram_master_p2_wrdata_en = 1'd0;
reg     [3:0] main_litedramcore_sdram_master_p2_wrdata_mask = 4'd0;
reg           main_litedramcore_sdram_master_p3_act_n = 1'd1;
reg    [14:0] main_litedramcore_sdram_master_p3_address = 15'd0;
reg     [2:0] main_litedramcore_sdram_master_p3_bank = 3'd0;
reg           main_litedramcore_sdram_master_p3_cas_n = 1'd1;
reg           main_litedramcore_sdram_master_p3_cke = 1'd0;
reg           main_litedramcore_sdram_master_p3_cs_n = 1'd1;
reg           main_litedramcore_sdram_master_p3_odt = 1'd0;
reg           main_litedramcore_sdram_master_p3_ras_n = 1'd1;
wire   [31:0] main_litedramcore_sdram_master_p3_rddata;
reg           main_litedramcore_sdram_master_p3_rddata_en = 1'd0;
wire          main_litedramcore_sdram_master_p3_rddata_valid;
reg           main_litedramcore_sdram_master_p3_reset_n = 1'd0;
reg           main_litedramcore_sdram_master_p3_we_n = 1'd1;
reg    [31:0] main_litedramcore_sdram_master_p3_wrdata = 32'd0;
reg           main_litedramcore_sdram_master_p3_wrdata_en = 1'd0;
reg     [3:0] main_litedramcore_sdram_master_p3_wrdata_mask = 4'd0;
wire          main_litedramcore_sdram_max_time0;
wire          main_litedramcore_sdram_max_time1;
reg    [14:0] main_litedramcore_sdram_nop_a = 15'd0;
reg     [2:0] main_litedramcore_sdram_nop_ba = 3'd0;
wire          main_litedramcore_sdram_odt;
reg           main_litedramcore_sdram_phaseinjector0_address_re = 1'd0;
reg    [14:0] main_litedramcore_sdram_phaseinjector0_address_storage = 15'd0;
reg           main_litedramcore_sdram_phaseinjector0_baddress_re = 1'd0;
reg     [2:0] main_litedramcore_sdram_phaseinjector0_baddress_storage = 3'd0;
wire          main_litedramcore_sdram_phaseinjector0_command_issue_r;
reg           main_litedramcore_sdram_phaseinjector0_command_issue_re = 1'd0;
reg           main_litedramcore_sdram_phaseinjector0_command_issue_w = 1'd0;
reg           main_litedramcore_sdram_phaseinjector0_command_issue_we = 1'd0;
reg           main_litedramcore_sdram_phaseinjector0_command_re = 1'd0;
reg     [7:0] main_litedramcore_sdram_phaseinjector0_command_storage = 8'd0;
wire          main_litedramcore_sdram_phaseinjector0_csrfield_cas;
wire          main_litedramcore_sdram_phaseinjector0_csrfield_cs;
wire          main_litedramcore_sdram_phaseinjector0_csrfield_cs_bottom;
wire          main_litedramcore_sdram_phaseinjector0_csrfield_cs_top;
wire          main_litedramcore_sdram_phaseinjector0_csrfield_ras;
wire          main_litedramcore_sdram_phaseinjector0_csrfield_rden;
wire          main_litedramcore_sdram_phaseinjector0_csrfield_we;
wire          main_litedramcore_sdram_phaseinjector0_csrfield_wren;
reg           main_litedramcore_sdram_phaseinjector0_rddata_re = 1'd0;
reg    [31:0] main_litedramcore_sdram_phaseinjector0_rddata_status = 32'd0;
wire          main_litedramcore_sdram_phaseinjector0_rddata_we;
reg           main_litedramcore_sdram_phaseinjector0_wrdata_re = 1'd0;
reg    [31:0] main_litedramcore_sdram_phaseinjector0_wrdata_storage = 32'd0;
reg           main_litedramcore_sdram_phaseinjector1_address_re = 1'd0;
reg    [14:0] main_litedramcore_sdram_phaseinjector1_address_storage = 15'd0;
reg           main_litedramcore_sdram_phaseinjector1_baddress_re = 1'd0;
reg     [2:0] main_litedramcore_sdram_phaseinjector1_baddress_storage = 3'd0;
wire          main_litedramcore_sdram_phaseinjector1_command_issue_r;
reg           main_litedramcore_sdram_phaseinjector1_command_issue_re = 1'd0;
reg           main_litedramcore_sdram_phaseinjector1_command_issue_w = 1'd0;
reg           main_litedramcore_sdram_phaseinjector1_command_issue_we = 1'd0;
reg           main_litedramcore_sdram_phaseinjector1_command_re = 1'd0;
reg     [7:0] main_litedramcore_sdram_phaseinjector1_command_storage = 8'd0;
wire          main_litedramcore_sdram_phaseinjector1_csrfield_cas;
wire          main_litedramcore_sdram_phaseinjector1_csrfield_cs;
wire          main_litedramcore_sdram_phaseinjector1_csrfield_cs_bottom;
wire          main_litedramcore_sdram_phaseinjector1_csrfield_cs_top;
wire          main_litedramcore_sdram_phaseinjector1_csrfield_ras;
wire          main_litedramcore_sdram_phaseinjector1_csrfield_rden;
wire          main_litedramcore_sdram_phaseinjector1_csrfield_we;
wire          main_litedramcore_sdram_phaseinjector1_csrfield_wren;
reg           main_litedramcore_sdram_phaseinjector1_rddata_re = 1'd0;
reg    [31:0] main_litedramcore_sdram_phaseinjector1_rddata_status = 32'd0;
wire          main_litedramcore_sdram_phaseinjector1_rddata_we;
reg           main_litedramcore_sdram_phaseinjector1_wrdata_re = 1'd0;
reg    [31:0] main_litedramcore_sdram_phaseinjector1_wrdata_storage = 32'd0;
reg           main_litedramcore_sdram_phaseinjector2_address_re = 1'd0;
reg    [14:0] main_litedramcore_sdram_phaseinjector2_address_storage = 15'd0;
reg           main_litedramcore_sdram_phaseinjector2_baddress_re = 1'd0;
reg     [2:0] main_litedramcore_sdram_phaseinjector2_baddress_storage = 3'd0;
wire          main_litedramcore_sdram_phaseinjector2_command_issue_r;
reg           main_litedramcore_sdram_phaseinjector2_command_issue_re = 1'd0;
reg           main_litedramcore_sdram_phaseinjector2_command_issue_w = 1'd0;
reg           main_litedramcore_sdram_phaseinjector2_command_issue_we = 1'd0;
reg           main_litedramcore_sdram_phaseinjector2_command_re = 1'd0;
reg     [7:0] main_litedramcore_sdram_phaseinjector2_command_storage = 8'd0;
wire          main_litedramcore_sdram_phaseinjector2_csrfield_cas;
wire          main_litedramcore_sdram_phaseinjector2_csrfield_cs;
wire          main_litedramcore_sdram_phaseinjector2_csrfield_cs_bottom;
wire          main_litedramcore_sdram_phaseinjector2_csrfield_cs_top;
wire          main_litedramcore_sdram_phaseinjector2_csrfield_ras;
wire          main_litedramcore_sdram_phaseinjector2_csrfield_rden;
wire          main_litedramcore_sdram_phaseinjector2_csrfield_we;
wire          main_litedramcore_sdram_phaseinjector2_csrfield_wren;
reg           main_litedramcore_sdram_phaseinjector2_rddata_re = 1'd0;
reg    [31:0] main_litedramcore_sdram_phaseinjector2_rddata_status = 32'd0;
wire          main_litedramcore_sdram_phaseinjector2_rddata_we;
reg           main_litedramcore_sdram_phaseinjector2_wrdata_re = 1'd0;
reg    [31:0] main_litedramcore_sdram_phaseinjector2_wrdata_storage = 32'd0;
reg           main_litedramcore_sdram_phaseinjector3_address_re = 1'd0;
reg    [14:0] main_litedramcore_sdram_phaseinjector3_address_storage = 15'd0;
reg           main_litedramcore_sdram_phaseinjector3_baddress_re = 1'd0;
reg     [2:0] main_litedramcore_sdram_phaseinjector3_baddress_storage = 3'd0;
wire          main_litedramcore_sdram_phaseinjector3_command_issue_r;
reg           main_litedramcore_sdram_phaseinjector3_command_issue_re = 1'd0;
reg           main_litedramcore_sdram_phaseinjector3_command_issue_w = 1'd0;
reg           main_litedramcore_sdram_phaseinjector3_command_issue_we = 1'd0;
reg           main_litedramcore_sdram_phaseinjector3_command_re = 1'd0;
reg     [7:0] main_litedramcore_sdram_phaseinjector3_command_storage = 8'd0;
wire          main_litedramcore_sdram_phaseinjector3_csrfield_cas;
wire          main_litedramcore_sdram_phaseinjector3_csrfield_cs;
wire          main_litedramcore_sdram_phaseinjector3_csrfield_cs_bottom;
wire          main_litedramcore_sdram_phaseinjector3_csrfield_cs_top;
wire          main_litedramcore_sdram_phaseinjector3_csrfield_ras;
wire          main_litedramcore_sdram_phaseinjector3_csrfield_rden;
wire          main_litedramcore_sdram_phaseinjector3_csrfield_we;
wire          main_litedramcore_sdram_phaseinjector3_csrfield_wren;
reg           main_litedramcore_sdram_phaseinjector3_rddata_re = 1'd0;
reg    [31:0] main_litedramcore_sdram_phaseinjector3_rddata_status = 32'd0;
wire          main_litedramcore_sdram_phaseinjector3_rddata_we;
reg           main_litedramcore_sdram_phaseinjector3_wrdata_re = 1'd0;
reg    [31:0] main_litedramcore_sdram_phaseinjector3_wrdata_storage = 32'd0;
reg           main_litedramcore_sdram_postponer_count = 1'd0;
wire          main_litedramcore_sdram_postponer_req_i;
reg           main_litedramcore_sdram_postponer_req_o = 1'd0;
wire          main_litedramcore_sdram_ras_allowed;
wire    [1:0] main_litedramcore_sdram_rdcmdphase;
reg           main_litedramcore_sdram_re = 1'd0;
wire          main_litedramcore_sdram_read_available;
wire          main_litedramcore_sdram_reset_n;
wire          main_litedramcore_sdram_sel;
reg           main_litedramcore_sdram_sequencer_count = 1'd0;
reg     [5:0] main_litedramcore_sdram_sequencer_counter = 6'd0;
wire          main_litedramcore_sdram_sequencer_done0;
reg           main_litedramcore_sdram_sequencer_done1 = 1'd0;
reg           main_litedramcore_sdram_sequencer_start0 = 1'd0;
wire          main_litedramcore_sdram_sequencer_start1;
wire          main_litedramcore_sdram_slave_p0_act_n;
wire   [14:0] main_litedramcore_sdram_slave_p0_address;
wire    [2:0] main_litedramcore_sdram_slave_p0_bank;
wire          main_litedramcore_sdram_slave_p0_cas_n;
wire          main_litedramcore_sdram_slave_p0_cke;
wire          main_litedramcore_sdram_slave_p0_cs_n;
wire          main_litedramcore_sdram_slave_p0_odt;
wire          main_litedramcore_sdram_slave_p0_ras_n;
reg    [31:0] main_litedramcore_sdram_slave_p0_rddata = 32'd0;
wire          main_litedramcore_sdram_slave_p0_rddata_en;
reg           main_litedramcore_sdram_slave_p0_rddata_valid = 1'd0;
wire          main_litedramcore_sdram_slave_p0_reset_n;
wire          main_litedramcore_sdram_slave_p0_we_n;
wire   [31:0] main_litedramcore_sdram_slave_p0_wrdata;
wire          main_litedramcore_sdram_slave_p0_wrdata_en;
wire    [3:0] main_litedramcore_sdram_slave_p0_wrdata_mask;
wire          main_litedramcore_sdram_slave_p1_act_n;
wire   [14:0] main_litedramcore_sdram_slave_p1_address;
wire    [2:0] main_litedramcore_sdram_slave_p1_bank;
wire          main_litedramcore_sdram_slave_p1_cas_n;
wire          main_litedramcore_sdram_slave_p1_cke;
wire          main_litedramcore_sdram_slave_p1_cs_n;
wire          main_litedramcore_sdram_slave_p1_odt;
wire          main_litedramcore_sdram_slave_p1_ras_n;
reg    [31:0] main_litedramcore_sdram_slave_p1_rddata = 32'd0;
wire          main_litedramcore_sdram_slave_p1_rddata_en;
reg           main_litedramcore_sdram_slave_p1_rddata_valid = 1'd0;
wire          main_litedramcore_sdram_slave_p1_reset_n;
wire          main_litedramcore_sdram_slave_p1_we_n;
wire   [31:0] main_litedramcore_sdram_slave_p1_wrdata;
wire          main_litedramcore_sdram_slave_p1_wrdata_en;
wire    [3:0] main_litedramcore_sdram_slave_p1_wrdata_mask;
wire          main_litedramcore_sdram_slave_p2_act_n;
wire   [14:0] main_litedramcore_sdram_slave_p2_address;
wire    [2:0] main_litedramcore_sdram_slave_p2_bank;
wire          main_litedramcore_sdram_slave_p2_cas_n;
wire          main_litedramcore_sdram_slave_p2_cke;
wire          main_litedramcore_sdram_slave_p2_cs_n;
wire          main_litedramcore_sdram_slave_p2_odt;
wire          main_litedramcore_sdram_slave_p2_ras_n;
reg    [31:0] main_litedramcore_sdram_slave_p2_rddata = 32'd0;
wire          main_litedramcore_sdram_slave_p2_rddata_en;
reg           main_litedramcore_sdram_slave_p2_rddata_valid = 1'd0;
wire          main_litedramcore_sdram_slave_p2_reset_n;
wire          main_litedramcore_sdram_slave_p2_we_n;
wire   [31:0] main_litedramcore_sdram_slave_p2_wrdata;
wire          main_litedramcore_sdram_slave_p2_wrdata_en;
wire    [3:0] main_litedramcore_sdram_slave_p2_wrdata_mask;
wire          main_litedramcore_sdram_slave_p3_act_n;
wire   [14:0] main_litedramcore_sdram_slave_p3_address;
wire    [2:0] main_litedramcore_sdram_slave_p3_bank;
wire          main_litedramcore_sdram_slave_p3_cas_n;
wire          main_litedramcore_sdram_slave_p3_cke;
wire          main_litedramcore_sdram_slave_p3_cs_n;
wire          main_litedramcore_sdram_slave_p3_odt;
wire          main_litedramcore_sdram_slave_p3_ras_n;
reg    [31:0] main_litedramcore_sdram_slave_p3_rddata = 32'd0;
wire          main_litedramcore_sdram_slave_p3_rddata_en;
reg           main_litedramcore_sdram_slave_p3_rddata_valid = 1'd0;
wire          main_litedramcore_sdram_slave_p3_reset_n;
wire          main_litedramcore_sdram_slave_p3_we_n;
wire   [31:0] main_litedramcore_sdram_slave_p3_wrdata;
wire          main_litedramcore_sdram_slave_p3_wrdata_en;
wire    [3:0] main_litedramcore_sdram_slave_p3_wrdata_mask;
reg           main_litedramcore_sdram_steerer0 = 1'd1;
reg           main_litedramcore_sdram_steerer1 = 1'd1;
reg           main_litedramcore_sdram_steerer2 = 1'd1;
reg           main_litedramcore_sdram_steerer3 = 1'd1;
reg           main_litedramcore_sdram_steerer4 = 1'd1;
reg           main_litedramcore_sdram_steerer5 = 1'd1;
reg           main_litedramcore_sdram_steerer6 = 1'd1;
reg           main_litedramcore_sdram_steerer7 = 1'd1;
reg     [1:0] main_litedramcore_sdram_steerer_sel0 = 2'd0;
reg     [1:0] main_litedramcore_sdram_steerer_sel1 = 2'd0;
reg     [1:0] main_litedramcore_sdram_steerer_sel2 = 2'd0;
reg     [1:0] main_litedramcore_sdram_steerer_sel3 = 2'd0;
reg     [3:0] main_litedramcore_sdram_storage = 4'd1;
reg           main_litedramcore_sdram_tccdcon_count = 1'd0;
(* dont_touch = "true" *)
reg           main_litedramcore_sdram_tccdcon_ready = 1'd0;
wire          main_litedramcore_sdram_tccdcon_valid;
wire    [2:0] main_litedramcore_sdram_tfawcon_count;
(* dont_touch = "true" *)
reg           main_litedramcore_sdram_tfawcon_ready = 1'd1;
wire          main_litedramcore_sdram_tfawcon_valid;
reg     [4:0] main_litedramcore_sdram_tfawcon_window = 5'd0;
reg     [4:0] main_litedramcore_sdram_time0 = 5'd0;
reg     [3:0] main_litedramcore_sdram_time1 = 4'd0;
wire    [9:0] main_litedramcore_sdram_timer_count0;
reg     [9:0] main_litedramcore_sdram_timer_count1 = 10'd781;
wire          main_litedramcore_sdram_timer_done0;
wire          main_litedramcore_sdram_timer_done1;
wire          main_litedramcore_sdram_timer_wait;
reg           main_litedramcore_sdram_trrdcon_count = 1'd0;
(* dont_touch = "true" *)
reg           main_litedramcore_sdram_trrdcon_ready = 1'd0;
wire          main_litedramcore_sdram_trrdcon_valid;
reg     [2:0] main_litedramcore_sdram_twtrcon_count = 3'd0;
(* dont_touch = "true" *)
reg           main_litedramcore_sdram_twtrcon_ready = 1'd0;
wire          main_litedramcore_sdram_twtrcon_valid;
wire          main_litedramcore_sdram_wants_refresh;
wire          main_litedramcore_sdram_wants_zqcs;
wire    [1:0] main_litedramcore_sdram_wrcmdphase;
wire          main_litedramcore_sdram_write_available;
reg     [4:0] main_litedramcore_sdram_zqcs_executer_counter = 5'd0;
reg           main_litedramcore_sdram_zqcs_executer_done = 1'd0;
reg           main_litedramcore_sdram_zqcs_executer_start = 1'd0;
wire   [26:0] main_litedramcore_sdram_zqcs_timer_count0;
reg    [26:0] main_litedramcore_sdram_zqcs_timer_count1 = 27'd99999999;
wire          main_litedramcore_sdram_zqcs_timer_done0;
wire          main_litedramcore_sdram_zqcs_timer_done1;
wire          main_litedramcore_sdram_zqcs_timer_wait;
wire    [1:0] main_litedramcore_serv0;
wire    [1:0] main_litedramcore_serv1;
wire          main_litedramcore_serv_dbus_ack;
wire   [29:0] main_litedramcore_serv_dbus_adr;
reg     [1:0] main_litedramcore_serv_dbus_bte = 2'd0;
reg     [2:0] main_litedramcore_serv_dbus_cti = 3'd0;
wire          main_litedramcore_serv_dbus_cyc;
wire   [31:0] main_litedramcore_serv_dbus_dat_r;
wire   [31:0] main_litedramcore_serv_dbus_dat_w;
wire          main_litedramcore_serv_dbus_err;
wire    [3:0] main_litedramcore_serv_dbus_sel;
wire          main_litedramcore_serv_dbus_stb;
wire          main_litedramcore_serv_dbus_we;
wire          main_litedramcore_serv_ibus_ack;
wire   [29:0] main_litedramcore_serv_ibus_adr;
reg     [1:0] main_litedramcore_serv_ibus_bte = 2'd0;
reg     [2:0] main_litedramcore_serv_ibus_cti = 3'd0;
wire          main_litedramcore_serv_ibus_cyc;
wire   [31:0] main_litedramcore_serv_ibus_dat_r;
reg    [31:0] main_litedramcore_serv_ibus_dat_w = 32'd0;
wire          main_litedramcore_serv_ibus_err;
wire    [3:0] main_litedramcore_serv_ibus_sel;
wire          main_litedramcore_serv_ibus_stb;
reg           main_litedramcore_serv_ibus_we = 1'd0;
wire          main_litedramcore_serv_reset;
reg           main_litedramcore_soc_rst = 1'd0;
reg           main_litedramcore_status_re = 1'd0;
wire          main_litedramcore_status_status;
wire          main_litedramcore_status_we;
reg           main_litedramcore_tag_di_dirty = 1'd0;
wire   [30:0] main_litedramcore_tag_di_tag;
wire          main_litedramcore_tag_do_dirty;
wire   [30:0] main_litedramcore_tag_do_tag;
wire          main_litedramcore_tag_port_adr;
wire   [31:0] main_litedramcore_tag_port_dat_r;
wire   [31:0] main_litedramcore_tag_port_dat_w;
reg           main_litedramcore_tag_port_we = 1'd0;
reg           main_litedramcore_update_value_re = 1'd0;
reg           main_litedramcore_update_value_storage = 1'd0;
reg    [31:0] main_litedramcore_value = 32'd0;
reg           main_litedramcore_value_re = 1'd0;
reg    [31:0] main_litedramcore_value_status = 32'd0;
wire          main_litedramcore_value_we;
reg           main_litedramcore_wb_sdram_ack = 1'd0;
wire   [29:0] main_litedramcore_wb_sdram_adr;
wire    [1:0] main_litedramcore_wb_sdram_bte;
wire    [2:0] main_litedramcore_wb_sdram_cti;
wire          main_litedramcore_wb_sdram_cyc;
reg    [31:0] main_litedramcore_wb_sdram_dat_r = 32'd0;
wire   [31:0] main_litedramcore_wb_sdram_dat_w;
reg           main_litedramcore_wb_sdram_err = 1'd0;
wire    [3:0] main_litedramcore_wb_sdram_sel;
wire          main_litedramcore_wb_sdram_stb;
wire          main_litedramcore_wb_sdram_we;
reg           main_litedramcore_word_clr = 1'd0;
reg           main_litedramcore_word_inc = 1'd0;
reg           main_litedramcore_write_from_slave = 1'd0;
wire          main_litedramcore_zero0;
wire          main_litedramcore_zero1;
wire          main_litedramcore_zero2;
reg           main_litedramcore_zero_clear = 1'd0;
reg           main_litedramcore_zero_pending = 1'd0;
wire          main_litedramcore_zero_status;
wire          main_litedramcore_zero_trigger;
reg           main_litedramcore_zero_trigger_d = 1'd0;
wire          main_locked;
reg           main_obj_uart_tx_rs232phytx_next_value1 = 1'd0;
reg           main_obj_uart_tx_rs232phytx_next_value_ce1 = 1'd0;
reg           main_power_down = 1'd0;
wire          main_r_first;
wire          main_r_last;
wire          main_r_param_dest;
wire    [5:0] main_r_param_id;
wire          main_r_param_user;
wire   [63:0] main_r_payload_data;
reg     [1:0] main_r_payload_resp = 2'd0;
wire          main_r_ready;
wire          main_r_valid;
wire          main_read_ar_first;
wire          main_read_ar_last;
wire    [5:0] main_read_ar_param_id;
wire   [28:0] main_read_ar_payload_addr;
reg           main_read_ar_ready = 1'd0;
wire          main_read_ar_valid;
reg     [7:0] main_read_beat_count = 8'd0;
reg  signed  [12:0] main_read_beat_offset = 13'd0;
wire   [11:0] main_read_beat_size;
wire   [11:0] main_read_beat_wrap;
wire          main_read_can_read;
wire          main_read_cmd_grant;
wire          main_read_cmd_request;
reg     [3:0] main_read_id_buffer_consume = 4'd0;
wire          main_read_id_buffer_do_read;
wire          main_read_id_buffer_fifo_in_first;
wire          main_read_id_buffer_fifo_in_last;
wire    [5:0] main_read_id_buffer_fifo_in_payload_id;
wire          main_read_id_buffer_fifo_out_first;
wire          main_read_id_buffer_fifo_out_last;
wire    [5:0] main_read_id_buffer_fifo_out_payload_id;
reg     [4:0] main_read_id_buffer_level = 5'd0;
reg     [3:0] main_read_id_buffer_produce = 4'd0;
wire    [3:0] main_read_id_buffer_rdport_adr;
wire    [7:0] main_read_id_buffer_rdport_dat_r;
reg           main_read_id_buffer_replace = 1'd0;
reg           main_read_id_buffer_sink_first = 1'd0;
wire          main_read_id_buffer_sink_last;
wire    [5:0] main_read_id_buffer_sink_payload_id;
wire          main_read_id_buffer_sink_ready;
wire          main_read_id_buffer_sink_valid;
wire          main_read_id_buffer_source_first;
wire          main_read_id_buffer_source_last;
wire    [5:0] main_read_id_buffer_source_payload_id;
wire          main_read_id_buffer_source_ready;
wire          main_read_id_buffer_source_valid;
wire    [7:0] main_read_id_buffer_syncfifo_din;
wire    [7:0] main_read_id_buffer_syncfifo_dout;
wire          main_read_id_buffer_syncfifo_re;
wire          main_read_id_buffer_syncfifo_readable;
wire          main_read_id_buffer_syncfifo_we;
wire          main_read_id_buffer_syncfifo_writable;
reg     [3:0] main_read_id_buffer_wrport_adr = 4'd0;
wire    [7:0] main_read_id_buffer_wrport_dat_r;
wire    [7:0] main_read_id_buffer_wrport_dat_w;
wire          main_read_id_buffer_wrport_we;
wire          main_read_pipe_valid_sink_first;
wire          main_read_pipe_valid_sink_last;
wire          main_read_pipe_valid_sink_param_dest;
wire    [5:0] main_read_pipe_valid_sink_param_id;
wire          main_read_pipe_valid_sink_param_user;
wire   [28:0] main_read_pipe_valid_sink_payload_addr;
wire    [1:0] main_read_pipe_valid_sink_payload_burst;
wire    [3:0] main_read_pipe_valid_sink_payload_cache;
wire    [7:0] main_read_pipe_valid_sink_payload_len;
wire          main_read_pipe_valid_sink_payload_lock;
wire    [2:0] main_read_pipe_valid_sink_payload_prot;
wire    [3:0] main_read_pipe_valid_sink_payload_qos;
wire    [3:0] main_read_pipe_valid_sink_payload_region;
wire    [2:0] main_read_pipe_valid_sink_payload_size;
wire          main_read_pipe_valid_sink_ready;
wire          main_read_pipe_valid_sink_valid;
reg           main_read_pipe_valid_source_first = 1'd0;
reg           main_read_pipe_valid_source_last = 1'd0;
reg           main_read_pipe_valid_source_param_dest = 1'd0;
reg     [5:0] main_read_pipe_valid_source_param_id = 6'd0;
reg           main_read_pipe_valid_source_param_user = 1'd0;
reg    [28:0] main_read_pipe_valid_source_payload_addr = 29'd0;
reg     [1:0] main_read_pipe_valid_source_payload_burst = 2'd0;
reg     [3:0] main_read_pipe_valid_source_payload_cache = 4'd0;
reg     [7:0] main_read_pipe_valid_source_payload_len = 8'd0;
reg           main_read_pipe_valid_source_payload_lock = 1'd0;
reg     [2:0] main_read_pipe_valid_source_payload_prot = 3'd0;
reg     [3:0] main_read_pipe_valid_source_payload_qos = 4'd0;
reg     [3:0] main_read_pipe_valid_source_payload_region = 4'd0;
reg     [2:0] main_read_pipe_valid_source_payload_size = 3'd0;
wire          main_read_pipe_valid_source_ready;
reg           main_read_pipe_valid_source_valid = 1'd0;
reg     [3:0] main_read_r_buffer_consume = 4'd0;
wire          main_read_r_buffer_dequeue;
wire          main_read_r_buffer_do_read;
wire          main_read_r_buffer_fifo_in_first;
wire          main_read_r_buffer_fifo_in_last;
wire          main_read_r_buffer_fifo_in_param_dest;
wire    [5:0] main_read_r_buffer_fifo_in_param_id;
wire          main_read_r_buffer_fifo_in_param_user;
wire   [63:0] main_read_r_buffer_fifo_in_payload_data;
wire    [1:0] main_read_r_buffer_fifo_in_payload_resp;
wire          main_read_r_buffer_fifo_out_first;
wire          main_read_r_buffer_fifo_out_last;
wire          main_read_r_buffer_fifo_out_param_dest;
wire    [5:0] main_read_r_buffer_fifo_out_param_id;
wire          main_read_r_buffer_fifo_out_param_user;
wire   [63:0] main_read_r_buffer_fifo_out_payload_data;
wire    [1:0] main_read_r_buffer_fifo_out_payload_resp;
reg     [4:0] main_read_r_buffer_level0 = 5'd0;
wire    [4:0] main_read_r_buffer_level1;
reg     [4:0] main_read_r_buffer_level2 = 5'd0;
reg     [3:0] main_read_r_buffer_produce = 4'd0;
wire          main_read_r_buffer_queue;
wire    [3:0] main_read_r_buffer_rdport_adr;
wire   [75:0] main_read_r_buffer_rdport_dat_r;
wire          main_read_r_buffer_rdport_re;
wire          main_read_r_buffer_re;
reg           main_read_r_buffer_readable = 1'd0;
reg           main_read_r_buffer_replace = 1'd0;
wire          main_read_r_buffer_sink_first;
wire          main_read_r_buffer_sink_last;
reg           main_read_r_buffer_sink_param_dest = 1'd0;
reg     [5:0] main_read_r_buffer_sink_param_id = 6'd0;
reg           main_read_r_buffer_sink_param_user = 1'd0;
wire   [63:0] main_read_r_buffer_sink_payload_data;
reg     [1:0] main_read_r_buffer_sink_payload_resp = 2'd0;
wire          main_read_r_buffer_sink_ready;
wire          main_read_r_buffer_sink_valid;
wire          main_read_r_buffer_source_first;
wire          main_read_r_buffer_source_last;
wire          main_read_r_buffer_source_param_dest;
wire    [5:0] main_read_r_buffer_source_param_id;
wire          main_read_r_buffer_source_param_user;
wire   [63:0] main_read_r_buffer_source_payload_data;
wire    [1:0] main_read_r_buffer_source_payload_resp;
wire          main_read_r_buffer_source_ready;
wire          main_read_r_buffer_source_valid;
wire   [75:0] main_read_r_buffer_syncfifo_din;
wire   [75:0] main_read_r_buffer_syncfifo_dout;
wire          main_read_r_buffer_syncfifo_re;
wire          main_read_r_buffer_syncfifo_readable;
wire          main_read_r_buffer_syncfifo_we;
wire          main_read_r_buffer_syncfifo_writable;
reg     [3:0] main_read_r_buffer_wrport_adr = 4'd0;
wire   [75:0] main_read_r_buffer_wrport_dat_r;
wire   [75:0] main_read_r_buffer_wrport_dat_w;
wire          main_read_r_buffer_wrport_we;
wire          main_read_sink_sink_first;
wire          main_read_sink_sink_last;
wire          main_read_sink_sink_param_dest;
wire    [5:0] main_read_sink_sink_param_id;
wire          main_read_sink_sink_param_user;
wire   [28:0] main_read_sink_sink_payload_addr;
wire    [1:0] main_read_sink_sink_payload_burst;
wire    [3:0] main_read_sink_sink_payload_cache;
wire    [7:0] main_read_sink_sink_payload_len;
wire          main_read_sink_sink_payload_lock;
wire    [2:0] main_read_sink_sink_payload_prot;
wire    [3:0] main_read_sink_sink_payload_qos;
wire    [3:0] main_read_sink_sink_payload_region;
wire    [2:0] main_read_sink_sink_payload_size;
wire          main_read_sink_sink_ready;
wire          main_read_sink_sink_valid;
wire          main_read_source_source_first;
wire          main_read_source_source_last;
wire          main_read_source_source_param_dest;
wire    [5:0] main_read_source_source_param_id;
wire          main_read_source_source_param_user;
wire   [28:0] main_read_source_source_payload_addr;
wire    [1:0] main_read_source_source_payload_burst;
wire    [3:0] main_read_source_source_payload_cache;
wire    [7:0] main_read_source_source_payload_len;
wire          main_read_source_source_payload_lock;
wire    [2:0] main_read_source_source_payload_prot;
wire    [3:0] main_read_source_source_payload_qos;
wire    [3:0] main_read_source_source_payload_region;
wire    [2:0] main_read_source_source_payload_size;
reg           main_read_source_source_ready = 1'd0;
wire          main_read_source_source_valid;
reg     [1:0] main_request = 2'd0;
wire          main_reset;
reg     [3:0] main_reset_counter = 4'd15;
reg           main_rst = 1'd0;
reg     [3:0] main_rx_count = 4'd0;
reg     [3:0] main_rx_count_rs232phyrx_next_value0 = 4'd0;
reg           main_rx_count_rs232phyrx_next_value_ce0 = 1'd0;
reg     [7:0] main_rx_data = 8'd0;
reg     [7:0] main_rx_data_rs232phyrx_next_value1 = 8'd0;
reg           main_rx_data_rs232phyrx_next_value_ce1 = 1'd0;
reg           main_rx_enable = 1'd0;
reg    [31:0] main_rx_phase = 32'd0;
wire          main_rx_rx;
reg           main_rx_rx_d = 1'd0;
reg           main_rx_source_first = 1'd0;
reg           main_rx_source_last = 1'd0;
reg     [7:0] main_rx_source_payload_data = 8'd0;
wire          main_rx_source_ready;
reg           main_rx_source_valid = 1'd0;
reg           main_rx_tick = 1'd0;
reg     [3:0] main_tx_count = 4'd0;
reg     [3:0] main_tx_count_rs232phytx_next_value0 = 4'd0;
reg           main_tx_count_rs232phytx_next_value_ce0 = 1'd0;
reg     [7:0] main_tx_data = 8'd0;
reg     [7:0] main_tx_data_rs232phytx_next_value2 = 8'd0;
reg           main_tx_data_rs232phytx_next_value_ce2 = 1'd0;
reg           main_tx_enable = 1'd0;
reg    [31:0] main_tx_phase = 32'd0;
wire          main_tx_sink_first;
wire          main_tx_sink_last;
wire    [7:0] main_tx_sink_payload_data;
reg           main_tx_sink_ready = 1'd0;
wire          main_tx_sink_valid;
reg           main_tx_tick = 1'd0;
reg           main_uart_enable_re = 1'd0;
reg     [1:0] main_uart_enable_storage = 2'd0;
wire          main_uart_irq;
reg     [1:0] main_uart_pending_r = 2'd0;
reg           main_uart_pending_re = 1'd0;
reg     [1:0] main_uart_pending_status = 2'd0;
wire          main_uart_pending_we;
wire          main_uart_rx0;
wire          main_uart_rx1;
wire          main_uart_rx2;
reg           main_uart_rx_clear = 1'd0;
reg     [3:0] main_uart_rx_fifo_consume = 4'd0;
wire          main_uart_rx_fifo_do_read;
wire          main_uart_rx_fifo_fifo_in_first;
wire          main_uart_rx_fifo_fifo_in_last;
wire    [7:0] main_uart_rx_fifo_fifo_in_payload_data;
wire          main_uart_rx_fifo_fifo_out_first;
wire          main_uart_rx_fifo_fifo_out_last;
wire    [7:0] main_uart_rx_fifo_fifo_out_payload_data;
reg     [4:0] main_uart_rx_fifo_level0 = 5'd0;
wire    [4:0] main_uart_rx_fifo_level1;
reg     [3:0] main_uart_rx_fifo_produce = 4'd0;
wire    [3:0] main_uart_rx_fifo_rdport_adr;
wire    [9:0] main_uart_rx_fifo_rdport_dat_r;
wire          main_uart_rx_fifo_rdport_re;
wire          main_uart_rx_fifo_re;
reg           main_uart_rx_fifo_readable = 1'd0;
reg           main_uart_rx_fifo_replace = 1'd0;
wire          main_uart_rx_fifo_sink_first;
wire          main_uart_rx_fifo_sink_last;
wire    [7:0] main_uart_rx_fifo_sink_payload_data;
wire          main_uart_rx_fifo_sink_ready;
wire          main_uart_rx_fifo_sink_valid;
wire          main_uart_rx_fifo_source_first;
wire          main_uart_rx_fifo_source_last;
wire    [7:0] main_uart_rx_fifo_source_payload_data;
wire          main_uart_rx_fifo_source_ready;
wire          main_uart_rx_fifo_source_valid;
wire    [9:0] main_uart_rx_fifo_syncfifo_din;
wire    [9:0] main_uart_rx_fifo_syncfifo_dout;
wire          main_uart_rx_fifo_syncfifo_re;
wire          main_uart_rx_fifo_syncfifo_readable;
wire          main_uart_rx_fifo_syncfifo_we;
wire          main_uart_rx_fifo_syncfifo_writable;
reg     [3:0] main_uart_rx_fifo_wrport_adr = 4'd0;
wire    [9:0] main_uart_rx_fifo_wrport_dat_r;
wire    [9:0] main_uart_rx_fifo_wrport_dat_w;
wire          main_uart_rx_fifo_wrport_we;
reg           main_uart_rx_pending = 1'd0;
wire          main_uart_rx_status;
wire          main_uart_rx_trigger;
reg           main_uart_rx_trigger_d = 1'd0;
reg           main_uart_rxempty_re = 1'd0;
wire          main_uart_rxempty_status;
wire          main_uart_rxempty_we;
reg           main_uart_rxfull_re = 1'd0;
wire          main_uart_rxfull_status;
wire          main_uart_rxfull_we;
wire    [7:0] main_uart_rxtx_r;
reg           main_uart_rxtx_re = 1'd0;
wire    [7:0] main_uart_rxtx_w;
reg           main_uart_rxtx_we = 1'd0;
reg           main_uart_status_re = 1'd0;
reg     [1:0] main_uart_status_status = 2'd0;
wire          main_uart_status_we;
wire          main_uart_tx0;
wire          main_uart_tx1;
wire          main_uart_tx2;
reg           main_uart_tx_clear = 1'd0;
reg     [3:0] main_uart_tx_fifo_consume = 4'd0;
wire          main_uart_tx_fifo_do_read;
wire          main_uart_tx_fifo_fifo_in_first;
wire          main_uart_tx_fifo_fifo_in_last;
wire    [7:0] main_uart_tx_fifo_fifo_in_payload_data;
wire          main_uart_tx_fifo_fifo_out_first;
wire          main_uart_tx_fifo_fifo_out_last;
wire    [7:0] main_uart_tx_fifo_fifo_out_payload_data;
reg     [4:0] main_uart_tx_fifo_level0 = 5'd0;
wire    [4:0] main_uart_tx_fifo_level1;
reg     [3:0] main_uart_tx_fifo_produce = 4'd0;
wire    [3:0] main_uart_tx_fifo_rdport_adr;
wire    [9:0] main_uart_tx_fifo_rdport_dat_r;
wire          main_uart_tx_fifo_rdport_re;
wire          main_uart_tx_fifo_re;
reg           main_uart_tx_fifo_readable = 1'd0;
reg           main_uart_tx_fifo_replace = 1'd0;
reg           main_uart_tx_fifo_sink_first = 1'd0;
reg           main_uart_tx_fifo_sink_last = 1'd0;
wire    [7:0] main_uart_tx_fifo_sink_payload_data;
wire          main_uart_tx_fifo_sink_ready;
wire          main_uart_tx_fifo_sink_valid;
wire          main_uart_tx_fifo_source_first;
wire          main_uart_tx_fifo_source_last;
wire    [7:0] main_uart_tx_fifo_source_payload_data;
wire          main_uart_tx_fifo_source_ready;
wire          main_uart_tx_fifo_source_valid;
wire    [9:0] main_uart_tx_fifo_syncfifo_din;
wire    [9:0] main_uart_tx_fifo_syncfifo_dout;
wire          main_uart_tx_fifo_syncfifo_re;
wire          main_uart_tx_fifo_syncfifo_readable;
wire          main_uart_tx_fifo_syncfifo_we;
wire          main_uart_tx_fifo_syncfifo_writable;
reg     [3:0] main_uart_tx_fifo_wrport_adr = 4'd0;
wire    [9:0] main_uart_tx_fifo_wrport_dat_r;
wire    [9:0] main_uart_tx_fifo_wrport_dat_w;
wire          main_uart_tx_fifo_wrport_we;
reg           main_uart_tx_pending = 1'd0;
wire          main_uart_tx_status;
wire          main_uart_tx_trigger;
reg           main_uart_tx_trigger_d = 1'd0;
reg           main_uart_txempty_re = 1'd0;
wire          main_uart_txempty_status;
wire          main_uart_txempty_we;
reg           main_uart_txfull_re = 1'd0;
wire          main_uart_txfull_status;
wire          main_uart_txfull_we;
wire          main_uart_uart_sink_first;
wire          main_uart_uart_sink_last;
wire    [7:0] main_uart_uart_sink_payload_data;
wire          main_uart_uart_sink_ready;
wire          main_uart_uart_sink_valid;
wire          main_uart_uart_source_first;
wire          main_uart_uart_source_last;
wire    [7:0] main_uart_uart_source_payload_data;
wire          main_uart_uart_source_ready;
wire          main_uart_uart_source_valid;
reg           main_user_enable = 1'd0;
wire          main_user_port_litedramnativeportconverter_addr_changed;
reg    [25:0] main_user_port_litedramnativeportconverter_cmd_addr = 26'd0;
reg    [25:0] main_user_port_litedramnativeportconverter_cmd_addr_litedramcore_next_value0 = 26'd0;
reg           main_user_port_litedramnativeportconverter_cmd_addr_litedramcore_next_value_ce0 = 1'd0;
reg           main_user_port_litedramnativeportconverter_cmd_buffer_sink_first = 1'd0;
reg           main_user_port_litedramnativeportconverter_cmd_buffer_sink_last = 1'd0;
reg     [1:0] main_user_port_litedramnativeportconverter_cmd_buffer_sink_payload_sel = 2'd0;
reg           main_user_port_litedramnativeportconverter_cmd_buffer_sink_payload_we = 1'd0;
wire          main_user_port_litedramnativeportconverter_cmd_buffer_sink_ready;
reg           main_user_port_litedramnativeportconverter_cmd_buffer_sink_valid = 1'd0;
wire          main_user_port_litedramnativeportconverter_cmd_buffer_source_first;
wire          main_user_port_litedramnativeportconverter_cmd_buffer_source_last;
wire    [1:0] main_user_port_litedramnativeportconverter_cmd_buffer_source_payload_sel;
wire          main_user_port_litedramnativeportconverter_cmd_buffer_source_payload_we;
wire          main_user_port_litedramnativeportconverter_cmd_buffer_source_ready;
wire          main_user_port_litedramnativeportconverter_cmd_buffer_source_valid;
reg           main_user_port_litedramnativeportconverter_cmd_last = 1'd0;
reg           main_user_port_litedramnativeportconverter_cmd_last_litedramcore_next_value2 = 1'd0;
reg           main_user_port_litedramnativeportconverter_cmd_last_litedramcore_next_value_ce2 = 1'd0;
reg           main_user_port_litedramnativeportconverter_cmd_we = 1'd0;
reg           main_user_port_litedramnativeportconverter_cmd_we_litedramcore_next_value1 = 1'd0;
reg           main_user_port_litedramnativeportconverter_cmd_we_litedramcore_next_value_ce1 = 1'd0;
wire          main_user_port_litedramnativeportconverter_next_cmd;
reg     [1:0] main_user_port_litedramnativeportconverter_rdata_chunk = 2'd1;
wire          main_user_port_litedramnativeportconverter_rdata_chunk_valid;
wire          main_user_port_litedramnativeportconverter_rdata_converter_converter_first;
wire          main_user_port_litedramnativeportconverter_rdata_converter_converter_last;
reg           main_user_port_litedramnativeportconverter_rdata_converter_converter_mux = 1'd0;
wire          main_user_port_litedramnativeportconverter_rdata_converter_converter_sink_first;
wire          main_user_port_litedramnativeportconverter_rdata_converter_converter_sink_last;
reg   [127:0] main_user_port_litedramnativeportconverter_rdata_converter_converter_sink_payload_data = 128'd0;
wire          main_user_port_litedramnativeportconverter_rdata_converter_converter_sink_ready;
wire          main_user_port_litedramnativeportconverter_rdata_converter_converter_sink_valid;
wire          main_user_port_litedramnativeportconverter_rdata_converter_converter_source_first;
wire          main_user_port_litedramnativeportconverter_rdata_converter_converter_source_last;
reg    [63:0] main_user_port_litedramnativeportconverter_rdata_converter_converter_source_payload_data = 64'd0;
wire          main_user_port_litedramnativeportconverter_rdata_converter_converter_source_payload_valid_token_count;
wire          main_user_port_litedramnativeportconverter_rdata_converter_converter_source_ready;
wire          main_user_port_litedramnativeportconverter_rdata_converter_converter_source_valid;
wire          main_user_port_litedramnativeportconverter_rdata_converter_sink_first;
wire          main_user_port_litedramnativeportconverter_rdata_converter_sink_last;
wire  [127:0] main_user_port_litedramnativeportconverter_rdata_converter_sink_payload_data;
wire          main_user_port_litedramnativeportconverter_rdata_converter_sink_ready;
wire          main_user_port_litedramnativeportconverter_rdata_converter_sink_valid;
wire          main_user_port_litedramnativeportconverter_rdata_converter_source_first;
wire          main_user_port_litedramnativeportconverter_rdata_converter_source_last;
wire   [63:0] main_user_port_litedramnativeportconverter_rdata_converter_source_payload_data;
reg           main_user_port_litedramnativeportconverter_rdata_converter_source_ready = 1'd0;
wire          main_user_port_litedramnativeportconverter_rdata_converter_source_source_first;
wire          main_user_port_litedramnativeportconverter_rdata_converter_source_source_last;
wire   [63:0] main_user_port_litedramnativeportconverter_rdata_converter_source_source_payload_data;
wire          main_user_port_litedramnativeportconverter_rdata_converter_source_source_ready;
wire          main_user_port_litedramnativeportconverter_rdata_converter_source_source_valid;
wire          main_user_port_litedramnativeportconverter_rdata_converter_source_valid;
wire          main_user_port_litedramnativeportconverter_rdata_fifo_pipe_valid_sink_first;
wire          main_user_port_litedramnativeportconverter_rdata_fifo_pipe_valid_sink_last;
wire  [127:0] main_user_port_litedramnativeportconverter_rdata_fifo_pipe_valid_sink_payload_data;
wire          main_user_port_litedramnativeportconverter_rdata_fifo_pipe_valid_sink_ready;
wire          main_user_port_litedramnativeportconverter_rdata_fifo_pipe_valid_sink_valid;
reg           main_user_port_litedramnativeportconverter_rdata_fifo_pipe_valid_source_first = 1'd0;
reg           main_user_port_litedramnativeportconverter_rdata_fifo_pipe_valid_source_last = 1'd0;
reg   [127:0] main_user_port_litedramnativeportconverter_rdata_fifo_pipe_valid_source_payload_data = 128'd0;
wire          main_user_port_litedramnativeportconverter_rdata_fifo_pipe_valid_source_ready;
reg           main_user_port_litedramnativeportconverter_rdata_fifo_pipe_valid_source_valid = 1'd0;
wire          main_user_port_litedramnativeportconverter_rdata_fifo_sink_sink_first;
wire          main_user_port_litedramnativeportconverter_rdata_fifo_sink_sink_last;
wire  [127:0] main_user_port_litedramnativeportconverter_rdata_fifo_sink_sink_payload_data;
wire          main_user_port_litedramnativeportconverter_rdata_fifo_sink_sink_ready;
wire          main_user_port_litedramnativeportconverter_rdata_fifo_sink_sink_valid;
wire          main_user_port_litedramnativeportconverter_rdata_fifo_source_source_first;
wire          main_user_port_litedramnativeportconverter_rdata_fifo_source_source_last;
wire  [127:0] main_user_port_litedramnativeportconverter_rdata_fifo_source_source_payload_data;
wire          main_user_port_litedramnativeportconverter_rdata_fifo_source_source_ready;
wire          main_user_port_litedramnativeportconverter_rdata_fifo_source_source_valid;
reg           main_user_port_litedramnativeportconverter_rdata_finished = 1'd0;
reg           main_user_port_litedramnativeportconverter_read_lock = 1'd0;
reg           main_user_port_litedramnativeportconverter_read_unlocked = 1'd0;
wire          main_user_port_litedramnativeportconverter_rw_collision;
reg     [1:0] main_user_port_litedramnativeportconverter_sel = 2'd0;
reg     [1:0] main_user_port_litedramnativeportconverter_sel_litedramcore_next_value3 = 2'd0;
reg           main_user_port_litedramnativeportconverter_sel_litedramcore_next_value_ce3 = 1'd0;
wire          main_user_port_litedramnativeportconverter_wdata_buffer_pipe_valid_sink_first;
wire          main_user_port_litedramnativeportconverter_wdata_buffer_pipe_valid_sink_last;
wire  [127:0] main_user_port_litedramnativeportconverter_wdata_buffer_pipe_valid_sink_payload_data;
wire   [15:0] main_user_port_litedramnativeportconverter_wdata_buffer_pipe_valid_sink_payload_we;
wire          main_user_port_litedramnativeportconverter_wdata_buffer_pipe_valid_sink_ready;
wire          main_user_port_litedramnativeportconverter_wdata_buffer_pipe_valid_sink_valid;
reg           main_user_port_litedramnativeportconverter_wdata_buffer_pipe_valid_source_first = 1'd0;
reg           main_user_port_litedramnativeportconverter_wdata_buffer_pipe_valid_source_last = 1'd0;
reg   [127:0] main_user_port_litedramnativeportconverter_wdata_buffer_pipe_valid_source_payload_data = 128'd0;
reg    [15:0] main_user_port_litedramnativeportconverter_wdata_buffer_pipe_valid_source_payload_we = 16'd0;
wire          main_user_port_litedramnativeportconverter_wdata_buffer_pipe_valid_source_ready;
reg           main_user_port_litedramnativeportconverter_wdata_buffer_pipe_valid_source_valid = 1'd0;
reg           main_user_port_litedramnativeportconverter_wdata_buffer_sink_sink_first = 1'd0;
reg           main_user_port_litedramnativeportconverter_wdata_buffer_sink_sink_last = 1'd0;
wire  [127:0] main_user_port_litedramnativeportconverter_wdata_buffer_sink_sink_payload_data;
wire   [15:0] main_user_port_litedramnativeportconverter_wdata_buffer_sink_sink_payload_we;
wire          main_user_port_litedramnativeportconverter_wdata_buffer_sink_sink_ready;
wire          main_user_port_litedramnativeportconverter_wdata_buffer_sink_sink_valid;
wire          main_user_port_litedramnativeportconverter_wdata_buffer_source_source_first;
wire          main_user_port_litedramnativeportconverter_wdata_buffer_source_source_last;
wire  [127:0] main_user_port_litedramnativeportconverter_wdata_buffer_source_source_payload_data;
wire   [15:0] main_user_port_litedramnativeportconverter_wdata_buffer_source_source_payload_we;
wire          main_user_port_litedramnativeportconverter_wdata_buffer_source_source_ready;
wire          main_user_port_litedramnativeportconverter_wdata_buffer_source_source_valid;
reg     [1:0] main_user_port_litedramnativeportconverter_wdata_chunk = 2'd1;
wire          main_user_port_litedramnativeportconverter_wdata_chunk_valid;
reg           main_user_port_litedramnativeportconverter_wdata_converter_converter_demux = 1'd0;
wire          main_user_port_litedramnativeportconverter_wdata_converter_converter_load_part;
wire          main_user_port_litedramnativeportconverter_wdata_converter_converter_sink_first;
wire          main_user_port_litedramnativeportconverter_wdata_converter_converter_sink_last;
wire   [71:0] main_user_port_litedramnativeportconverter_wdata_converter_converter_sink_payload_data;
wire          main_user_port_litedramnativeportconverter_wdata_converter_converter_sink_ready;
wire          main_user_port_litedramnativeportconverter_wdata_converter_converter_sink_valid;
reg           main_user_port_litedramnativeportconverter_wdata_converter_converter_source_first = 1'd0;
reg           main_user_port_litedramnativeportconverter_wdata_converter_converter_source_last = 1'd0;
reg   [143:0] main_user_port_litedramnativeportconverter_wdata_converter_converter_source_payload_data = 144'd0;
reg     [1:0] main_user_port_litedramnativeportconverter_wdata_converter_converter_source_payload_valid_token_count = 2'd0;
wire          main_user_port_litedramnativeportconverter_wdata_converter_converter_source_ready;
wire          main_user_port_litedramnativeportconverter_wdata_converter_converter_source_valid;
reg           main_user_port_litedramnativeportconverter_wdata_converter_converter_strobe_all = 1'd0;
reg           main_user_port_litedramnativeportconverter_wdata_converter_sink_first = 1'd0;
reg           main_user_port_litedramnativeportconverter_wdata_converter_sink_last = 1'd0;
reg    [63:0] main_user_port_litedramnativeportconverter_wdata_converter_sink_payload_data = 64'd0;
reg     [7:0] main_user_port_litedramnativeportconverter_wdata_converter_sink_payload_we = 8'd0;
wire          main_user_port_litedramnativeportconverter_wdata_converter_sink_ready;
reg           main_user_port_litedramnativeportconverter_wdata_converter_sink_valid = 1'd0;
wire          main_user_port_litedramnativeportconverter_wdata_converter_source_first;
wire          main_user_port_litedramnativeportconverter_wdata_converter_source_last;
reg   [127:0] main_user_port_litedramnativeportconverter_wdata_converter_source_payload_data = 128'd0;
reg    [15:0] main_user_port_litedramnativeportconverter_wdata_converter_source_payload_we = 16'd0;
wire          main_user_port_litedramnativeportconverter_wdata_converter_source_ready;
wire          main_user_port_litedramnativeportconverter_wdata_converter_source_source_first;
wire          main_user_port_litedramnativeportconverter_wdata_converter_source_source_last;
wire  [143:0] main_user_port_litedramnativeportconverter_wdata_converter_source_source_payload_data;
wire          main_user_port_litedramnativeportconverter_wdata_converter_source_source_ready;
wire          main_user_port_litedramnativeportconverter_wdata_converter_source_source_valid;
wire          main_user_port_litedramnativeportconverter_wdata_converter_source_valid;
wire          main_user_port_litedramnativeportconverter_wdata_fifo_pipe_valid_sink_first;
wire          main_user_port_litedramnativeportconverter_wdata_fifo_pipe_valid_sink_last;
wire   [63:0] main_user_port_litedramnativeportconverter_wdata_fifo_pipe_valid_sink_payload_data;
wire    [7:0] main_user_port_litedramnativeportconverter_wdata_fifo_pipe_valid_sink_payload_we;
wire          main_user_port_litedramnativeportconverter_wdata_fifo_pipe_valid_sink_ready;
wire          main_user_port_litedramnativeportconverter_wdata_fifo_pipe_valid_sink_valid;
reg           main_user_port_litedramnativeportconverter_wdata_fifo_pipe_valid_source_first = 1'd0;
reg           main_user_port_litedramnativeportconverter_wdata_fifo_pipe_valid_source_last = 1'd0;
reg    [63:0] main_user_port_litedramnativeportconverter_wdata_fifo_pipe_valid_source_payload_data = 64'd0;
reg     [7:0] main_user_port_litedramnativeportconverter_wdata_fifo_pipe_valid_source_payload_we = 8'd0;
wire          main_user_port_litedramnativeportconverter_wdata_fifo_pipe_valid_source_ready;
reg           main_user_port_litedramnativeportconverter_wdata_fifo_pipe_valid_source_valid = 1'd0;
wire          main_user_port_litedramnativeportconverter_wdata_fifo_sink_sink_first;
wire          main_user_port_litedramnativeportconverter_wdata_fifo_sink_sink_last;
wire   [63:0] main_user_port_litedramnativeportconverter_wdata_fifo_sink_sink_payload_data;
wire    [7:0] main_user_port_litedramnativeportconverter_wdata_fifo_sink_sink_payload_we;
wire          main_user_port_litedramnativeportconverter_wdata_fifo_sink_sink_ready;
wire          main_user_port_litedramnativeportconverter_wdata_fifo_sink_sink_valid;
wire          main_user_port_litedramnativeportconverter_wdata_fifo_source_source_first;
wire          main_user_port_litedramnativeportconverter_wdata_fifo_source_source_last;
wire   [63:0] main_user_port_litedramnativeportconverter_wdata_fifo_source_source_payload_data;
wire    [7:0] main_user_port_litedramnativeportconverter_wdata_fifo_source_source_payload_we;
reg           main_user_port_litedramnativeportconverter_wdata_fifo_source_source_ready = 1'd0;
wire          main_user_port_litedramnativeportconverter_wdata_fifo_source_source_valid;
wire          main_user_port_litedramnativeportconverter_wdata_finished;
reg    [15:0] main_user_port_litedramnativeportconverter_wdata_sel = 16'd0;
reg           main_user_port_new_port_cmd_last = 1'd0;
reg    [25:0] main_user_port_new_port_cmd_payload_addr = 26'd0;
reg           main_user_port_new_port_cmd_payload_we = 1'd0;
reg           main_user_port_new_port_cmd_ready = 1'd0;
reg           main_user_port_new_port_cmd_valid = 1'd0;
reg           main_user_port_new_port_flush = 1'd0;
reg           main_user_port_new_port_rdata_first = 1'd0;
reg           main_user_port_new_port_rdata_last = 1'd0;
reg    [63:0] main_user_port_new_port_rdata_payload_data = 64'd0;
wire          main_user_port_new_port_rdata_ready;
reg           main_user_port_new_port_rdata_valid = 1'd0;
wire          main_user_port_new_port_wdata_first;
wire          main_user_port_new_port_wdata_last;
wire   [63:0] main_user_port_new_port_wdata_payload_data;
wire    [7:0] main_user_port_new_port_wdata_payload_we;
wire          main_user_port_new_port_wdata_ready;
wire          main_user_port_new_port_wdata_valid;
reg    [24:0] main_user_port_port_cmd_payload_addr = 25'd0;
reg           main_user_port_port_cmd_payload_we = 1'd0;
wire          main_user_port_port_cmd_ready;
reg           main_user_port_port_cmd_valid = 1'd0;
reg           main_user_port_port_rdata_first = 1'd0;
reg           main_user_port_port_rdata_last = 1'd0;
wire  [127:0] main_user_port_port_rdata_payload_data;
wire          main_user_port_port_rdata_ready;
wire          main_user_port_port_rdata_valid;
wire          main_user_port_port_wdata_first;
wire          main_user_port_port_wdata_last;
wire  [127:0] main_user_port_port_wdata_payload_data;
wire   [15:0] main_user_port_port_wdata_payload_we;
wire          main_user_port_port_wdata_ready;
wire          main_user_port_port_wdata_valid;
reg           main_w_first = 1'd0;
wire          main_w_last;
reg           main_w_param_dest = 1'd0;
reg           main_w_param_id = 1'd0;
reg           main_w_param_user = 1'd0;
wire   [63:0] main_w_payload_data;
wire    [7:0] main_w_payload_strb;
reg           main_w_ready = 1'd0;
wire          main_w_valid;
wire          main_write_aw_first;
wire          main_write_aw_last;
wire    [5:0] main_write_aw_param_id;
wire   [28:0] main_write_aw_payload_addr;
reg           main_write_aw_ready = 1'd0;
wire          main_write_aw_valid;
reg           main_write_axi_w_connect = 1'd1;
reg     [7:0] main_write_beat_count = 8'd0;
reg  signed  [12:0] main_write_beat_offset = 13'd0;
wire   [11:0] main_write_beat_size;
wire   [11:0] main_write_beat_wrap;
wire          main_write_can_write;
wire          main_write_cmd_grant;
wire          main_write_cmd_request;
reg     [3:0] main_write_id_buffer_consume = 4'd0;
wire          main_write_id_buffer_do_read;
wire          main_write_id_buffer_fifo_in_first;
wire          main_write_id_buffer_fifo_in_last;
wire    [5:0] main_write_id_buffer_fifo_in_payload_id;
wire          main_write_id_buffer_fifo_out_first;
wire          main_write_id_buffer_fifo_out_last;
wire    [5:0] main_write_id_buffer_fifo_out_payload_id;
reg     [4:0] main_write_id_buffer_level = 5'd0;
reg     [3:0] main_write_id_buffer_produce = 4'd0;
wire    [3:0] main_write_id_buffer_rdport_adr;
wire    [7:0] main_write_id_buffer_rdport_dat_r;
reg           main_write_id_buffer_replace = 1'd0;
reg           main_write_id_buffer_sink_first = 1'd0;
reg           main_write_id_buffer_sink_last = 1'd0;
wire    [5:0] main_write_id_buffer_sink_payload_id;
wire          main_write_id_buffer_sink_ready;
wire          main_write_id_buffer_sink_valid;
wire          main_write_id_buffer_source_first;
wire          main_write_id_buffer_source_last;
wire    [5:0] main_write_id_buffer_source_payload_id;
reg           main_write_id_buffer_source_ready = 1'd0;
wire          main_write_id_buffer_source_valid;
wire    [7:0] main_write_id_buffer_syncfifo_din;
wire    [7:0] main_write_id_buffer_syncfifo_dout;
wire          main_write_id_buffer_syncfifo_re;
wire          main_write_id_buffer_syncfifo_readable;
wire          main_write_id_buffer_syncfifo_we;
wire          main_write_id_buffer_syncfifo_writable;
reg     [3:0] main_write_id_buffer_wrport_adr = 4'd0;
wire    [7:0] main_write_id_buffer_wrport_dat_r;
wire    [7:0] main_write_id_buffer_wrport_dat_w;
wire          main_write_id_buffer_wrport_we;
wire          main_write_pipe_valid_sink_first;
wire          main_write_pipe_valid_sink_last;
wire          main_write_pipe_valid_sink_param_dest;
wire    [5:0] main_write_pipe_valid_sink_param_id;
wire          main_write_pipe_valid_sink_param_user;
wire   [28:0] main_write_pipe_valid_sink_payload_addr;
wire    [1:0] main_write_pipe_valid_sink_payload_burst;
wire    [3:0] main_write_pipe_valid_sink_payload_cache;
wire    [7:0] main_write_pipe_valid_sink_payload_len;
wire          main_write_pipe_valid_sink_payload_lock;
wire    [2:0] main_write_pipe_valid_sink_payload_prot;
wire    [3:0] main_write_pipe_valid_sink_payload_qos;
wire    [3:0] main_write_pipe_valid_sink_payload_region;
wire    [2:0] main_write_pipe_valid_sink_payload_size;
wire          main_write_pipe_valid_sink_ready;
wire          main_write_pipe_valid_sink_valid;
reg           main_write_pipe_valid_source_first = 1'd0;
reg           main_write_pipe_valid_source_last = 1'd0;
reg           main_write_pipe_valid_source_param_dest = 1'd0;
reg     [5:0] main_write_pipe_valid_source_param_id = 6'd0;
reg           main_write_pipe_valid_source_param_user = 1'd0;
reg    [28:0] main_write_pipe_valid_source_payload_addr = 29'd0;
reg     [1:0] main_write_pipe_valid_source_payload_burst = 2'd0;
reg     [3:0] main_write_pipe_valid_source_payload_cache = 4'd0;
reg     [7:0] main_write_pipe_valid_source_payload_len = 8'd0;
reg           main_write_pipe_valid_source_payload_lock = 1'd0;
reg     [2:0] main_write_pipe_valid_source_payload_prot = 3'd0;
reg     [3:0] main_write_pipe_valid_source_payload_qos = 4'd0;
reg     [3:0] main_write_pipe_valid_source_payload_region = 4'd0;
reg     [2:0] main_write_pipe_valid_source_payload_size = 3'd0;
wire          main_write_pipe_valid_source_ready;
reg           main_write_pipe_valid_source_valid = 1'd0;
reg     [3:0] main_write_resp_buffer_consume = 4'd0;
wire          main_write_resp_buffer_do_read;
wire          main_write_resp_buffer_fifo_in_first;
wire          main_write_resp_buffer_fifo_in_last;
wire    [5:0] main_write_resp_buffer_fifo_in_payload_id;
wire    [1:0] main_write_resp_buffer_fifo_in_payload_resp;
wire          main_write_resp_buffer_fifo_out_first;
wire          main_write_resp_buffer_fifo_out_last;
wire    [5:0] main_write_resp_buffer_fifo_out_payload_id;
wire    [1:0] main_write_resp_buffer_fifo_out_payload_resp;
reg     [4:0] main_write_resp_buffer_level = 5'd0;
reg     [3:0] main_write_resp_buffer_produce = 4'd0;
wire    [3:0] main_write_resp_buffer_rdport_adr;
wire    [9:0] main_write_resp_buffer_rdport_dat_r;
reg           main_write_resp_buffer_replace = 1'd0;
reg           main_write_resp_buffer_sink_first = 1'd0;
reg           main_write_resp_buffer_sink_last = 1'd0;
reg     [5:0] main_write_resp_buffer_sink_payload_id = 6'd0;
reg     [1:0] main_write_resp_buffer_sink_payload_resp = 2'd0;
wire          main_write_resp_buffer_sink_ready;
reg           main_write_resp_buffer_sink_valid = 1'd0;
wire          main_write_resp_buffer_source_first;
wire          main_write_resp_buffer_source_last;
wire    [5:0] main_write_resp_buffer_source_payload_id;
wire    [1:0] main_write_resp_buffer_source_payload_resp;
wire          main_write_resp_buffer_source_ready;
wire          main_write_resp_buffer_source_valid;
wire    [9:0] main_write_resp_buffer_syncfifo_din;
wire    [9:0] main_write_resp_buffer_syncfifo_dout;
wire          main_write_resp_buffer_syncfifo_re;
wire          main_write_resp_buffer_syncfifo_readable;
wire          main_write_resp_buffer_syncfifo_we;
wire          main_write_resp_buffer_syncfifo_writable;
reg     [3:0] main_write_resp_buffer_wrport_adr = 4'd0;
wire    [9:0] main_write_resp_buffer_wrport_dat_r;
wire    [9:0] main_write_resp_buffer_wrport_dat_w;
wire          main_write_resp_buffer_wrport_we;
wire          main_write_sink_sink_first;
wire          main_write_sink_sink_last;
wire          main_write_sink_sink_param_dest;
wire    [5:0] main_write_sink_sink_param_id;
wire          main_write_sink_sink_param_user;
wire   [28:0] main_write_sink_sink_payload_addr;
wire    [1:0] main_write_sink_sink_payload_burst;
wire    [3:0] main_write_sink_sink_payload_cache;
wire    [7:0] main_write_sink_sink_payload_len;
wire          main_write_sink_sink_payload_lock;
wire    [2:0] main_write_sink_sink_payload_prot;
wire    [3:0] main_write_sink_sink_payload_qos;
wire    [3:0] main_write_sink_sink_payload_region;
wire    [2:0] main_write_sink_sink_payload_size;
wire          main_write_sink_sink_ready;
wire          main_write_sink_sink_valid;
wire          main_write_source_source_first;
wire          main_write_source_source_last;
wire          main_write_source_source_param_dest;
wire    [5:0] main_write_source_source_param_id;
wire          main_write_source_source_param_user;
wire   [28:0] main_write_source_source_payload_addr;
wire    [1:0] main_write_source_source_payload_burst;
wire    [3:0] main_write_source_source_payload_cache;
wire    [7:0] main_write_source_source_payload_len;
wire          main_write_source_source_payload_lock;
wire    [2:0] main_write_source_source_payload_prot;
wire    [3:0] main_write_source_source_payload_qos;
wire    [3:0] main_write_source_source_payload_region;
wire    [2:0] main_write_source_source_payload_size;
reg           main_write_source_source_ready = 1'd0;
wire          main_write_source_source_valid;
reg     [3:0] main_write_w_buffer_consume = 4'd0;
wire          main_write_w_buffer_dequeue;
wire          main_write_w_buffer_do_read;
wire          main_write_w_buffer_fifo_in_first;
wire          main_write_w_buffer_fifo_in_last;
wire          main_write_w_buffer_fifo_in_param_dest;
wire    [5:0] main_write_w_buffer_fifo_in_param_id;
wire          main_write_w_buffer_fifo_in_param_user;
wire   [63:0] main_write_w_buffer_fifo_in_payload_data;
wire    [7:0] main_write_w_buffer_fifo_in_payload_strb;
wire          main_write_w_buffer_fifo_out_first;
wire          main_write_w_buffer_fifo_out_last;
wire          main_write_w_buffer_fifo_out_param_dest;
wire    [5:0] main_write_w_buffer_fifo_out_param_id;
wire          main_write_w_buffer_fifo_out_param_user;
wire   [63:0] main_write_w_buffer_fifo_out_payload_data;
wire    [7:0] main_write_w_buffer_fifo_out_payload_strb;
reg     [4:0] main_write_w_buffer_level0 = 5'd0;
wire    [4:0] main_write_w_buffer_level1;
reg     [4:0] main_write_w_buffer_level2 = 5'd0;
reg     [3:0] main_write_w_buffer_produce = 4'd0;
wire          main_write_w_buffer_queue;
wire    [3:0] main_write_w_buffer_rdport_adr;
wire   [81:0] main_write_w_buffer_rdport_dat_r;
wire          main_write_w_buffer_rdport_re;
wire          main_write_w_buffer_re;
reg           main_write_w_buffer_readable = 1'd0;
reg           main_write_w_buffer_replace = 1'd0;
reg           main_write_w_buffer_sink_first = 1'd0;
reg           main_write_w_buffer_sink_last = 1'd0;
reg           main_write_w_buffer_sink_param_dest = 1'd0;
reg     [5:0] main_write_w_buffer_sink_param_id = 6'd0;
reg           main_write_w_buffer_sink_param_user = 1'd0;
reg    [63:0] main_write_w_buffer_sink_payload_data = 64'd0;
reg     [7:0] main_write_w_buffer_sink_payload_strb = 8'd0;
wire          main_write_w_buffer_sink_ready;
reg           main_write_w_buffer_sink_valid = 1'd0;
wire          main_write_w_buffer_source_first;
wire          main_write_w_buffer_source_last;
wire          main_write_w_buffer_source_param_dest;
wire    [5:0] main_write_w_buffer_source_param_id;
wire          main_write_w_buffer_source_param_user;
wire   [63:0] main_write_w_buffer_source_payload_data;
wire    [7:0] main_write_w_buffer_source_payload_strb;
wire          main_write_w_buffer_source_ready;
wire          main_write_w_buffer_source_valid;
wire   [81:0] main_write_w_buffer_syncfifo_din;
wire   [81:0] main_write_w_buffer_syncfifo_dout;
wire          main_write_w_buffer_syncfifo_re;
wire          main_write_w_buffer_syncfifo_readable;
wire          main_write_w_buffer_syncfifo_we;
wire          main_write_w_buffer_syncfifo_writable;
reg     [3:0] main_write_w_buffer_wrport_adr = 4'd0;
wire   [81:0] main_write_w_buffer_wrport_dat_r;
wire   [81:0] main_write_w_buffer_wrport_dat_w;
wire          main_write_w_buffer_wrport_we;
wire          sys4x_clk;
wire          sys4x_dqs_clk;
wire          sys_clk;
wire          sys_rst;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign main_litedramcore_serv_reset = (main_litedramcore_soc_rst | main_litedramcore_cpu_rst);
assign init_done = main_init_done_storage;
assign init_error = main_init_error_storage;
assign user_clk = sys_clk;
assign user_rst = sys_rst;
assign main_aw_valid = (user_port_axi_0_awvalid & main_user_enable);
assign user_port_axi_0_awready = (main_aw_ready & main_user_enable);
assign main_aw_payload_addr = user_port_axi_0_awaddr;
assign main_aw_payload_burst = user_port_axi_0_awburst;
assign main_aw_payload_len = user_port_axi_0_awlen;
assign main_aw_payload_size = user_port_axi_0_awsize;
assign main_aw_param_id = user_port_axi_0_awid;
assign main_w_valid = user_port_axi_0_wvalid;
assign user_port_axi_0_wready = main_w_ready;
assign main_w_last = user_port_axi_0_wlast;
assign main_w_payload_strb = user_port_axi_0_wstrb;
assign main_w_payload_data = user_port_axi_0_wdata;
assign user_port_axi_0_bvalid = main_b_valid;
assign main_b_ready = user_port_axi_0_bready;
assign user_port_axi_0_bresp = main_b_payload_resp;
assign user_port_axi_0_bid = main_b_param_id;
assign main_ar_valid = (user_port_axi_0_arvalid & main_user_enable);
assign user_port_axi_0_arready = (main_ar_ready & main_user_enable);
assign main_ar_payload_addr = user_port_axi_0_araddr;
assign main_ar_payload_burst = user_port_axi_0_arburst;
assign main_ar_payload_len = user_port_axi_0_arlen;
assign main_ar_payload_size = user_port_axi_0_arsize;
assign main_ar_param_id = user_port_axi_0_arid;
assign user_port_axi_0_rvalid = main_r_valid;
assign main_r_ready = user_port_axi_0_rready;
assign user_port_axi_0_rlast = main_r_last;
assign user_port_axi_0_rresp = main_r_payload_resp;
assign user_port_axi_0_rdata = main_r_payload_data;
assign user_port_axi_0_rid = main_r_param_id;
always @(*) begin
    main_rst <= 1'd0;
    if (main_litedramcore_soc_rst) begin
        main_rst <= 1'd1;
    end
end
assign main_litedramcore_bus_error = builder_error;
assign builder_shared_adr = builder_rhs_array_muxed0;
assign builder_shared_dat_w = builder_rhs_array_muxed1;
assign builder_shared_sel = builder_rhs_array_muxed2;
assign builder_shared_cyc = builder_rhs_array_muxed3;
assign builder_shared_stb = builder_rhs_array_muxed4;
assign builder_shared_we = builder_rhs_array_muxed5;
assign builder_shared_cti = builder_rhs_array_muxed6;
assign builder_shared_bte = builder_rhs_array_muxed7;
assign main_litedramcore_serv_ibus_dat_r = builder_shared_dat_r;
assign main_litedramcore_serv_dbus_dat_r = builder_shared_dat_r;
assign main_litedramcore_serv_ibus_ack = (builder_shared_ack & (builder_grant == 1'd0));
assign main_litedramcore_serv_dbus_ack = (builder_shared_ack & (builder_grant == 1'd1));
assign main_litedramcore_serv_ibus_err = (builder_shared_err & (builder_grant == 1'd0));
assign main_litedramcore_serv_dbus_err = (builder_shared_err & (builder_grant == 1'd1));
assign builder_request = {main_litedramcore_serv_dbus_cyc, main_litedramcore_serv_ibus_cyc};
always @(*) begin
    builder_slave_sel <= 4'd0;
    builder_slave_sel[0] <= (builder_shared_adr[29:14] == 1'd0);
    builder_slave_sel[1] <= (builder_shared_adr[29:11] == 12'd2048);
    builder_slave_sel[2] <= (builder_shared_adr[29:22] == 7'd64);
    builder_slave_sel[3] <= (builder_shared_adr[29:14] == 16'd33280);
end
assign main_litedramcore_litedramcore_ram_bus_adr = builder_shared_adr;
assign main_litedramcore_litedramcore_ram_bus_dat_w = builder_shared_dat_w;
assign main_litedramcore_litedramcore_ram_bus_sel = builder_shared_sel;
assign main_litedramcore_litedramcore_ram_bus_stb = builder_shared_stb;
assign main_litedramcore_litedramcore_ram_bus_we = builder_shared_we;
assign main_litedramcore_litedramcore_ram_bus_cti = builder_shared_cti;
assign main_litedramcore_litedramcore_ram_bus_bte = builder_shared_bte;
assign main_litedramcore_ram_bus_ram_bus_adr = builder_shared_adr;
assign main_litedramcore_ram_bus_ram_bus_dat_w = builder_shared_dat_w;
assign main_litedramcore_ram_bus_ram_bus_sel = builder_shared_sel;
assign main_litedramcore_ram_bus_ram_bus_stb = builder_shared_stb;
assign main_litedramcore_ram_bus_ram_bus_we = builder_shared_we;
assign main_litedramcore_ram_bus_ram_bus_cti = builder_shared_cti;
assign main_litedramcore_ram_bus_ram_bus_bte = builder_shared_bte;
assign main_litedramcore_wb_sdram_adr = builder_shared_adr;
assign main_litedramcore_wb_sdram_dat_w = builder_shared_dat_w;
assign main_litedramcore_wb_sdram_sel = builder_shared_sel;
assign main_litedramcore_wb_sdram_stb = builder_shared_stb;
assign main_litedramcore_wb_sdram_we = builder_shared_we;
assign main_litedramcore_wb_sdram_cti = builder_shared_cti;
assign main_litedramcore_wb_sdram_bte = builder_shared_bte;
assign builder_litedramcore_wishbone_adr = builder_shared_adr;
assign builder_litedramcore_wishbone_dat_w = builder_shared_dat_w;
assign builder_litedramcore_wishbone_sel = builder_shared_sel;
assign builder_litedramcore_wishbone_stb = builder_shared_stb;
assign builder_litedramcore_wishbone_we = builder_shared_we;
assign builder_litedramcore_wishbone_cti = builder_shared_cti;
assign builder_litedramcore_wishbone_bte = builder_shared_bte;
assign main_litedramcore_litedramcore_ram_bus_cyc = (builder_shared_cyc & builder_slave_sel[0]);
assign main_litedramcore_ram_bus_ram_bus_cyc = (builder_shared_cyc & builder_slave_sel[1]);
assign main_litedramcore_wb_sdram_cyc = (builder_shared_cyc & builder_slave_sel[2]);
assign builder_litedramcore_wishbone_cyc = (builder_shared_cyc & builder_slave_sel[3]);
always @(*) begin
    builder_shared_ack <= 1'd0;
    builder_shared_ack <= (((main_litedramcore_litedramcore_ram_bus_ack | main_litedramcore_ram_bus_ram_bus_ack) | main_litedramcore_wb_sdram_ack) | builder_litedramcore_wishbone_ack);
    if (builder_done) begin
        builder_shared_ack <= 1'd1;
    end
end
assign builder_shared_err = (((main_litedramcore_litedramcore_ram_bus_err | main_litedramcore_ram_bus_ram_bus_err) | main_litedramcore_wb_sdram_err) | builder_litedramcore_wishbone_err);
always @(*) begin
    builder_shared_dat_r <= 32'd0;
    builder_shared_dat_r <= (((({32{builder_slave_sel_r[0]}} & main_litedramcore_litedramcore_ram_bus_dat_r) | ({32{builder_slave_sel_r[1]}} & main_litedramcore_ram_bus_ram_bus_dat_r)) | ({32{builder_slave_sel_r[2]}} & main_litedramcore_wb_sdram_dat_r)) | ({32{builder_slave_sel_r[3]}} & builder_litedramcore_wishbone_dat_r));
    if (builder_done) begin
        builder_shared_dat_r <= 32'd4294967295;
    end
end
assign builder_wait = ((builder_shared_stb & builder_shared_cyc) & (~builder_shared_ack));
always @(*) begin
    builder_error <= 1'd0;
    if (builder_done) begin
        builder_error <= 1'd1;
    end
end
assign builder_done = (builder_count == 1'd0);
assign main_litedramcore_bus_errors_status = main_litedramcore_bus_errors;
assign main_litedramcore_serv_ibus_stb = main_litedramcore_serv_ibus_cyc;
assign main_litedramcore_serv_ibus_sel = 4'd15;
assign main_litedramcore_serv_dbus_stb = main_litedramcore_serv_dbus_cyc;
assign main_litedramcore_litedramcore_adr = main_litedramcore_litedramcore_ram_bus_adr[13:0];
assign main_litedramcore_litedramcore_ram_bus_dat_r = main_litedramcore_litedramcore_dat_r;
always @(*) begin
    main_litedramcore_ram_we <= 4'd0;
    main_litedramcore_ram_we[0] <= (((main_litedramcore_ram_bus_ram_bus_cyc & main_litedramcore_ram_bus_ram_bus_stb) & main_litedramcore_ram_bus_ram_bus_we) & main_litedramcore_ram_bus_ram_bus_sel[0]);
    main_litedramcore_ram_we[1] <= (((main_litedramcore_ram_bus_ram_bus_cyc & main_litedramcore_ram_bus_ram_bus_stb) & main_litedramcore_ram_bus_ram_bus_we) & main_litedramcore_ram_bus_ram_bus_sel[1]);
    main_litedramcore_ram_we[2] <= (((main_litedramcore_ram_bus_ram_bus_cyc & main_litedramcore_ram_bus_ram_bus_stb) & main_litedramcore_ram_bus_ram_bus_we) & main_litedramcore_ram_bus_ram_bus_sel[2]);
    main_litedramcore_ram_we[3] <= (((main_litedramcore_ram_bus_ram_bus_cyc & main_litedramcore_ram_bus_ram_bus_stb) & main_litedramcore_ram_bus_ram_bus_we) & main_litedramcore_ram_bus_ram_bus_sel[3]);
end
assign main_litedramcore_ram_adr = main_litedramcore_ram_bus_ram_bus_adr[10:0];
assign main_litedramcore_ram_bus_ram_bus_dat_r = main_litedramcore_ram_dat_r;
assign main_litedramcore_ram_dat_w = main_litedramcore_ram_bus_ram_bus_dat_w;
assign main_litedramcore_zero_trigger = (main_litedramcore_value == 1'd0);
assign main_litedramcore_zero0 = main_litedramcore_zero_status;
assign main_litedramcore_zero1 = main_litedramcore_zero_pending;
always @(*) begin
    main_litedramcore_zero_clear <= 1'd0;
    if ((main_litedramcore_pending_re & main_litedramcore_pending_r)) begin
        main_litedramcore_zero_clear <= 1'd1;
    end
end
assign main_litedramcore_irq = (main_litedramcore_pending_status & main_litedramcore_enable_storage);
assign main_litedramcore_zero_status = main_litedramcore_zero_trigger;
always @(*) begin
    builder_litedramcore_rs232phytx_next_state <= 1'd0;
    builder_litedramcore_rs232phytx_next_state <= builder_litedramcore_rs232phytx_state;
    case (builder_litedramcore_rs232phytx_state)
        1'd1: begin
            if (main_tx_tick) begin
                if ((main_tx_count == 4'd9)) begin
                    builder_litedramcore_rs232phytx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            if (main_tx_sink_valid) begin
                builder_litedramcore_rs232phytx_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    main_tx_count_rs232phytx_next_value0 <= 4'd0;
    case (builder_litedramcore_rs232phytx_state)
        1'd1: begin
            if (main_tx_tick) begin
                main_tx_count_rs232phytx_next_value0 <= (main_tx_count + 1'd1);
            end
        end
        default: begin
            main_tx_count_rs232phytx_next_value0 <= 1'd0;
        end
    endcase
end
always @(*) begin
    main_tx_count_rs232phytx_next_value_ce0 <= 1'd0;
    case (builder_litedramcore_rs232phytx_state)
        1'd1: begin
            if (main_tx_tick) begin
                main_tx_count_rs232phytx_next_value_ce0 <= 1'd1;
            end
        end
        default: begin
            main_tx_count_rs232phytx_next_value_ce0 <= 1'd1;
        end
    endcase
end
always @(*) begin
    main_tx_sink_ready <= 1'd0;
    case (builder_litedramcore_rs232phytx_state)
        1'd1: begin
            if (main_tx_tick) begin
                if ((main_tx_count == 4'd9)) begin
                    main_tx_sink_ready <= 1'd1;
                end
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_obj_uart_tx_rs232phytx_next_value1 <= 1'd0;
    case (builder_litedramcore_rs232phytx_state)
        1'd1: begin
            if (main_tx_tick) begin
                main_obj_uart_tx_rs232phytx_next_value1 <= main_tx_data;
            end
        end
        default: begin
            main_obj_uart_tx_rs232phytx_next_value1 <= 1'd1;
            if (main_tx_sink_valid) begin
                main_obj_uart_tx_rs232phytx_next_value1 <= 1'd0;
            end
        end
    endcase
end
always @(*) begin
    main_obj_uart_tx_rs232phytx_next_value_ce1 <= 1'd0;
    case (builder_litedramcore_rs232phytx_state)
        1'd1: begin
            if (main_tx_tick) begin
                main_obj_uart_tx_rs232phytx_next_value_ce1 <= 1'd1;
            end
        end
        default: begin
            main_obj_uart_tx_rs232phytx_next_value_ce1 <= 1'd1;
            if (main_tx_sink_valid) begin
                main_obj_uart_tx_rs232phytx_next_value_ce1 <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    main_tx_data_rs232phytx_next_value2 <= 8'd0;
    case (builder_litedramcore_rs232phytx_state)
        1'd1: begin
            if (main_tx_tick) begin
                main_tx_data_rs232phytx_next_value2 <= {1'd1, main_tx_data[7:1]};
            end
        end
        default: begin
            if (main_tx_sink_valid) begin
                main_tx_data_rs232phytx_next_value2 <= main_tx_sink_payload_data;
            end
        end
    endcase
end
always @(*) begin
    main_tx_data_rs232phytx_next_value_ce2 <= 1'd0;
    case (builder_litedramcore_rs232phytx_state)
        1'd1: begin
            if (main_tx_tick) begin
                main_tx_data_rs232phytx_next_value_ce2 <= 1'd1;
            end
        end
        default: begin
            if (main_tx_sink_valid) begin
                main_tx_data_rs232phytx_next_value_ce2 <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    main_tx_enable <= 1'd0;
    case (builder_litedramcore_rs232phytx_state)
        1'd1: begin
            main_tx_enable <= 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    builder_litedramcore_rs232phyrx_next_state <= 1'd0;
    builder_litedramcore_rs232phyrx_next_state <= builder_litedramcore_rs232phyrx_state;
    case (builder_litedramcore_rs232phyrx_state)
        1'd1: begin
            if (main_rx_tick) begin
                if ((main_rx_count == 4'd9)) begin
                    builder_litedramcore_rs232phyrx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            if (((main_rx_rx == 1'd0) & (main_rx_rx_d == 1'd1))) begin
                builder_litedramcore_rs232phyrx_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    main_rx_count_rs232phyrx_next_value0 <= 4'd0;
    case (builder_litedramcore_rs232phyrx_state)
        1'd1: begin
            if (main_rx_tick) begin
                main_rx_count_rs232phyrx_next_value0 <= (main_rx_count + 1'd1);
            end
        end
        default: begin
            main_rx_count_rs232phyrx_next_value0 <= 1'd0;
        end
    endcase
end
always @(*) begin
    main_rx_count_rs232phyrx_next_value_ce0 <= 1'd0;
    case (builder_litedramcore_rs232phyrx_state)
        1'd1: begin
            if (main_rx_tick) begin
                main_rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
            end
        end
        default: begin
            main_rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
        end
    endcase
end
always @(*) begin
    main_rx_source_valid <= 1'd0;
    case (builder_litedramcore_rs232phyrx_state)
        1'd1: begin
            if (main_rx_tick) begin
                if ((main_rx_count == 4'd9)) begin
                    main_rx_source_valid <= (main_rx_rx == 1'd1);
                end
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_rx_data_rs232phyrx_next_value1 <= 8'd0;
    case (builder_litedramcore_rs232phyrx_state)
        1'd1: begin
            if (main_rx_tick) begin
                main_rx_data_rs232phyrx_next_value1 <= {main_rx_rx, main_rx_data[7:1]};
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_rx_source_payload_data <= 8'd0;
    case (builder_litedramcore_rs232phyrx_state)
        1'd1: begin
            if (main_rx_tick) begin
                if ((main_rx_count == 4'd9)) begin
                    main_rx_source_payload_data <= main_rx_data;
                end
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_rx_data_rs232phyrx_next_value_ce1 <= 1'd0;
    case (builder_litedramcore_rs232phyrx_state)
        1'd1: begin
            if (main_rx_tick) begin
                main_rx_data_rs232phyrx_next_value_ce1 <= 1'd1;
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_rx_enable <= 1'd0;
    case (builder_litedramcore_rs232phyrx_state)
        1'd1: begin
            main_rx_enable <= 1'd1;
        end
        default: begin
        end
    endcase
end
assign main_uart_uart_sink_valid = main_rx_source_valid;
assign main_rx_source_ready = main_uart_uart_sink_ready;
assign main_uart_uart_sink_first = main_rx_source_first;
assign main_uart_uart_sink_last = main_rx_source_last;
assign main_uart_uart_sink_payload_data = main_rx_source_payload_data;
assign main_tx_sink_valid = main_uart_uart_source_valid;
assign main_uart_uart_source_ready = main_tx_sink_ready;
assign main_tx_sink_first = main_uart_uart_source_first;
assign main_tx_sink_last = main_uart_uart_source_last;
assign main_tx_sink_payload_data = main_uart_uart_source_payload_data;
assign main_uart_tx_fifo_sink_valid = main_uart_rxtx_re;
assign main_uart_tx_fifo_sink_payload_data = main_uart_rxtx_r;
assign main_uart_uart_source_valid = main_uart_tx_fifo_source_valid;
assign main_uart_tx_fifo_source_ready = main_uart_uart_source_ready;
assign main_uart_uart_source_first = main_uart_tx_fifo_source_first;
assign main_uart_uart_source_last = main_uart_tx_fifo_source_last;
assign main_uart_uart_source_payload_data = main_uart_tx_fifo_source_payload_data;
assign main_uart_txfull_status = (~main_uart_tx_fifo_sink_ready);
assign main_uart_txempty_status = (~main_uart_tx_fifo_source_valid);
assign main_uart_tx_trigger = main_uart_tx_fifo_sink_ready;
assign main_uart_rx_fifo_sink_valid = main_uart_uart_sink_valid;
assign main_uart_uart_sink_ready = main_uart_rx_fifo_sink_ready;
assign main_uart_rx_fifo_sink_first = main_uart_uart_sink_first;
assign main_uart_rx_fifo_sink_last = main_uart_uart_sink_last;
assign main_uart_rx_fifo_sink_payload_data = main_uart_uart_sink_payload_data;
assign main_uart_rxtx_w = main_uart_rx_fifo_source_payload_data;
assign main_uart_rx_fifo_source_ready = (main_uart_rx_clear | (1'd0 & main_uart_rxtx_we));
assign main_uart_rxempty_status = (~main_uart_rx_fifo_source_valid);
assign main_uart_rxfull_status = (~main_uart_rx_fifo_sink_ready);
assign main_uart_rx_trigger = main_uart_rx_fifo_source_valid;
assign main_uart_tx0 = main_uart_tx_status;
assign main_uart_tx1 = main_uart_tx_pending;
always @(*) begin
    main_uart_tx_clear <= 1'd0;
    if ((main_uart_pending_re & main_uart_pending_r[0])) begin
        main_uart_tx_clear <= 1'd1;
    end
end
assign main_uart_rx0 = main_uart_rx_status;
assign main_uart_rx1 = main_uart_rx_pending;
always @(*) begin
    main_uart_rx_clear <= 1'd0;
    if ((main_uart_pending_re & main_uart_pending_r[1])) begin
        main_uart_rx_clear <= 1'd1;
    end
end
assign main_uart_irq = ((main_uart_pending_status[0] & main_uart_enable_storage[0]) | (main_uart_pending_status[1] & main_uart_enable_storage[1]));
assign main_uart_tx_status = main_uart_tx_trigger;
assign main_uart_rx_status = main_uart_rx_trigger;
assign main_uart_tx_fifo_syncfifo_din = {main_uart_tx_fifo_fifo_in_last, main_uart_tx_fifo_fifo_in_first, main_uart_tx_fifo_fifo_in_payload_data};
assign {main_uart_tx_fifo_fifo_out_last, main_uart_tx_fifo_fifo_out_first, main_uart_tx_fifo_fifo_out_payload_data} = main_uart_tx_fifo_syncfifo_dout;
assign {main_uart_tx_fifo_fifo_out_last, main_uart_tx_fifo_fifo_out_first, main_uart_tx_fifo_fifo_out_payload_data} = main_uart_tx_fifo_syncfifo_dout;
assign {main_uart_tx_fifo_fifo_out_last, main_uart_tx_fifo_fifo_out_first, main_uart_tx_fifo_fifo_out_payload_data} = main_uart_tx_fifo_syncfifo_dout;
assign main_uart_tx_fifo_sink_ready = main_uart_tx_fifo_syncfifo_writable;
assign main_uart_tx_fifo_syncfifo_we = main_uart_tx_fifo_sink_valid;
assign main_uart_tx_fifo_fifo_in_first = main_uart_tx_fifo_sink_first;
assign main_uart_tx_fifo_fifo_in_last = main_uart_tx_fifo_sink_last;
assign main_uart_tx_fifo_fifo_in_payload_data = main_uart_tx_fifo_sink_payload_data;
assign main_uart_tx_fifo_source_valid = main_uart_tx_fifo_readable;
assign main_uart_tx_fifo_source_first = main_uart_tx_fifo_fifo_out_first;
assign main_uart_tx_fifo_source_last = main_uart_tx_fifo_fifo_out_last;
assign main_uart_tx_fifo_source_payload_data = main_uart_tx_fifo_fifo_out_payload_data;
assign main_uart_tx_fifo_re = main_uart_tx_fifo_source_ready;
assign main_uart_tx_fifo_syncfifo_re = (main_uart_tx_fifo_syncfifo_readable & ((~main_uart_tx_fifo_readable) | main_uart_tx_fifo_re));
assign main_uart_tx_fifo_level1 = (main_uart_tx_fifo_level0 + main_uart_tx_fifo_readable);
always @(*) begin
    main_uart_tx_fifo_wrport_adr <= 4'd0;
    if (main_uart_tx_fifo_replace) begin
        main_uart_tx_fifo_wrport_adr <= (main_uart_tx_fifo_produce - 1'd1);
    end else begin
        main_uart_tx_fifo_wrport_adr <= main_uart_tx_fifo_produce;
    end
end
assign main_uart_tx_fifo_wrport_dat_w = main_uart_tx_fifo_syncfifo_din;
assign main_uart_tx_fifo_wrport_we = (main_uart_tx_fifo_syncfifo_we & (main_uart_tx_fifo_syncfifo_writable | main_uart_tx_fifo_replace));
assign main_uart_tx_fifo_do_read = (main_uart_tx_fifo_syncfifo_readable & main_uart_tx_fifo_syncfifo_re);
assign main_uart_tx_fifo_rdport_adr = main_uart_tx_fifo_consume;
assign main_uart_tx_fifo_syncfifo_dout = main_uart_tx_fifo_rdport_dat_r;
assign main_uart_tx_fifo_rdport_re = main_uart_tx_fifo_do_read;
assign main_uart_tx_fifo_syncfifo_writable = (main_uart_tx_fifo_level0 != 5'd16);
assign main_uart_tx_fifo_syncfifo_readable = (main_uart_tx_fifo_level0 != 1'd0);
assign main_uart_rx_fifo_syncfifo_din = {main_uart_rx_fifo_fifo_in_last, main_uart_rx_fifo_fifo_in_first, main_uart_rx_fifo_fifo_in_payload_data};
assign {main_uart_rx_fifo_fifo_out_last, main_uart_rx_fifo_fifo_out_first, main_uart_rx_fifo_fifo_out_payload_data} = main_uart_rx_fifo_syncfifo_dout;
assign {main_uart_rx_fifo_fifo_out_last, main_uart_rx_fifo_fifo_out_first, main_uart_rx_fifo_fifo_out_payload_data} = main_uart_rx_fifo_syncfifo_dout;
assign {main_uart_rx_fifo_fifo_out_last, main_uart_rx_fifo_fifo_out_first, main_uart_rx_fifo_fifo_out_payload_data} = main_uart_rx_fifo_syncfifo_dout;
assign main_uart_rx_fifo_sink_ready = main_uart_rx_fifo_syncfifo_writable;
assign main_uart_rx_fifo_syncfifo_we = main_uart_rx_fifo_sink_valid;
assign main_uart_rx_fifo_fifo_in_first = main_uart_rx_fifo_sink_first;
assign main_uart_rx_fifo_fifo_in_last = main_uart_rx_fifo_sink_last;
assign main_uart_rx_fifo_fifo_in_payload_data = main_uart_rx_fifo_sink_payload_data;
assign main_uart_rx_fifo_source_valid = main_uart_rx_fifo_readable;
assign main_uart_rx_fifo_source_first = main_uart_rx_fifo_fifo_out_first;
assign main_uart_rx_fifo_source_last = main_uart_rx_fifo_fifo_out_last;
assign main_uart_rx_fifo_source_payload_data = main_uart_rx_fifo_fifo_out_payload_data;
assign main_uart_rx_fifo_re = main_uart_rx_fifo_source_ready;
assign main_uart_rx_fifo_syncfifo_re = (main_uart_rx_fifo_syncfifo_readable & ((~main_uart_rx_fifo_readable) | main_uart_rx_fifo_re));
assign main_uart_rx_fifo_level1 = (main_uart_rx_fifo_level0 + main_uart_rx_fifo_readable);
always @(*) begin
    main_uart_rx_fifo_wrport_adr <= 4'd0;
    if (main_uart_rx_fifo_replace) begin
        main_uart_rx_fifo_wrport_adr <= (main_uart_rx_fifo_produce - 1'd1);
    end else begin
        main_uart_rx_fifo_wrport_adr <= main_uart_rx_fifo_produce;
    end
end
assign main_uart_rx_fifo_wrport_dat_w = main_uart_rx_fifo_syncfifo_din;
assign main_uart_rx_fifo_wrport_we = (main_uart_rx_fifo_syncfifo_we & (main_uart_rx_fifo_syncfifo_writable | main_uart_rx_fifo_replace));
assign main_uart_rx_fifo_do_read = (main_uart_rx_fifo_syncfifo_readable & main_uart_rx_fifo_syncfifo_re);
assign main_uart_rx_fifo_rdport_adr = main_uart_rx_fifo_consume;
assign main_uart_rx_fifo_syncfifo_dout = main_uart_rx_fifo_rdport_dat_r;
assign main_uart_rx_fifo_rdport_re = main_uart_rx_fifo_do_read;
assign main_uart_rx_fifo_syncfifo_writable = (main_uart_rx_fifo_level0 != 5'd16);
assign main_uart_rx_fifo_syncfifo_readable = (main_uart_rx_fifo_level0 != 1'd0);
assign main_reset = (rst | main_rst);
assign pll_locked = main_locked;
assign main_clkin = clk;
assign iodelay_clk = main_clkout_buf0;
assign sys_clk = main_clkout_buf1;
assign sys4x_clk = main_clkout_buf2;
assign sys4x_dqs_clk = main_clkout_buf3;
assign ddram_ba = main_a7ddrphy_pads_ba;
assign main_a7ddrphy_dqs_oe_delay_tappeddelayline = ((main_a7ddrphy_dqs_preamble | main_a7ddrphy_dqs_oe) | main_a7ddrphy_dqs_postamble);
assign main_a7ddrphy_dq_oe_delay_tappeddelayline = ((main_a7ddrphy_dqs_preamble | main_a7ddrphy_dq_oe) | main_a7ddrphy_dqs_postamble);
always @(*) begin
    main_a7ddrphy_dfi_p0_rddata <= 32'd0;
    main_a7ddrphy_dfi_p0_rddata[0] <= main_a7ddrphy_bitslip04[0];
    main_a7ddrphy_dfi_p0_rddata[16] <= main_a7ddrphy_bitslip04[1];
    main_a7ddrphy_dfi_p0_rddata[1] <= main_a7ddrphy_bitslip14[0];
    main_a7ddrphy_dfi_p0_rddata[17] <= main_a7ddrphy_bitslip14[1];
    main_a7ddrphy_dfi_p0_rddata[2] <= main_a7ddrphy_bitslip22[0];
    main_a7ddrphy_dfi_p0_rddata[18] <= main_a7ddrphy_bitslip22[1];
    main_a7ddrphy_dfi_p0_rddata[3] <= main_a7ddrphy_bitslip32[0];
    main_a7ddrphy_dfi_p0_rddata[19] <= main_a7ddrphy_bitslip32[1];
    main_a7ddrphy_dfi_p0_rddata[4] <= main_a7ddrphy_bitslip42[0];
    main_a7ddrphy_dfi_p0_rddata[20] <= main_a7ddrphy_bitslip42[1];
    main_a7ddrphy_dfi_p0_rddata[5] <= main_a7ddrphy_bitslip52[0];
    main_a7ddrphy_dfi_p0_rddata[21] <= main_a7ddrphy_bitslip52[1];
    main_a7ddrphy_dfi_p0_rddata[6] <= main_a7ddrphy_bitslip62[0];
    main_a7ddrphy_dfi_p0_rddata[22] <= main_a7ddrphy_bitslip62[1];
    main_a7ddrphy_dfi_p0_rddata[7] <= main_a7ddrphy_bitslip72[0];
    main_a7ddrphy_dfi_p0_rddata[23] <= main_a7ddrphy_bitslip72[1];
    main_a7ddrphy_dfi_p0_rddata[8] <= main_a7ddrphy_bitslip82[0];
    main_a7ddrphy_dfi_p0_rddata[24] <= main_a7ddrphy_bitslip82[1];
    main_a7ddrphy_dfi_p0_rddata[9] <= main_a7ddrphy_bitslip92[0];
    main_a7ddrphy_dfi_p0_rddata[25] <= main_a7ddrphy_bitslip92[1];
    main_a7ddrphy_dfi_p0_rddata[10] <= main_a7ddrphy_bitslip102[0];
    main_a7ddrphy_dfi_p0_rddata[26] <= main_a7ddrphy_bitslip102[1];
    main_a7ddrphy_dfi_p0_rddata[11] <= main_a7ddrphy_bitslip112[0];
    main_a7ddrphy_dfi_p0_rddata[27] <= main_a7ddrphy_bitslip112[1];
    main_a7ddrphy_dfi_p0_rddata[12] <= main_a7ddrphy_bitslip122[0];
    main_a7ddrphy_dfi_p0_rddata[28] <= main_a7ddrphy_bitslip122[1];
    main_a7ddrphy_dfi_p0_rddata[13] <= main_a7ddrphy_bitslip132[0];
    main_a7ddrphy_dfi_p0_rddata[29] <= main_a7ddrphy_bitslip132[1];
    main_a7ddrphy_dfi_p0_rddata[14] <= main_a7ddrphy_bitslip142[0];
    main_a7ddrphy_dfi_p0_rddata[30] <= main_a7ddrphy_bitslip142[1];
    main_a7ddrphy_dfi_p0_rddata[15] <= main_a7ddrphy_bitslip152[0];
    main_a7ddrphy_dfi_p0_rddata[31] <= main_a7ddrphy_bitslip152[1];
end
always @(*) begin
    main_a7ddrphy_dfi_p1_rddata <= 32'd0;
    main_a7ddrphy_dfi_p1_rddata[0] <= main_a7ddrphy_bitslip04[2];
    main_a7ddrphy_dfi_p1_rddata[16] <= main_a7ddrphy_bitslip04[3];
    main_a7ddrphy_dfi_p1_rddata[1] <= main_a7ddrphy_bitslip14[2];
    main_a7ddrphy_dfi_p1_rddata[17] <= main_a7ddrphy_bitslip14[3];
    main_a7ddrphy_dfi_p1_rddata[2] <= main_a7ddrphy_bitslip22[2];
    main_a7ddrphy_dfi_p1_rddata[18] <= main_a7ddrphy_bitslip22[3];
    main_a7ddrphy_dfi_p1_rddata[3] <= main_a7ddrphy_bitslip32[2];
    main_a7ddrphy_dfi_p1_rddata[19] <= main_a7ddrphy_bitslip32[3];
    main_a7ddrphy_dfi_p1_rddata[4] <= main_a7ddrphy_bitslip42[2];
    main_a7ddrphy_dfi_p1_rddata[20] <= main_a7ddrphy_bitslip42[3];
    main_a7ddrphy_dfi_p1_rddata[5] <= main_a7ddrphy_bitslip52[2];
    main_a7ddrphy_dfi_p1_rddata[21] <= main_a7ddrphy_bitslip52[3];
    main_a7ddrphy_dfi_p1_rddata[6] <= main_a7ddrphy_bitslip62[2];
    main_a7ddrphy_dfi_p1_rddata[22] <= main_a7ddrphy_bitslip62[3];
    main_a7ddrphy_dfi_p1_rddata[7] <= main_a7ddrphy_bitslip72[2];
    main_a7ddrphy_dfi_p1_rddata[23] <= main_a7ddrphy_bitslip72[3];
    main_a7ddrphy_dfi_p1_rddata[8] <= main_a7ddrphy_bitslip82[2];
    main_a7ddrphy_dfi_p1_rddata[24] <= main_a7ddrphy_bitslip82[3];
    main_a7ddrphy_dfi_p1_rddata[9] <= main_a7ddrphy_bitslip92[2];
    main_a7ddrphy_dfi_p1_rddata[25] <= main_a7ddrphy_bitslip92[3];
    main_a7ddrphy_dfi_p1_rddata[10] <= main_a7ddrphy_bitslip102[2];
    main_a7ddrphy_dfi_p1_rddata[26] <= main_a7ddrphy_bitslip102[3];
    main_a7ddrphy_dfi_p1_rddata[11] <= main_a7ddrphy_bitslip112[2];
    main_a7ddrphy_dfi_p1_rddata[27] <= main_a7ddrphy_bitslip112[3];
    main_a7ddrphy_dfi_p1_rddata[12] <= main_a7ddrphy_bitslip122[2];
    main_a7ddrphy_dfi_p1_rddata[28] <= main_a7ddrphy_bitslip122[3];
    main_a7ddrphy_dfi_p1_rddata[13] <= main_a7ddrphy_bitslip132[2];
    main_a7ddrphy_dfi_p1_rddata[29] <= main_a7ddrphy_bitslip132[3];
    main_a7ddrphy_dfi_p1_rddata[14] <= main_a7ddrphy_bitslip142[2];
    main_a7ddrphy_dfi_p1_rddata[30] <= main_a7ddrphy_bitslip142[3];
    main_a7ddrphy_dfi_p1_rddata[15] <= main_a7ddrphy_bitslip152[2];
    main_a7ddrphy_dfi_p1_rddata[31] <= main_a7ddrphy_bitslip152[3];
end
always @(*) begin
    main_a7ddrphy_dfi_p2_rddata <= 32'd0;
    main_a7ddrphy_dfi_p2_rddata[0] <= main_a7ddrphy_bitslip04[4];
    main_a7ddrphy_dfi_p2_rddata[16] <= main_a7ddrphy_bitslip04[5];
    main_a7ddrphy_dfi_p2_rddata[1] <= main_a7ddrphy_bitslip14[4];
    main_a7ddrphy_dfi_p2_rddata[17] <= main_a7ddrphy_bitslip14[5];
    main_a7ddrphy_dfi_p2_rddata[2] <= main_a7ddrphy_bitslip22[4];
    main_a7ddrphy_dfi_p2_rddata[18] <= main_a7ddrphy_bitslip22[5];
    main_a7ddrphy_dfi_p2_rddata[3] <= main_a7ddrphy_bitslip32[4];
    main_a7ddrphy_dfi_p2_rddata[19] <= main_a7ddrphy_bitslip32[5];
    main_a7ddrphy_dfi_p2_rddata[4] <= main_a7ddrphy_bitslip42[4];
    main_a7ddrphy_dfi_p2_rddata[20] <= main_a7ddrphy_bitslip42[5];
    main_a7ddrphy_dfi_p2_rddata[5] <= main_a7ddrphy_bitslip52[4];
    main_a7ddrphy_dfi_p2_rddata[21] <= main_a7ddrphy_bitslip52[5];
    main_a7ddrphy_dfi_p2_rddata[6] <= main_a7ddrphy_bitslip62[4];
    main_a7ddrphy_dfi_p2_rddata[22] <= main_a7ddrphy_bitslip62[5];
    main_a7ddrphy_dfi_p2_rddata[7] <= main_a7ddrphy_bitslip72[4];
    main_a7ddrphy_dfi_p2_rddata[23] <= main_a7ddrphy_bitslip72[5];
    main_a7ddrphy_dfi_p2_rddata[8] <= main_a7ddrphy_bitslip82[4];
    main_a7ddrphy_dfi_p2_rddata[24] <= main_a7ddrphy_bitslip82[5];
    main_a7ddrphy_dfi_p2_rddata[9] <= main_a7ddrphy_bitslip92[4];
    main_a7ddrphy_dfi_p2_rddata[25] <= main_a7ddrphy_bitslip92[5];
    main_a7ddrphy_dfi_p2_rddata[10] <= main_a7ddrphy_bitslip102[4];
    main_a7ddrphy_dfi_p2_rddata[26] <= main_a7ddrphy_bitslip102[5];
    main_a7ddrphy_dfi_p2_rddata[11] <= main_a7ddrphy_bitslip112[4];
    main_a7ddrphy_dfi_p2_rddata[27] <= main_a7ddrphy_bitslip112[5];
    main_a7ddrphy_dfi_p2_rddata[12] <= main_a7ddrphy_bitslip122[4];
    main_a7ddrphy_dfi_p2_rddata[28] <= main_a7ddrphy_bitslip122[5];
    main_a7ddrphy_dfi_p2_rddata[13] <= main_a7ddrphy_bitslip132[4];
    main_a7ddrphy_dfi_p2_rddata[29] <= main_a7ddrphy_bitslip132[5];
    main_a7ddrphy_dfi_p2_rddata[14] <= main_a7ddrphy_bitslip142[4];
    main_a7ddrphy_dfi_p2_rddata[30] <= main_a7ddrphy_bitslip142[5];
    main_a7ddrphy_dfi_p2_rddata[15] <= main_a7ddrphy_bitslip152[4];
    main_a7ddrphy_dfi_p2_rddata[31] <= main_a7ddrphy_bitslip152[5];
end
always @(*) begin
    main_a7ddrphy_dfi_p3_rddata <= 32'd0;
    main_a7ddrphy_dfi_p3_rddata[0] <= main_a7ddrphy_bitslip04[6];
    main_a7ddrphy_dfi_p3_rddata[16] <= main_a7ddrphy_bitslip04[7];
    main_a7ddrphy_dfi_p3_rddata[1] <= main_a7ddrphy_bitslip14[6];
    main_a7ddrphy_dfi_p3_rddata[17] <= main_a7ddrphy_bitslip14[7];
    main_a7ddrphy_dfi_p3_rddata[2] <= main_a7ddrphy_bitslip22[6];
    main_a7ddrphy_dfi_p3_rddata[18] <= main_a7ddrphy_bitslip22[7];
    main_a7ddrphy_dfi_p3_rddata[3] <= main_a7ddrphy_bitslip32[6];
    main_a7ddrphy_dfi_p3_rddata[19] <= main_a7ddrphy_bitslip32[7];
    main_a7ddrphy_dfi_p3_rddata[4] <= main_a7ddrphy_bitslip42[6];
    main_a7ddrphy_dfi_p3_rddata[20] <= main_a7ddrphy_bitslip42[7];
    main_a7ddrphy_dfi_p3_rddata[5] <= main_a7ddrphy_bitslip52[6];
    main_a7ddrphy_dfi_p3_rddata[21] <= main_a7ddrphy_bitslip52[7];
    main_a7ddrphy_dfi_p3_rddata[6] <= main_a7ddrphy_bitslip62[6];
    main_a7ddrphy_dfi_p3_rddata[22] <= main_a7ddrphy_bitslip62[7];
    main_a7ddrphy_dfi_p3_rddata[7] <= main_a7ddrphy_bitslip72[6];
    main_a7ddrphy_dfi_p3_rddata[23] <= main_a7ddrphy_bitslip72[7];
    main_a7ddrphy_dfi_p3_rddata[8] <= main_a7ddrphy_bitslip82[6];
    main_a7ddrphy_dfi_p3_rddata[24] <= main_a7ddrphy_bitslip82[7];
    main_a7ddrphy_dfi_p3_rddata[9] <= main_a7ddrphy_bitslip92[6];
    main_a7ddrphy_dfi_p3_rddata[25] <= main_a7ddrphy_bitslip92[7];
    main_a7ddrphy_dfi_p3_rddata[10] <= main_a7ddrphy_bitslip102[6];
    main_a7ddrphy_dfi_p3_rddata[26] <= main_a7ddrphy_bitslip102[7];
    main_a7ddrphy_dfi_p3_rddata[11] <= main_a7ddrphy_bitslip112[6];
    main_a7ddrphy_dfi_p3_rddata[27] <= main_a7ddrphy_bitslip112[7];
    main_a7ddrphy_dfi_p3_rddata[12] <= main_a7ddrphy_bitslip122[6];
    main_a7ddrphy_dfi_p3_rddata[28] <= main_a7ddrphy_bitslip122[7];
    main_a7ddrphy_dfi_p3_rddata[13] <= main_a7ddrphy_bitslip132[6];
    main_a7ddrphy_dfi_p3_rddata[29] <= main_a7ddrphy_bitslip132[7];
    main_a7ddrphy_dfi_p3_rddata[14] <= main_a7ddrphy_bitslip142[6];
    main_a7ddrphy_dfi_p3_rddata[30] <= main_a7ddrphy_bitslip142[7];
    main_a7ddrphy_dfi_p3_rddata[15] <= main_a7ddrphy_bitslip152[6];
    main_a7ddrphy_dfi_p3_rddata[31] <= main_a7ddrphy_bitslip152[7];
end
assign main_a7ddrphy_dfi_p0_rddata_valid = (main_a7ddrphy_rddata_en_tappeddelayline7 | main_a7ddrphy_wlevel_en_storage);
assign main_a7ddrphy_dfi_p1_rddata_valid = (main_a7ddrphy_rddata_en_tappeddelayline7 | main_a7ddrphy_wlevel_en_storage);
assign main_a7ddrphy_dfi_p2_rddata_valid = (main_a7ddrphy_rddata_en_tappeddelayline7 | main_a7ddrphy_wlevel_en_storage);
assign main_a7ddrphy_dfi_p3_rddata_valid = (main_a7ddrphy_rddata_en_tappeddelayline7 | main_a7ddrphy_wlevel_en_storage);
assign main_a7ddrphy_dq_oe = main_a7ddrphy_wrdata_en_tappeddelayline1;
always @(*) begin
    main_a7ddrphy_dqs_oe <= 1'd0;
    if (main_a7ddrphy_wlevel_en_storage) begin
        main_a7ddrphy_dqs_oe <= 1'd1;
    end else begin
        main_a7ddrphy_dqs_oe <= main_a7ddrphy_dq_oe;
    end
end
assign main_a7ddrphy_dqs_preamble = (main_a7ddrphy_wrdata_en_tappeddelayline0 & (~main_a7ddrphy_wrdata_en_tappeddelayline1));
assign main_a7ddrphy_dqs_postamble = (main_a7ddrphy_wrdata_en_tappeddelayline2 & (~main_a7ddrphy_wrdata_en_tappeddelayline1));
always @(*) begin
    main_a7ddrphy_dqspattern_o0 <= 8'd0;
    main_a7ddrphy_dqspattern_o0 <= 7'd85;
    if (main_a7ddrphy_dqspattern0) begin
        main_a7ddrphy_dqspattern_o0 <= 5'd21;
    end
    if (main_a7ddrphy_dqspattern1) begin
        main_a7ddrphy_dqspattern_o0 <= 7'd84;
    end
    if (main_a7ddrphy_wlevel_en_storage) begin
        main_a7ddrphy_dqspattern_o0 <= 1'd0;
        if (main_a7ddrphy_wlevel_strobe_re) begin
            main_a7ddrphy_dqspattern_o0 <= 1'd1;
        end
    end
end
always @(*) begin
    main_a7ddrphy_bitslip00 <= 8'd0;
    case (main_a7ddrphy_bitslip0_value0)
        1'd0: begin
            main_a7ddrphy_bitslip00 <= main_a7ddrphy_bitslip0_r0[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip00 <= main_a7ddrphy_bitslip0_r0[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip00 <= main_a7ddrphy_bitslip0_r0[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip00 <= main_a7ddrphy_bitslip0_r0[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip00 <= main_a7ddrphy_bitslip0_r0[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip00 <= main_a7ddrphy_bitslip0_r0[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip00 <= main_a7ddrphy_bitslip0_r0[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip00 <= main_a7ddrphy_bitslip0_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip10 <= 8'd0;
    case (main_a7ddrphy_bitslip1_value0)
        1'd0: begin
            main_a7ddrphy_bitslip10 <= main_a7ddrphy_bitslip1_r0[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip10 <= main_a7ddrphy_bitslip1_r0[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip10 <= main_a7ddrphy_bitslip1_r0[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip10 <= main_a7ddrphy_bitslip1_r0[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip10 <= main_a7ddrphy_bitslip1_r0[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip10 <= main_a7ddrphy_bitslip1_r0[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip10 <= main_a7ddrphy_bitslip1_r0[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip10 <= main_a7ddrphy_bitslip1_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip01 <= 8'd0;
    case (main_a7ddrphy_bitslip0_value1)
        1'd0: begin
            main_a7ddrphy_bitslip01 <= main_a7ddrphy_bitslip0_r1[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip01 <= main_a7ddrphy_bitslip0_r1[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip01 <= main_a7ddrphy_bitslip0_r1[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip01 <= main_a7ddrphy_bitslip0_r1[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip01 <= main_a7ddrphy_bitslip0_r1[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip01 <= main_a7ddrphy_bitslip0_r1[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip01 <= main_a7ddrphy_bitslip0_r1[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip01 <= main_a7ddrphy_bitslip0_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip11 <= 8'd0;
    case (main_a7ddrphy_bitslip1_value1)
        1'd0: begin
            main_a7ddrphy_bitslip11 <= main_a7ddrphy_bitslip1_r1[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip11 <= main_a7ddrphy_bitslip1_r1[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip11 <= main_a7ddrphy_bitslip1_r1[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip11 <= main_a7ddrphy_bitslip1_r1[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip11 <= main_a7ddrphy_bitslip1_r1[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip11 <= main_a7ddrphy_bitslip1_r1[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip11 <= main_a7ddrphy_bitslip1_r1[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip11 <= main_a7ddrphy_bitslip1_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip02 <= 8'd0;
    case (main_a7ddrphy_bitslip0_value2)
        1'd0: begin
            main_a7ddrphy_bitslip02 <= main_a7ddrphy_bitslip0_r2[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip02 <= main_a7ddrphy_bitslip0_r2[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip02 <= main_a7ddrphy_bitslip0_r2[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip02 <= main_a7ddrphy_bitslip0_r2[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip02 <= main_a7ddrphy_bitslip0_r2[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip02 <= main_a7ddrphy_bitslip0_r2[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip02 <= main_a7ddrphy_bitslip0_r2[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip02 <= main_a7ddrphy_bitslip0_r2[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip04 <= 8'd0;
    case (main_a7ddrphy_bitslip0_value3)
        1'd0: begin
            main_a7ddrphy_bitslip04 <= main_a7ddrphy_bitslip0_r3[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip04 <= main_a7ddrphy_bitslip0_r3[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip04 <= main_a7ddrphy_bitslip0_r3[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip04 <= main_a7ddrphy_bitslip0_r3[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip04 <= main_a7ddrphy_bitslip0_r3[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip04 <= main_a7ddrphy_bitslip0_r3[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip04 <= main_a7ddrphy_bitslip0_r3[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip04 <= main_a7ddrphy_bitslip0_r3[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip12 <= 8'd0;
    case (main_a7ddrphy_bitslip1_value2)
        1'd0: begin
            main_a7ddrphy_bitslip12 <= main_a7ddrphy_bitslip1_r2[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip12 <= main_a7ddrphy_bitslip1_r2[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip12 <= main_a7ddrphy_bitslip1_r2[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip12 <= main_a7ddrphy_bitslip1_r2[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip12 <= main_a7ddrphy_bitslip1_r2[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip12 <= main_a7ddrphy_bitslip1_r2[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip12 <= main_a7ddrphy_bitslip1_r2[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip12 <= main_a7ddrphy_bitslip1_r2[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip14 <= 8'd0;
    case (main_a7ddrphy_bitslip1_value3)
        1'd0: begin
            main_a7ddrphy_bitslip14 <= main_a7ddrphy_bitslip1_r3[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip14 <= main_a7ddrphy_bitslip1_r3[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip14 <= main_a7ddrphy_bitslip1_r3[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip14 <= main_a7ddrphy_bitslip1_r3[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip14 <= main_a7ddrphy_bitslip1_r3[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip14 <= main_a7ddrphy_bitslip1_r3[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip14 <= main_a7ddrphy_bitslip1_r3[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip14 <= main_a7ddrphy_bitslip1_r3[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip20 <= 8'd0;
    case (main_a7ddrphy_bitslip2_value0)
        1'd0: begin
            main_a7ddrphy_bitslip20 <= main_a7ddrphy_bitslip2_r0[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip20 <= main_a7ddrphy_bitslip2_r0[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip20 <= main_a7ddrphy_bitslip2_r0[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip20 <= main_a7ddrphy_bitslip2_r0[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip20 <= main_a7ddrphy_bitslip2_r0[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip20 <= main_a7ddrphy_bitslip2_r0[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip20 <= main_a7ddrphy_bitslip2_r0[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip20 <= main_a7ddrphy_bitslip2_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip22 <= 8'd0;
    case (main_a7ddrphy_bitslip2_value1)
        1'd0: begin
            main_a7ddrphy_bitslip22 <= main_a7ddrphy_bitslip2_r1[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip22 <= main_a7ddrphy_bitslip2_r1[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip22 <= main_a7ddrphy_bitslip2_r1[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip22 <= main_a7ddrphy_bitslip2_r1[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip22 <= main_a7ddrphy_bitslip2_r1[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip22 <= main_a7ddrphy_bitslip2_r1[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip22 <= main_a7ddrphy_bitslip2_r1[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip22 <= main_a7ddrphy_bitslip2_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip30 <= 8'd0;
    case (main_a7ddrphy_bitslip3_value0)
        1'd0: begin
            main_a7ddrphy_bitslip30 <= main_a7ddrphy_bitslip3_r0[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip30 <= main_a7ddrphy_bitslip3_r0[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip30 <= main_a7ddrphy_bitslip3_r0[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip30 <= main_a7ddrphy_bitslip3_r0[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip30 <= main_a7ddrphy_bitslip3_r0[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip30 <= main_a7ddrphy_bitslip3_r0[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip30 <= main_a7ddrphy_bitslip3_r0[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip30 <= main_a7ddrphy_bitslip3_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip32 <= 8'd0;
    case (main_a7ddrphy_bitslip3_value1)
        1'd0: begin
            main_a7ddrphy_bitslip32 <= main_a7ddrphy_bitslip3_r1[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip32 <= main_a7ddrphy_bitslip3_r1[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip32 <= main_a7ddrphy_bitslip3_r1[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip32 <= main_a7ddrphy_bitslip3_r1[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip32 <= main_a7ddrphy_bitslip3_r1[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip32 <= main_a7ddrphy_bitslip3_r1[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip32 <= main_a7ddrphy_bitslip3_r1[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip32 <= main_a7ddrphy_bitslip3_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip40 <= 8'd0;
    case (main_a7ddrphy_bitslip4_value0)
        1'd0: begin
            main_a7ddrphy_bitslip40 <= main_a7ddrphy_bitslip4_r0[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip40 <= main_a7ddrphy_bitslip4_r0[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip40 <= main_a7ddrphy_bitslip4_r0[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip40 <= main_a7ddrphy_bitslip4_r0[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip40 <= main_a7ddrphy_bitslip4_r0[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip40 <= main_a7ddrphy_bitslip4_r0[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip40 <= main_a7ddrphy_bitslip4_r0[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip40 <= main_a7ddrphy_bitslip4_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip42 <= 8'd0;
    case (main_a7ddrphy_bitslip4_value1)
        1'd0: begin
            main_a7ddrphy_bitslip42 <= main_a7ddrphy_bitslip4_r1[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip42 <= main_a7ddrphy_bitslip4_r1[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip42 <= main_a7ddrphy_bitslip4_r1[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip42 <= main_a7ddrphy_bitslip4_r1[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip42 <= main_a7ddrphy_bitslip4_r1[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip42 <= main_a7ddrphy_bitslip4_r1[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip42 <= main_a7ddrphy_bitslip4_r1[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip42 <= main_a7ddrphy_bitslip4_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip50 <= 8'd0;
    case (main_a7ddrphy_bitslip5_value0)
        1'd0: begin
            main_a7ddrphy_bitslip50 <= main_a7ddrphy_bitslip5_r0[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip50 <= main_a7ddrphy_bitslip5_r0[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip50 <= main_a7ddrphy_bitslip5_r0[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip50 <= main_a7ddrphy_bitslip5_r0[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip50 <= main_a7ddrphy_bitslip5_r0[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip50 <= main_a7ddrphy_bitslip5_r0[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip50 <= main_a7ddrphy_bitslip5_r0[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip50 <= main_a7ddrphy_bitslip5_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip52 <= 8'd0;
    case (main_a7ddrphy_bitslip5_value1)
        1'd0: begin
            main_a7ddrphy_bitslip52 <= main_a7ddrphy_bitslip5_r1[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip52 <= main_a7ddrphy_bitslip5_r1[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip52 <= main_a7ddrphy_bitslip5_r1[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip52 <= main_a7ddrphy_bitslip5_r1[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip52 <= main_a7ddrphy_bitslip5_r1[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip52 <= main_a7ddrphy_bitslip5_r1[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip52 <= main_a7ddrphy_bitslip5_r1[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip52 <= main_a7ddrphy_bitslip5_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip60 <= 8'd0;
    case (main_a7ddrphy_bitslip6_value0)
        1'd0: begin
            main_a7ddrphy_bitslip60 <= main_a7ddrphy_bitslip6_r0[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip60 <= main_a7ddrphy_bitslip6_r0[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip60 <= main_a7ddrphy_bitslip6_r0[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip60 <= main_a7ddrphy_bitslip6_r0[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip60 <= main_a7ddrphy_bitslip6_r0[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip60 <= main_a7ddrphy_bitslip6_r0[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip60 <= main_a7ddrphy_bitslip6_r0[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip60 <= main_a7ddrphy_bitslip6_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip62 <= 8'd0;
    case (main_a7ddrphy_bitslip6_value1)
        1'd0: begin
            main_a7ddrphy_bitslip62 <= main_a7ddrphy_bitslip6_r1[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip62 <= main_a7ddrphy_bitslip6_r1[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip62 <= main_a7ddrphy_bitslip6_r1[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip62 <= main_a7ddrphy_bitslip6_r1[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip62 <= main_a7ddrphy_bitslip6_r1[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip62 <= main_a7ddrphy_bitslip6_r1[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip62 <= main_a7ddrphy_bitslip6_r1[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip62 <= main_a7ddrphy_bitslip6_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip70 <= 8'd0;
    case (main_a7ddrphy_bitslip7_value0)
        1'd0: begin
            main_a7ddrphy_bitslip70 <= main_a7ddrphy_bitslip7_r0[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip70 <= main_a7ddrphy_bitslip7_r0[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip70 <= main_a7ddrphy_bitslip7_r0[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip70 <= main_a7ddrphy_bitslip7_r0[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip70 <= main_a7ddrphy_bitslip7_r0[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip70 <= main_a7ddrphy_bitslip7_r0[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip70 <= main_a7ddrphy_bitslip7_r0[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip70 <= main_a7ddrphy_bitslip7_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip72 <= 8'd0;
    case (main_a7ddrphy_bitslip7_value1)
        1'd0: begin
            main_a7ddrphy_bitslip72 <= main_a7ddrphy_bitslip7_r1[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip72 <= main_a7ddrphy_bitslip7_r1[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip72 <= main_a7ddrphy_bitslip7_r1[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip72 <= main_a7ddrphy_bitslip7_r1[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip72 <= main_a7ddrphy_bitslip7_r1[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip72 <= main_a7ddrphy_bitslip7_r1[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip72 <= main_a7ddrphy_bitslip7_r1[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip72 <= main_a7ddrphy_bitslip7_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip80 <= 8'd0;
    case (main_a7ddrphy_bitslip8_value0)
        1'd0: begin
            main_a7ddrphy_bitslip80 <= main_a7ddrphy_bitslip8_r0[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip80 <= main_a7ddrphy_bitslip8_r0[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip80 <= main_a7ddrphy_bitslip8_r0[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip80 <= main_a7ddrphy_bitslip8_r0[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip80 <= main_a7ddrphy_bitslip8_r0[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip80 <= main_a7ddrphy_bitslip8_r0[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip80 <= main_a7ddrphy_bitslip8_r0[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip80 <= main_a7ddrphy_bitslip8_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip82 <= 8'd0;
    case (main_a7ddrphy_bitslip8_value1)
        1'd0: begin
            main_a7ddrphy_bitslip82 <= main_a7ddrphy_bitslip8_r1[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip82 <= main_a7ddrphy_bitslip8_r1[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip82 <= main_a7ddrphy_bitslip8_r1[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip82 <= main_a7ddrphy_bitslip8_r1[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip82 <= main_a7ddrphy_bitslip8_r1[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip82 <= main_a7ddrphy_bitslip8_r1[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip82 <= main_a7ddrphy_bitslip8_r1[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip82 <= main_a7ddrphy_bitslip8_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip90 <= 8'd0;
    case (main_a7ddrphy_bitslip9_value0)
        1'd0: begin
            main_a7ddrphy_bitslip90 <= main_a7ddrphy_bitslip9_r0[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip90 <= main_a7ddrphy_bitslip9_r0[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip90 <= main_a7ddrphy_bitslip9_r0[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip90 <= main_a7ddrphy_bitslip9_r0[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip90 <= main_a7ddrphy_bitslip9_r0[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip90 <= main_a7ddrphy_bitslip9_r0[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip90 <= main_a7ddrphy_bitslip9_r0[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip90 <= main_a7ddrphy_bitslip9_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip92 <= 8'd0;
    case (main_a7ddrphy_bitslip9_value1)
        1'd0: begin
            main_a7ddrphy_bitslip92 <= main_a7ddrphy_bitslip9_r1[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip92 <= main_a7ddrphy_bitslip9_r1[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip92 <= main_a7ddrphy_bitslip9_r1[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip92 <= main_a7ddrphy_bitslip9_r1[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip92 <= main_a7ddrphy_bitslip9_r1[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip92 <= main_a7ddrphy_bitslip9_r1[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip92 <= main_a7ddrphy_bitslip9_r1[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip92 <= main_a7ddrphy_bitslip9_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip100 <= 8'd0;
    case (main_a7ddrphy_bitslip10_value0)
        1'd0: begin
            main_a7ddrphy_bitslip100 <= main_a7ddrphy_bitslip10_r0[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip100 <= main_a7ddrphy_bitslip10_r0[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip100 <= main_a7ddrphy_bitslip10_r0[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip100 <= main_a7ddrphy_bitslip10_r0[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip100 <= main_a7ddrphy_bitslip10_r0[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip100 <= main_a7ddrphy_bitslip10_r0[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip100 <= main_a7ddrphy_bitslip10_r0[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip100 <= main_a7ddrphy_bitslip10_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip102 <= 8'd0;
    case (main_a7ddrphy_bitslip10_value1)
        1'd0: begin
            main_a7ddrphy_bitslip102 <= main_a7ddrphy_bitslip10_r1[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip102 <= main_a7ddrphy_bitslip10_r1[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip102 <= main_a7ddrphy_bitslip10_r1[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip102 <= main_a7ddrphy_bitslip10_r1[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip102 <= main_a7ddrphy_bitslip10_r1[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip102 <= main_a7ddrphy_bitslip10_r1[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip102 <= main_a7ddrphy_bitslip10_r1[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip102 <= main_a7ddrphy_bitslip10_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip110 <= 8'd0;
    case (main_a7ddrphy_bitslip11_value0)
        1'd0: begin
            main_a7ddrphy_bitslip110 <= main_a7ddrphy_bitslip11_r0[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip110 <= main_a7ddrphy_bitslip11_r0[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip110 <= main_a7ddrphy_bitslip11_r0[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip110 <= main_a7ddrphy_bitslip11_r0[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip110 <= main_a7ddrphy_bitslip11_r0[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip110 <= main_a7ddrphy_bitslip11_r0[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip110 <= main_a7ddrphy_bitslip11_r0[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip110 <= main_a7ddrphy_bitslip11_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip112 <= 8'd0;
    case (main_a7ddrphy_bitslip11_value1)
        1'd0: begin
            main_a7ddrphy_bitslip112 <= main_a7ddrphy_bitslip11_r1[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip112 <= main_a7ddrphy_bitslip11_r1[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip112 <= main_a7ddrphy_bitslip11_r1[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip112 <= main_a7ddrphy_bitslip11_r1[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip112 <= main_a7ddrphy_bitslip11_r1[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip112 <= main_a7ddrphy_bitslip11_r1[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip112 <= main_a7ddrphy_bitslip11_r1[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip112 <= main_a7ddrphy_bitslip11_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip120 <= 8'd0;
    case (main_a7ddrphy_bitslip12_value0)
        1'd0: begin
            main_a7ddrphy_bitslip120 <= main_a7ddrphy_bitslip12_r0[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip120 <= main_a7ddrphy_bitslip12_r0[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip120 <= main_a7ddrphy_bitslip12_r0[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip120 <= main_a7ddrphy_bitslip12_r0[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip120 <= main_a7ddrphy_bitslip12_r0[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip120 <= main_a7ddrphy_bitslip12_r0[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip120 <= main_a7ddrphy_bitslip12_r0[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip120 <= main_a7ddrphy_bitslip12_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip122 <= 8'd0;
    case (main_a7ddrphy_bitslip12_value1)
        1'd0: begin
            main_a7ddrphy_bitslip122 <= main_a7ddrphy_bitslip12_r1[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip122 <= main_a7ddrphy_bitslip12_r1[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip122 <= main_a7ddrphy_bitslip12_r1[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip122 <= main_a7ddrphy_bitslip12_r1[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip122 <= main_a7ddrphy_bitslip12_r1[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip122 <= main_a7ddrphy_bitslip12_r1[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip122 <= main_a7ddrphy_bitslip12_r1[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip122 <= main_a7ddrphy_bitslip12_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip130 <= 8'd0;
    case (main_a7ddrphy_bitslip13_value0)
        1'd0: begin
            main_a7ddrphy_bitslip130 <= main_a7ddrphy_bitslip13_r0[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip130 <= main_a7ddrphy_bitslip13_r0[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip130 <= main_a7ddrphy_bitslip13_r0[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip130 <= main_a7ddrphy_bitslip13_r0[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip130 <= main_a7ddrphy_bitslip13_r0[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip130 <= main_a7ddrphy_bitslip13_r0[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip130 <= main_a7ddrphy_bitslip13_r0[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip130 <= main_a7ddrphy_bitslip13_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip132 <= 8'd0;
    case (main_a7ddrphy_bitslip13_value1)
        1'd0: begin
            main_a7ddrphy_bitslip132 <= main_a7ddrphy_bitslip13_r1[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip132 <= main_a7ddrphy_bitslip13_r1[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip132 <= main_a7ddrphy_bitslip13_r1[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip132 <= main_a7ddrphy_bitslip13_r1[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip132 <= main_a7ddrphy_bitslip13_r1[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip132 <= main_a7ddrphy_bitslip13_r1[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip132 <= main_a7ddrphy_bitslip13_r1[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip132 <= main_a7ddrphy_bitslip13_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip140 <= 8'd0;
    case (main_a7ddrphy_bitslip14_value0)
        1'd0: begin
            main_a7ddrphy_bitslip140 <= main_a7ddrphy_bitslip14_r0[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip140 <= main_a7ddrphy_bitslip14_r0[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip140 <= main_a7ddrphy_bitslip14_r0[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip140 <= main_a7ddrphy_bitslip14_r0[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip140 <= main_a7ddrphy_bitslip14_r0[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip140 <= main_a7ddrphy_bitslip14_r0[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip140 <= main_a7ddrphy_bitslip14_r0[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip140 <= main_a7ddrphy_bitslip14_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip142 <= 8'd0;
    case (main_a7ddrphy_bitslip14_value1)
        1'd0: begin
            main_a7ddrphy_bitslip142 <= main_a7ddrphy_bitslip14_r1[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip142 <= main_a7ddrphy_bitslip14_r1[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip142 <= main_a7ddrphy_bitslip14_r1[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip142 <= main_a7ddrphy_bitslip14_r1[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip142 <= main_a7ddrphy_bitslip14_r1[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip142 <= main_a7ddrphy_bitslip14_r1[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip142 <= main_a7ddrphy_bitslip14_r1[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip142 <= main_a7ddrphy_bitslip14_r1[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip150 <= 8'd0;
    case (main_a7ddrphy_bitslip15_value0)
        1'd0: begin
            main_a7ddrphy_bitslip150 <= main_a7ddrphy_bitslip15_r0[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip150 <= main_a7ddrphy_bitslip15_r0[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip150 <= main_a7ddrphy_bitslip15_r0[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip150 <= main_a7ddrphy_bitslip15_r0[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip150 <= main_a7ddrphy_bitslip15_r0[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip150 <= main_a7ddrphy_bitslip15_r0[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip150 <= main_a7ddrphy_bitslip15_r0[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip150 <= main_a7ddrphy_bitslip15_r0[15:8];
        end
    endcase
end
always @(*) begin
    main_a7ddrphy_bitslip152 <= 8'd0;
    case (main_a7ddrphy_bitslip15_value1)
        1'd0: begin
            main_a7ddrphy_bitslip152 <= main_a7ddrphy_bitslip15_r1[8:1];
        end
        1'd1: begin
            main_a7ddrphy_bitslip152 <= main_a7ddrphy_bitslip15_r1[9:2];
        end
        2'd2: begin
            main_a7ddrphy_bitslip152 <= main_a7ddrphy_bitslip15_r1[10:3];
        end
        2'd3: begin
            main_a7ddrphy_bitslip152 <= main_a7ddrphy_bitslip15_r1[11:4];
        end
        3'd4: begin
            main_a7ddrphy_bitslip152 <= main_a7ddrphy_bitslip15_r1[12:5];
        end
        3'd5: begin
            main_a7ddrphy_bitslip152 <= main_a7ddrphy_bitslip15_r1[13:6];
        end
        3'd6: begin
            main_a7ddrphy_bitslip152 <= main_a7ddrphy_bitslip15_r1[14:7];
        end
        3'd7: begin
            main_a7ddrphy_bitslip152 <= main_a7ddrphy_bitslip15_r1[15:8];
        end
    endcase
end
assign main_a7ddrphy_dfi_p0_address = main_litedramcore_sdram_master_p0_address;
assign main_a7ddrphy_dfi_p0_bank = main_litedramcore_sdram_master_p0_bank;
assign main_a7ddrphy_dfi_p0_cas_n = main_litedramcore_sdram_master_p0_cas_n;
assign main_a7ddrphy_dfi_p0_cs_n = main_litedramcore_sdram_master_p0_cs_n;
assign main_a7ddrphy_dfi_p0_ras_n = main_litedramcore_sdram_master_p0_ras_n;
assign main_a7ddrphy_dfi_p0_we_n = main_litedramcore_sdram_master_p0_we_n;
assign main_a7ddrphy_dfi_p0_cke = main_litedramcore_sdram_master_p0_cke;
assign main_a7ddrphy_dfi_p0_odt = main_litedramcore_sdram_master_p0_odt;
assign main_a7ddrphy_dfi_p0_reset_n = main_litedramcore_sdram_master_p0_reset_n;
assign main_a7ddrphy_dfi_p0_act_n = main_litedramcore_sdram_master_p0_act_n;
assign main_a7ddrphy_dfi_p0_wrdata = main_litedramcore_sdram_master_p0_wrdata;
assign main_a7ddrphy_dfi_p0_wrdata_en = main_litedramcore_sdram_master_p0_wrdata_en;
assign main_a7ddrphy_dfi_p0_wrdata_mask = main_litedramcore_sdram_master_p0_wrdata_mask;
assign main_a7ddrphy_dfi_p0_rddata_en = main_litedramcore_sdram_master_p0_rddata_en;
assign main_litedramcore_sdram_master_p0_rddata = main_a7ddrphy_dfi_p0_rddata;
assign main_litedramcore_sdram_master_p0_rddata_valid = main_a7ddrphy_dfi_p0_rddata_valid;
assign main_a7ddrphy_dfi_p1_address = main_litedramcore_sdram_master_p1_address;
assign main_a7ddrphy_dfi_p1_bank = main_litedramcore_sdram_master_p1_bank;
assign main_a7ddrphy_dfi_p1_cas_n = main_litedramcore_sdram_master_p1_cas_n;
assign main_a7ddrphy_dfi_p1_cs_n = main_litedramcore_sdram_master_p1_cs_n;
assign main_a7ddrphy_dfi_p1_ras_n = main_litedramcore_sdram_master_p1_ras_n;
assign main_a7ddrphy_dfi_p1_we_n = main_litedramcore_sdram_master_p1_we_n;
assign main_a7ddrphy_dfi_p1_cke = main_litedramcore_sdram_master_p1_cke;
assign main_a7ddrphy_dfi_p1_odt = main_litedramcore_sdram_master_p1_odt;
assign main_a7ddrphy_dfi_p1_reset_n = main_litedramcore_sdram_master_p1_reset_n;
assign main_a7ddrphy_dfi_p1_act_n = main_litedramcore_sdram_master_p1_act_n;
assign main_a7ddrphy_dfi_p1_wrdata = main_litedramcore_sdram_master_p1_wrdata;
assign main_a7ddrphy_dfi_p1_wrdata_en = main_litedramcore_sdram_master_p1_wrdata_en;
assign main_a7ddrphy_dfi_p1_wrdata_mask = main_litedramcore_sdram_master_p1_wrdata_mask;
assign main_a7ddrphy_dfi_p1_rddata_en = main_litedramcore_sdram_master_p1_rddata_en;
assign main_litedramcore_sdram_master_p1_rddata = main_a7ddrphy_dfi_p1_rddata;
assign main_litedramcore_sdram_master_p1_rddata_valid = main_a7ddrphy_dfi_p1_rddata_valid;
assign main_a7ddrphy_dfi_p2_address = main_litedramcore_sdram_master_p2_address;
assign main_a7ddrphy_dfi_p2_bank = main_litedramcore_sdram_master_p2_bank;
assign main_a7ddrphy_dfi_p2_cas_n = main_litedramcore_sdram_master_p2_cas_n;
assign main_a7ddrphy_dfi_p2_cs_n = main_litedramcore_sdram_master_p2_cs_n;
assign main_a7ddrphy_dfi_p2_ras_n = main_litedramcore_sdram_master_p2_ras_n;
assign main_a7ddrphy_dfi_p2_we_n = main_litedramcore_sdram_master_p2_we_n;
assign main_a7ddrphy_dfi_p2_cke = main_litedramcore_sdram_master_p2_cke;
assign main_a7ddrphy_dfi_p2_odt = main_litedramcore_sdram_master_p2_odt;
assign main_a7ddrphy_dfi_p2_reset_n = main_litedramcore_sdram_master_p2_reset_n;
assign main_a7ddrphy_dfi_p2_act_n = main_litedramcore_sdram_master_p2_act_n;
assign main_a7ddrphy_dfi_p2_wrdata = main_litedramcore_sdram_master_p2_wrdata;
assign main_a7ddrphy_dfi_p2_wrdata_en = main_litedramcore_sdram_master_p2_wrdata_en;
assign main_a7ddrphy_dfi_p2_wrdata_mask = main_litedramcore_sdram_master_p2_wrdata_mask;
assign main_a7ddrphy_dfi_p2_rddata_en = main_litedramcore_sdram_master_p2_rddata_en;
assign main_litedramcore_sdram_master_p2_rddata = main_a7ddrphy_dfi_p2_rddata;
assign main_litedramcore_sdram_master_p2_rddata_valid = main_a7ddrphy_dfi_p2_rddata_valid;
assign main_a7ddrphy_dfi_p3_address = main_litedramcore_sdram_master_p3_address;
assign main_a7ddrphy_dfi_p3_bank = main_litedramcore_sdram_master_p3_bank;
assign main_a7ddrphy_dfi_p3_cas_n = main_litedramcore_sdram_master_p3_cas_n;
assign main_a7ddrphy_dfi_p3_cs_n = main_litedramcore_sdram_master_p3_cs_n;
assign main_a7ddrphy_dfi_p3_ras_n = main_litedramcore_sdram_master_p3_ras_n;
assign main_a7ddrphy_dfi_p3_we_n = main_litedramcore_sdram_master_p3_we_n;
assign main_a7ddrphy_dfi_p3_cke = main_litedramcore_sdram_master_p3_cke;
assign main_a7ddrphy_dfi_p3_odt = main_litedramcore_sdram_master_p3_odt;
assign main_a7ddrphy_dfi_p3_reset_n = main_litedramcore_sdram_master_p3_reset_n;
assign main_a7ddrphy_dfi_p3_act_n = main_litedramcore_sdram_master_p3_act_n;
assign main_a7ddrphy_dfi_p3_wrdata = main_litedramcore_sdram_master_p3_wrdata;
assign main_a7ddrphy_dfi_p3_wrdata_en = main_litedramcore_sdram_master_p3_wrdata_en;
assign main_a7ddrphy_dfi_p3_wrdata_mask = main_litedramcore_sdram_master_p3_wrdata_mask;
assign main_a7ddrphy_dfi_p3_rddata_en = main_litedramcore_sdram_master_p3_rddata_en;
assign main_litedramcore_sdram_master_p3_rddata = main_a7ddrphy_dfi_p3_rddata;
assign main_litedramcore_sdram_master_p3_rddata_valid = main_a7ddrphy_dfi_p3_rddata_valid;
assign main_litedramcore_sdram_slave_p0_address = main_litedramcore_sdram_dfi_p0_address;
assign main_litedramcore_sdram_slave_p0_bank = main_litedramcore_sdram_dfi_p0_bank;
assign main_litedramcore_sdram_slave_p0_cas_n = main_litedramcore_sdram_dfi_p0_cas_n;
assign main_litedramcore_sdram_slave_p0_cs_n = main_litedramcore_sdram_dfi_p0_cs_n;
assign main_litedramcore_sdram_slave_p0_ras_n = main_litedramcore_sdram_dfi_p0_ras_n;
assign main_litedramcore_sdram_slave_p0_we_n = main_litedramcore_sdram_dfi_p0_we_n;
assign main_litedramcore_sdram_slave_p0_cke = main_litedramcore_sdram_dfi_p0_cke;
assign main_litedramcore_sdram_slave_p0_odt = main_litedramcore_sdram_dfi_p0_odt;
assign main_litedramcore_sdram_slave_p0_reset_n = main_litedramcore_sdram_dfi_p0_reset_n;
assign main_litedramcore_sdram_slave_p0_act_n = main_litedramcore_sdram_dfi_p0_act_n;
assign main_litedramcore_sdram_slave_p0_wrdata = main_litedramcore_sdram_dfi_p0_wrdata;
assign main_litedramcore_sdram_slave_p0_wrdata_en = main_litedramcore_sdram_dfi_p0_wrdata_en;
assign main_litedramcore_sdram_slave_p0_wrdata_mask = main_litedramcore_sdram_dfi_p0_wrdata_mask;
assign main_litedramcore_sdram_slave_p0_rddata_en = main_litedramcore_sdram_dfi_p0_rddata_en;
assign main_litedramcore_sdram_dfi_p0_rddata = main_litedramcore_sdram_slave_p0_rddata;
assign main_litedramcore_sdram_dfi_p0_rddata_valid = main_litedramcore_sdram_slave_p0_rddata_valid;
assign main_litedramcore_sdram_slave_p1_address = main_litedramcore_sdram_dfi_p1_address;
assign main_litedramcore_sdram_slave_p1_bank = main_litedramcore_sdram_dfi_p1_bank;
assign main_litedramcore_sdram_slave_p1_cas_n = main_litedramcore_sdram_dfi_p1_cas_n;
assign main_litedramcore_sdram_slave_p1_cs_n = main_litedramcore_sdram_dfi_p1_cs_n;
assign main_litedramcore_sdram_slave_p1_ras_n = main_litedramcore_sdram_dfi_p1_ras_n;
assign main_litedramcore_sdram_slave_p1_we_n = main_litedramcore_sdram_dfi_p1_we_n;
assign main_litedramcore_sdram_slave_p1_cke = main_litedramcore_sdram_dfi_p1_cke;
assign main_litedramcore_sdram_slave_p1_odt = main_litedramcore_sdram_dfi_p1_odt;
assign main_litedramcore_sdram_slave_p1_reset_n = main_litedramcore_sdram_dfi_p1_reset_n;
assign main_litedramcore_sdram_slave_p1_act_n = main_litedramcore_sdram_dfi_p1_act_n;
assign main_litedramcore_sdram_slave_p1_wrdata = main_litedramcore_sdram_dfi_p1_wrdata;
assign main_litedramcore_sdram_slave_p1_wrdata_en = main_litedramcore_sdram_dfi_p1_wrdata_en;
assign main_litedramcore_sdram_slave_p1_wrdata_mask = main_litedramcore_sdram_dfi_p1_wrdata_mask;
assign main_litedramcore_sdram_slave_p1_rddata_en = main_litedramcore_sdram_dfi_p1_rddata_en;
assign main_litedramcore_sdram_dfi_p1_rddata = main_litedramcore_sdram_slave_p1_rddata;
assign main_litedramcore_sdram_dfi_p1_rddata_valid = main_litedramcore_sdram_slave_p1_rddata_valid;
assign main_litedramcore_sdram_slave_p2_address = main_litedramcore_sdram_dfi_p2_address;
assign main_litedramcore_sdram_slave_p2_bank = main_litedramcore_sdram_dfi_p2_bank;
assign main_litedramcore_sdram_slave_p2_cas_n = main_litedramcore_sdram_dfi_p2_cas_n;
assign main_litedramcore_sdram_slave_p2_cs_n = main_litedramcore_sdram_dfi_p2_cs_n;
assign main_litedramcore_sdram_slave_p2_ras_n = main_litedramcore_sdram_dfi_p2_ras_n;
assign main_litedramcore_sdram_slave_p2_we_n = main_litedramcore_sdram_dfi_p2_we_n;
assign main_litedramcore_sdram_slave_p2_cke = main_litedramcore_sdram_dfi_p2_cke;
assign main_litedramcore_sdram_slave_p2_odt = main_litedramcore_sdram_dfi_p2_odt;
assign main_litedramcore_sdram_slave_p2_reset_n = main_litedramcore_sdram_dfi_p2_reset_n;
assign main_litedramcore_sdram_slave_p2_act_n = main_litedramcore_sdram_dfi_p2_act_n;
assign main_litedramcore_sdram_slave_p2_wrdata = main_litedramcore_sdram_dfi_p2_wrdata;
assign main_litedramcore_sdram_slave_p2_wrdata_en = main_litedramcore_sdram_dfi_p2_wrdata_en;
assign main_litedramcore_sdram_slave_p2_wrdata_mask = main_litedramcore_sdram_dfi_p2_wrdata_mask;
assign main_litedramcore_sdram_slave_p2_rddata_en = main_litedramcore_sdram_dfi_p2_rddata_en;
assign main_litedramcore_sdram_dfi_p2_rddata = main_litedramcore_sdram_slave_p2_rddata;
assign main_litedramcore_sdram_dfi_p2_rddata_valid = main_litedramcore_sdram_slave_p2_rddata_valid;
assign main_litedramcore_sdram_slave_p3_address = main_litedramcore_sdram_dfi_p3_address;
assign main_litedramcore_sdram_slave_p3_bank = main_litedramcore_sdram_dfi_p3_bank;
assign main_litedramcore_sdram_slave_p3_cas_n = main_litedramcore_sdram_dfi_p3_cas_n;
assign main_litedramcore_sdram_slave_p3_cs_n = main_litedramcore_sdram_dfi_p3_cs_n;
assign main_litedramcore_sdram_slave_p3_ras_n = main_litedramcore_sdram_dfi_p3_ras_n;
assign main_litedramcore_sdram_slave_p3_we_n = main_litedramcore_sdram_dfi_p3_we_n;
assign main_litedramcore_sdram_slave_p3_cke = main_litedramcore_sdram_dfi_p3_cke;
assign main_litedramcore_sdram_slave_p3_odt = main_litedramcore_sdram_dfi_p3_odt;
assign main_litedramcore_sdram_slave_p3_reset_n = main_litedramcore_sdram_dfi_p3_reset_n;
assign main_litedramcore_sdram_slave_p3_act_n = main_litedramcore_sdram_dfi_p3_act_n;
assign main_litedramcore_sdram_slave_p3_wrdata = main_litedramcore_sdram_dfi_p3_wrdata;
assign main_litedramcore_sdram_slave_p3_wrdata_en = main_litedramcore_sdram_dfi_p3_wrdata_en;
assign main_litedramcore_sdram_slave_p3_wrdata_mask = main_litedramcore_sdram_dfi_p3_wrdata_mask;
assign main_litedramcore_sdram_slave_p3_rddata_en = main_litedramcore_sdram_dfi_p3_rddata_en;
assign main_litedramcore_sdram_dfi_p3_rddata = main_litedramcore_sdram_slave_p3_rddata;
assign main_litedramcore_sdram_dfi_p3_rddata_valid = main_litedramcore_sdram_slave_p3_rddata_valid;
always @(*) begin
    main_litedramcore_sdram_ext_dfi_p3_rddata <= 32'd0;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_ext_dfi_p3_rddata <= main_litedramcore_sdram_master_p3_rddata;
        end else begin
        end
    end else begin
    end
end
always @(*) begin
    main_litedramcore_sdram_ext_dfi_p3_rddata_valid <= 1'd0;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_ext_dfi_p3_rddata_valid <= main_litedramcore_sdram_master_p3_rddata_valid;
        end else begin
        end
    end else begin
    end
end
always @(*) begin
    main_litedramcore_sdram_slave_p1_rddata <= 32'd0;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
        end else begin
            main_litedramcore_sdram_slave_p1_rddata <= main_litedramcore_sdram_master_p1_rddata;
        end
    end else begin
    end
end
always @(*) begin
    main_litedramcore_sdram_slave_p1_rddata_valid <= 1'd0;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
        end else begin
            main_litedramcore_sdram_slave_p1_rddata_valid <= main_litedramcore_sdram_master_p1_rddata_valid;
        end
    end else begin
    end
end
always @(*) begin
    main_litedramcore_sdram_slave_p2_rddata <= 32'd0;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
        end else begin
            main_litedramcore_sdram_slave_p2_rddata <= main_litedramcore_sdram_master_p2_rddata;
        end
    end else begin
    end
end
always @(*) begin
    main_litedramcore_sdram_slave_p2_rddata_valid <= 1'd0;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
        end else begin
            main_litedramcore_sdram_slave_p2_rddata_valid <= main_litedramcore_sdram_master_p2_rddata_valid;
        end
    end else begin
    end
end
always @(*) begin
    main_litedramcore_sdram_slave_p3_rddata <= 32'd0;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
        end else begin
            main_litedramcore_sdram_slave_p3_rddata <= main_litedramcore_sdram_master_p3_rddata;
        end
    end else begin
    end
end
always @(*) begin
    main_litedramcore_sdram_slave_p3_rddata_valid <= 1'd0;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
        end else begin
            main_litedramcore_sdram_slave_p3_rddata_valid <= main_litedramcore_sdram_master_p3_rddata_valid;
        end
    end else begin
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p0_address <= 15'd0;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p0_address <= main_litedramcore_sdram_ext_dfi_p0_address;
        end else begin
            main_litedramcore_sdram_master_p0_address <= main_litedramcore_sdram_slave_p0_address;
        end
    end else begin
        main_litedramcore_sdram_master_p0_address <= main_litedramcore_sdram_csr_dfi_p0_address;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p0_bank <= 3'd0;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p0_bank <= main_litedramcore_sdram_ext_dfi_p0_bank;
        end else begin
            main_litedramcore_sdram_master_p0_bank <= main_litedramcore_sdram_slave_p0_bank;
        end
    end else begin
        main_litedramcore_sdram_master_p0_bank <= main_litedramcore_sdram_csr_dfi_p0_bank;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p0_cas_n <= 1'd1;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p0_cas_n <= main_litedramcore_sdram_ext_dfi_p0_cas_n;
        end else begin
            main_litedramcore_sdram_master_p0_cas_n <= main_litedramcore_sdram_slave_p0_cas_n;
        end
    end else begin
        main_litedramcore_sdram_master_p0_cas_n <= main_litedramcore_sdram_csr_dfi_p0_cas_n;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p0_cs_n <= 1'd1;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p0_cs_n <= main_litedramcore_sdram_ext_dfi_p0_cs_n;
        end else begin
            main_litedramcore_sdram_master_p0_cs_n <= main_litedramcore_sdram_slave_p0_cs_n;
            if (1'd0) begin
                main_litedramcore_sdram_master_p0_cs_n <= {2{main_litedramcore_sdram_slave_p0_cs_n}};
            end
        end
    end else begin
        main_litedramcore_sdram_master_p0_cs_n <= main_litedramcore_sdram_csr_dfi_p0_cs_n;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p0_ras_n <= 1'd1;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p0_ras_n <= main_litedramcore_sdram_ext_dfi_p0_ras_n;
        end else begin
            main_litedramcore_sdram_master_p0_ras_n <= main_litedramcore_sdram_slave_p0_ras_n;
        end
    end else begin
        main_litedramcore_sdram_master_p0_ras_n <= main_litedramcore_sdram_csr_dfi_p0_ras_n;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p0_we_n <= 1'd1;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p0_we_n <= main_litedramcore_sdram_ext_dfi_p0_we_n;
        end else begin
            main_litedramcore_sdram_master_p0_we_n <= main_litedramcore_sdram_slave_p0_we_n;
        end
    end else begin
        main_litedramcore_sdram_master_p0_we_n <= main_litedramcore_sdram_csr_dfi_p0_we_n;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p0_cke <= 1'd0;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p0_cke <= main_litedramcore_sdram_ext_dfi_p0_cke;
        end else begin
            main_litedramcore_sdram_master_p0_cke <= main_litedramcore_sdram_slave_p0_cke;
        end
    end else begin
        main_litedramcore_sdram_master_p0_cke <= main_litedramcore_sdram_csr_dfi_p0_cke;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p0_odt <= 1'd0;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p0_odt <= main_litedramcore_sdram_ext_dfi_p0_odt;
        end else begin
            main_litedramcore_sdram_master_p0_odt <= main_litedramcore_sdram_slave_p0_odt;
        end
    end else begin
        main_litedramcore_sdram_master_p0_odt <= main_litedramcore_sdram_csr_dfi_p0_odt;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p0_reset_n <= 1'd0;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p0_reset_n <= main_litedramcore_sdram_ext_dfi_p0_reset_n;
        end else begin
            main_litedramcore_sdram_master_p0_reset_n <= main_litedramcore_sdram_slave_p0_reset_n;
        end
    end else begin
        main_litedramcore_sdram_master_p0_reset_n <= main_litedramcore_sdram_csr_dfi_p0_reset_n;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p0_act_n <= 1'd1;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p0_act_n <= main_litedramcore_sdram_ext_dfi_p0_act_n;
        end else begin
            main_litedramcore_sdram_master_p0_act_n <= main_litedramcore_sdram_slave_p0_act_n;
        end
    end else begin
        main_litedramcore_sdram_master_p0_act_n <= main_litedramcore_sdram_csr_dfi_p0_act_n;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p0_wrdata <= 32'd0;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p0_wrdata <= main_litedramcore_sdram_ext_dfi_p0_wrdata;
        end else begin
            main_litedramcore_sdram_master_p0_wrdata <= main_litedramcore_sdram_slave_p0_wrdata;
        end
    end else begin
        main_litedramcore_sdram_master_p0_wrdata <= main_litedramcore_sdram_csr_dfi_p0_wrdata;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p0_wrdata_en <= 1'd0;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p0_wrdata_en <= main_litedramcore_sdram_ext_dfi_p0_wrdata_en;
        end else begin
            main_litedramcore_sdram_master_p0_wrdata_en <= main_litedramcore_sdram_slave_p0_wrdata_en;
        end
    end else begin
        main_litedramcore_sdram_master_p0_wrdata_en <= main_litedramcore_sdram_csr_dfi_p0_wrdata_en;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p0_wrdata_mask <= 4'd0;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p0_wrdata_mask <= main_litedramcore_sdram_ext_dfi_p0_wrdata_mask;
        end else begin
            main_litedramcore_sdram_master_p0_wrdata_mask <= main_litedramcore_sdram_slave_p0_wrdata_mask;
        end
    end else begin
        main_litedramcore_sdram_master_p0_wrdata_mask <= main_litedramcore_sdram_csr_dfi_p0_wrdata_mask;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p0_rddata_en <= 1'd0;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p0_rddata_en <= main_litedramcore_sdram_ext_dfi_p0_rddata_en;
        end else begin
            main_litedramcore_sdram_master_p0_rddata_en <= main_litedramcore_sdram_slave_p0_rddata_en;
        end
    end else begin
        main_litedramcore_sdram_master_p0_rddata_en <= main_litedramcore_sdram_csr_dfi_p0_rddata_en;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p1_address <= 15'd0;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p1_address <= main_litedramcore_sdram_ext_dfi_p1_address;
        end else begin
            main_litedramcore_sdram_master_p1_address <= main_litedramcore_sdram_slave_p1_address;
        end
    end else begin
        main_litedramcore_sdram_master_p1_address <= main_litedramcore_sdram_csr_dfi_p1_address;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p1_bank <= 3'd0;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p1_bank <= main_litedramcore_sdram_ext_dfi_p1_bank;
        end else begin
            main_litedramcore_sdram_master_p1_bank <= main_litedramcore_sdram_slave_p1_bank;
        end
    end else begin
        main_litedramcore_sdram_master_p1_bank <= main_litedramcore_sdram_csr_dfi_p1_bank;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p1_cas_n <= 1'd1;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p1_cas_n <= main_litedramcore_sdram_ext_dfi_p1_cas_n;
        end else begin
            main_litedramcore_sdram_master_p1_cas_n <= main_litedramcore_sdram_slave_p1_cas_n;
        end
    end else begin
        main_litedramcore_sdram_master_p1_cas_n <= main_litedramcore_sdram_csr_dfi_p1_cas_n;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p1_cs_n <= 1'd1;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p1_cs_n <= main_litedramcore_sdram_ext_dfi_p1_cs_n;
        end else begin
            main_litedramcore_sdram_master_p1_cs_n <= main_litedramcore_sdram_slave_p1_cs_n;
            if (1'd0) begin
                main_litedramcore_sdram_master_p1_cs_n <= {2{main_litedramcore_sdram_slave_p1_cs_n}};
            end
        end
    end else begin
        main_litedramcore_sdram_master_p1_cs_n <= main_litedramcore_sdram_csr_dfi_p1_cs_n;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p1_ras_n <= 1'd1;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p1_ras_n <= main_litedramcore_sdram_ext_dfi_p1_ras_n;
        end else begin
            main_litedramcore_sdram_master_p1_ras_n <= main_litedramcore_sdram_slave_p1_ras_n;
        end
    end else begin
        main_litedramcore_sdram_master_p1_ras_n <= main_litedramcore_sdram_csr_dfi_p1_ras_n;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p1_we_n <= 1'd1;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p1_we_n <= main_litedramcore_sdram_ext_dfi_p1_we_n;
        end else begin
            main_litedramcore_sdram_master_p1_we_n <= main_litedramcore_sdram_slave_p1_we_n;
        end
    end else begin
        main_litedramcore_sdram_master_p1_we_n <= main_litedramcore_sdram_csr_dfi_p1_we_n;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p1_cke <= 1'd0;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p1_cke <= main_litedramcore_sdram_ext_dfi_p1_cke;
        end else begin
            main_litedramcore_sdram_master_p1_cke <= main_litedramcore_sdram_slave_p1_cke;
        end
    end else begin
        main_litedramcore_sdram_master_p1_cke <= main_litedramcore_sdram_csr_dfi_p1_cke;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p1_odt <= 1'd0;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p1_odt <= main_litedramcore_sdram_ext_dfi_p1_odt;
        end else begin
            main_litedramcore_sdram_master_p1_odt <= main_litedramcore_sdram_slave_p1_odt;
        end
    end else begin
        main_litedramcore_sdram_master_p1_odt <= main_litedramcore_sdram_csr_dfi_p1_odt;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p1_reset_n <= 1'd0;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p1_reset_n <= main_litedramcore_sdram_ext_dfi_p1_reset_n;
        end else begin
            main_litedramcore_sdram_master_p1_reset_n <= main_litedramcore_sdram_slave_p1_reset_n;
        end
    end else begin
        main_litedramcore_sdram_master_p1_reset_n <= main_litedramcore_sdram_csr_dfi_p1_reset_n;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p1_act_n <= 1'd1;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p1_act_n <= main_litedramcore_sdram_ext_dfi_p1_act_n;
        end else begin
            main_litedramcore_sdram_master_p1_act_n <= main_litedramcore_sdram_slave_p1_act_n;
        end
    end else begin
        main_litedramcore_sdram_master_p1_act_n <= main_litedramcore_sdram_csr_dfi_p1_act_n;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p1_wrdata <= 32'd0;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p1_wrdata <= main_litedramcore_sdram_ext_dfi_p1_wrdata;
        end else begin
            main_litedramcore_sdram_master_p1_wrdata <= main_litedramcore_sdram_slave_p1_wrdata;
        end
    end else begin
        main_litedramcore_sdram_master_p1_wrdata <= main_litedramcore_sdram_csr_dfi_p1_wrdata;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p1_wrdata_en <= 1'd0;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p1_wrdata_en <= main_litedramcore_sdram_ext_dfi_p1_wrdata_en;
        end else begin
            main_litedramcore_sdram_master_p1_wrdata_en <= main_litedramcore_sdram_slave_p1_wrdata_en;
        end
    end else begin
        main_litedramcore_sdram_master_p1_wrdata_en <= main_litedramcore_sdram_csr_dfi_p1_wrdata_en;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p1_wrdata_mask <= 4'd0;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p1_wrdata_mask <= main_litedramcore_sdram_ext_dfi_p1_wrdata_mask;
        end else begin
            main_litedramcore_sdram_master_p1_wrdata_mask <= main_litedramcore_sdram_slave_p1_wrdata_mask;
        end
    end else begin
        main_litedramcore_sdram_master_p1_wrdata_mask <= main_litedramcore_sdram_csr_dfi_p1_wrdata_mask;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p1_rddata_en <= 1'd0;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p1_rddata_en <= main_litedramcore_sdram_ext_dfi_p1_rddata_en;
        end else begin
            main_litedramcore_sdram_master_p1_rddata_en <= main_litedramcore_sdram_slave_p1_rddata_en;
        end
    end else begin
        main_litedramcore_sdram_master_p1_rddata_en <= main_litedramcore_sdram_csr_dfi_p1_rddata_en;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p2_address <= 15'd0;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p2_address <= main_litedramcore_sdram_ext_dfi_p2_address;
        end else begin
            main_litedramcore_sdram_master_p2_address <= main_litedramcore_sdram_slave_p2_address;
        end
    end else begin
        main_litedramcore_sdram_master_p2_address <= main_litedramcore_sdram_csr_dfi_p2_address;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p2_bank <= 3'd0;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p2_bank <= main_litedramcore_sdram_ext_dfi_p2_bank;
        end else begin
            main_litedramcore_sdram_master_p2_bank <= main_litedramcore_sdram_slave_p2_bank;
        end
    end else begin
        main_litedramcore_sdram_master_p2_bank <= main_litedramcore_sdram_csr_dfi_p2_bank;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p2_cas_n <= 1'd1;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p2_cas_n <= main_litedramcore_sdram_ext_dfi_p2_cas_n;
        end else begin
            main_litedramcore_sdram_master_p2_cas_n <= main_litedramcore_sdram_slave_p2_cas_n;
        end
    end else begin
        main_litedramcore_sdram_master_p2_cas_n <= main_litedramcore_sdram_csr_dfi_p2_cas_n;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p2_cs_n <= 1'd1;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p2_cs_n <= main_litedramcore_sdram_ext_dfi_p2_cs_n;
        end else begin
            main_litedramcore_sdram_master_p2_cs_n <= main_litedramcore_sdram_slave_p2_cs_n;
            if (1'd0) begin
                main_litedramcore_sdram_master_p2_cs_n <= {2{main_litedramcore_sdram_slave_p2_cs_n}};
            end
        end
    end else begin
        main_litedramcore_sdram_master_p2_cs_n <= main_litedramcore_sdram_csr_dfi_p2_cs_n;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p2_ras_n <= 1'd1;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p2_ras_n <= main_litedramcore_sdram_ext_dfi_p2_ras_n;
        end else begin
            main_litedramcore_sdram_master_p2_ras_n <= main_litedramcore_sdram_slave_p2_ras_n;
        end
    end else begin
        main_litedramcore_sdram_master_p2_ras_n <= main_litedramcore_sdram_csr_dfi_p2_ras_n;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p2_we_n <= 1'd1;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p2_we_n <= main_litedramcore_sdram_ext_dfi_p2_we_n;
        end else begin
            main_litedramcore_sdram_master_p2_we_n <= main_litedramcore_sdram_slave_p2_we_n;
        end
    end else begin
        main_litedramcore_sdram_master_p2_we_n <= main_litedramcore_sdram_csr_dfi_p2_we_n;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p2_cke <= 1'd0;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p2_cke <= main_litedramcore_sdram_ext_dfi_p2_cke;
        end else begin
            main_litedramcore_sdram_master_p2_cke <= main_litedramcore_sdram_slave_p2_cke;
        end
    end else begin
        main_litedramcore_sdram_master_p2_cke <= main_litedramcore_sdram_csr_dfi_p2_cke;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p2_odt <= 1'd0;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p2_odt <= main_litedramcore_sdram_ext_dfi_p2_odt;
        end else begin
            main_litedramcore_sdram_master_p2_odt <= main_litedramcore_sdram_slave_p2_odt;
        end
    end else begin
        main_litedramcore_sdram_master_p2_odt <= main_litedramcore_sdram_csr_dfi_p2_odt;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p2_reset_n <= 1'd0;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p2_reset_n <= main_litedramcore_sdram_ext_dfi_p2_reset_n;
        end else begin
            main_litedramcore_sdram_master_p2_reset_n <= main_litedramcore_sdram_slave_p2_reset_n;
        end
    end else begin
        main_litedramcore_sdram_master_p2_reset_n <= main_litedramcore_sdram_csr_dfi_p2_reset_n;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p2_act_n <= 1'd1;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p2_act_n <= main_litedramcore_sdram_ext_dfi_p2_act_n;
        end else begin
            main_litedramcore_sdram_master_p2_act_n <= main_litedramcore_sdram_slave_p2_act_n;
        end
    end else begin
        main_litedramcore_sdram_master_p2_act_n <= main_litedramcore_sdram_csr_dfi_p2_act_n;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p2_wrdata <= 32'd0;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p2_wrdata <= main_litedramcore_sdram_ext_dfi_p2_wrdata;
        end else begin
            main_litedramcore_sdram_master_p2_wrdata <= main_litedramcore_sdram_slave_p2_wrdata;
        end
    end else begin
        main_litedramcore_sdram_master_p2_wrdata <= main_litedramcore_sdram_csr_dfi_p2_wrdata;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p2_wrdata_en <= 1'd0;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p2_wrdata_en <= main_litedramcore_sdram_ext_dfi_p2_wrdata_en;
        end else begin
            main_litedramcore_sdram_master_p2_wrdata_en <= main_litedramcore_sdram_slave_p2_wrdata_en;
        end
    end else begin
        main_litedramcore_sdram_master_p2_wrdata_en <= main_litedramcore_sdram_csr_dfi_p2_wrdata_en;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p2_wrdata_mask <= 4'd0;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p2_wrdata_mask <= main_litedramcore_sdram_ext_dfi_p2_wrdata_mask;
        end else begin
            main_litedramcore_sdram_master_p2_wrdata_mask <= main_litedramcore_sdram_slave_p2_wrdata_mask;
        end
    end else begin
        main_litedramcore_sdram_master_p2_wrdata_mask <= main_litedramcore_sdram_csr_dfi_p2_wrdata_mask;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p2_rddata_en <= 1'd0;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p2_rddata_en <= main_litedramcore_sdram_ext_dfi_p2_rddata_en;
        end else begin
            main_litedramcore_sdram_master_p2_rddata_en <= main_litedramcore_sdram_slave_p2_rddata_en;
        end
    end else begin
        main_litedramcore_sdram_master_p2_rddata_en <= main_litedramcore_sdram_csr_dfi_p2_rddata_en;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p3_address <= 15'd0;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p3_address <= main_litedramcore_sdram_ext_dfi_p3_address;
        end else begin
            main_litedramcore_sdram_master_p3_address <= main_litedramcore_sdram_slave_p3_address;
        end
    end else begin
        main_litedramcore_sdram_master_p3_address <= main_litedramcore_sdram_csr_dfi_p3_address;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p3_bank <= 3'd0;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p3_bank <= main_litedramcore_sdram_ext_dfi_p3_bank;
        end else begin
            main_litedramcore_sdram_master_p3_bank <= main_litedramcore_sdram_slave_p3_bank;
        end
    end else begin
        main_litedramcore_sdram_master_p3_bank <= main_litedramcore_sdram_csr_dfi_p3_bank;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p3_cas_n <= 1'd1;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p3_cas_n <= main_litedramcore_sdram_ext_dfi_p3_cas_n;
        end else begin
            main_litedramcore_sdram_master_p3_cas_n <= main_litedramcore_sdram_slave_p3_cas_n;
        end
    end else begin
        main_litedramcore_sdram_master_p3_cas_n <= main_litedramcore_sdram_csr_dfi_p3_cas_n;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p3_cs_n <= 1'd1;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p3_cs_n <= main_litedramcore_sdram_ext_dfi_p3_cs_n;
        end else begin
            main_litedramcore_sdram_master_p3_cs_n <= main_litedramcore_sdram_slave_p3_cs_n;
            if (1'd0) begin
                main_litedramcore_sdram_master_p3_cs_n <= {2{main_litedramcore_sdram_slave_p3_cs_n}};
            end
        end
    end else begin
        main_litedramcore_sdram_master_p3_cs_n <= main_litedramcore_sdram_csr_dfi_p3_cs_n;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p3_ras_n <= 1'd1;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p3_ras_n <= main_litedramcore_sdram_ext_dfi_p3_ras_n;
        end else begin
            main_litedramcore_sdram_master_p3_ras_n <= main_litedramcore_sdram_slave_p3_ras_n;
        end
    end else begin
        main_litedramcore_sdram_master_p3_ras_n <= main_litedramcore_sdram_csr_dfi_p3_ras_n;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p3_we_n <= 1'd1;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p3_we_n <= main_litedramcore_sdram_ext_dfi_p3_we_n;
        end else begin
            main_litedramcore_sdram_master_p3_we_n <= main_litedramcore_sdram_slave_p3_we_n;
        end
    end else begin
        main_litedramcore_sdram_master_p3_we_n <= main_litedramcore_sdram_csr_dfi_p3_we_n;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p3_cke <= 1'd0;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p3_cke <= main_litedramcore_sdram_ext_dfi_p3_cke;
        end else begin
            main_litedramcore_sdram_master_p3_cke <= main_litedramcore_sdram_slave_p3_cke;
        end
    end else begin
        main_litedramcore_sdram_master_p3_cke <= main_litedramcore_sdram_csr_dfi_p3_cke;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p3_odt <= 1'd0;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p3_odt <= main_litedramcore_sdram_ext_dfi_p3_odt;
        end else begin
            main_litedramcore_sdram_master_p3_odt <= main_litedramcore_sdram_slave_p3_odt;
        end
    end else begin
        main_litedramcore_sdram_master_p3_odt <= main_litedramcore_sdram_csr_dfi_p3_odt;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p3_reset_n <= 1'd0;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p3_reset_n <= main_litedramcore_sdram_ext_dfi_p3_reset_n;
        end else begin
            main_litedramcore_sdram_master_p3_reset_n <= main_litedramcore_sdram_slave_p3_reset_n;
        end
    end else begin
        main_litedramcore_sdram_master_p3_reset_n <= main_litedramcore_sdram_csr_dfi_p3_reset_n;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p3_act_n <= 1'd1;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p3_act_n <= main_litedramcore_sdram_ext_dfi_p3_act_n;
        end else begin
            main_litedramcore_sdram_master_p3_act_n <= main_litedramcore_sdram_slave_p3_act_n;
        end
    end else begin
        main_litedramcore_sdram_master_p3_act_n <= main_litedramcore_sdram_csr_dfi_p3_act_n;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p3_wrdata <= 32'd0;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p3_wrdata <= main_litedramcore_sdram_ext_dfi_p3_wrdata;
        end else begin
            main_litedramcore_sdram_master_p3_wrdata <= main_litedramcore_sdram_slave_p3_wrdata;
        end
    end else begin
        main_litedramcore_sdram_master_p3_wrdata <= main_litedramcore_sdram_csr_dfi_p3_wrdata;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p3_wrdata_en <= 1'd0;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p3_wrdata_en <= main_litedramcore_sdram_ext_dfi_p3_wrdata_en;
        end else begin
            main_litedramcore_sdram_master_p3_wrdata_en <= main_litedramcore_sdram_slave_p3_wrdata_en;
        end
    end else begin
        main_litedramcore_sdram_master_p3_wrdata_en <= main_litedramcore_sdram_csr_dfi_p3_wrdata_en;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p3_wrdata_mask <= 4'd0;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p3_wrdata_mask <= main_litedramcore_sdram_ext_dfi_p3_wrdata_mask;
        end else begin
            main_litedramcore_sdram_master_p3_wrdata_mask <= main_litedramcore_sdram_slave_p3_wrdata_mask;
        end
    end else begin
        main_litedramcore_sdram_master_p3_wrdata_mask <= main_litedramcore_sdram_csr_dfi_p3_wrdata_mask;
    end
end
always @(*) begin
    main_litedramcore_sdram_master_p3_rddata_en <= 1'd0;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_master_p3_rddata_en <= main_litedramcore_sdram_ext_dfi_p3_rddata_en;
        end else begin
            main_litedramcore_sdram_master_p3_rddata_en <= main_litedramcore_sdram_slave_p3_rddata_en;
        end
    end else begin
        main_litedramcore_sdram_master_p3_rddata_en <= main_litedramcore_sdram_csr_dfi_p3_rddata_en;
    end
end
always @(*) begin
    main_litedramcore_sdram_csr_dfi_p0_rddata <= 32'd0;
    if (main_litedramcore_sdram_sel) begin
    end else begin
        main_litedramcore_sdram_csr_dfi_p0_rddata <= main_litedramcore_sdram_master_p0_rddata;
    end
end
always @(*) begin
    main_litedramcore_sdram_csr_dfi_p0_rddata_valid <= 1'd0;
    if (main_litedramcore_sdram_sel) begin
    end else begin
        main_litedramcore_sdram_csr_dfi_p0_rddata_valid <= main_litedramcore_sdram_master_p0_rddata_valid;
    end
end
always @(*) begin
    main_litedramcore_sdram_csr_dfi_p1_rddata <= 32'd0;
    if (main_litedramcore_sdram_sel) begin
    end else begin
        main_litedramcore_sdram_csr_dfi_p1_rddata <= main_litedramcore_sdram_master_p1_rddata;
    end
end
always @(*) begin
    main_litedramcore_sdram_csr_dfi_p1_rddata_valid <= 1'd0;
    if (main_litedramcore_sdram_sel) begin
    end else begin
        main_litedramcore_sdram_csr_dfi_p1_rddata_valid <= main_litedramcore_sdram_master_p1_rddata_valid;
    end
end
always @(*) begin
    main_litedramcore_sdram_csr_dfi_p2_rddata <= 32'd0;
    if (main_litedramcore_sdram_sel) begin
    end else begin
        main_litedramcore_sdram_csr_dfi_p2_rddata <= main_litedramcore_sdram_master_p2_rddata;
    end
end
always @(*) begin
    main_litedramcore_sdram_csr_dfi_p2_rddata_valid <= 1'd0;
    if (main_litedramcore_sdram_sel) begin
    end else begin
        main_litedramcore_sdram_csr_dfi_p2_rddata_valid <= main_litedramcore_sdram_master_p2_rddata_valid;
    end
end
always @(*) begin
    main_litedramcore_sdram_csr_dfi_p3_rddata <= 32'd0;
    if (main_litedramcore_sdram_sel) begin
    end else begin
        main_litedramcore_sdram_csr_dfi_p3_rddata <= main_litedramcore_sdram_master_p3_rddata;
    end
end
always @(*) begin
    main_litedramcore_sdram_csr_dfi_p3_rddata_valid <= 1'd0;
    if (main_litedramcore_sdram_sel) begin
    end else begin
        main_litedramcore_sdram_csr_dfi_p3_rddata_valid <= main_litedramcore_sdram_master_p3_rddata_valid;
    end
end
always @(*) begin
    main_litedramcore_sdram_ext_dfi_p0_rddata <= 32'd0;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_ext_dfi_p0_rddata <= main_litedramcore_sdram_master_p0_rddata;
        end else begin
        end
    end else begin
    end
end
always @(*) begin
    main_litedramcore_sdram_ext_dfi_p0_rddata_valid <= 1'd0;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_ext_dfi_p0_rddata_valid <= main_litedramcore_sdram_master_p0_rddata_valid;
        end else begin
        end
    end else begin
    end
end
always @(*) begin
    main_litedramcore_sdram_ext_dfi_p1_rddata <= 32'd0;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_ext_dfi_p1_rddata <= main_litedramcore_sdram_master_p1_rddata;
        end else begin
        end
    end else begin
    end
end
always @(*) begin
    main_litedramcore_sdram_ext_dfi_p1_rddata_valid <= 1'd0;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_ext_dfi_p1_rddata_valid <= main_litedramcore_sdram_master_p1_rddata_valid;
        end else begin
        end
    end else begin
    end
end
always @(*) begin
    main_litedramcore_sdram_ext_dfi_p2_rddata <= 32'd0;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_ext_dfi_p2_rddata <= main_litedramcore_sdram_master_p2_rddata;
        end else begin
        end
    end else begin
    end
end
always @(*) begin
    main_litedramcore_sdram_ext_dfi_p2_rddata_valid <= 1'd0;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
            main_litedramcore_sdram_ext_dfi_p2_rddata_valid <= main_litedramcore_sdram_master_p2_rddata_valid;
        end else begin
        end
    end else begin
    end
end
always @(*) begin
    main_litedramcore_sdram_slave_p0_rddata <= 32'd0;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
        end else begin
            main_litedramcore_sdram_slave_p0_rddata <= main_litedramcore_sdram_master_p0_rddata;
        end
    end else begin
    end
end
always @(*) begin
    main_litedramcore_sdram_slave_p0_rddata_valid <= 1'd0;
    if (main_litedramcore_sdram_sel) begin
        if (main_litedramcore_sdram_ext_dfi_sel) begin
        end else begin
            main_litedramcore_sdram_slave_p0_rddata_valid <= main_litedramcore_sdram_master_p0_rddata_valid;
        end
    end else begin
    end
end
assign main_litedramcore_sdram_csr_dfi_p0_cke = main_litedramcore_sdram_cke;
assign main_litedramcore_sdram_csr_dfi_p1_cke = main_litedramcore_sdram_cke;
assign main_litedramcore_sdram_csr_dfi_p2_cke = main_litedramcore_sdram_cke;
assign main_litedramcore_sdram_csr_dfi_p3_cke = main_litedramcore_sdram_cke;
assign main_litedramcore_sdram_csr_dfi_p0_odt = main_litedramcore_sdram_odt;
assign main_litedramcore_sdram_csr_dfi_p1_odt = main_litedramcore_sdram_odt;
assign main_litedramcore_sdram_csr_dfi_p2_odt = main_litedramcore_sdram_odt;
assign main_litedramcore_sdram_csr_dfi_p3_odt = main_litedramcore_sdram_odt;
assign main_litedramcore_sdram_csr_dfi_p0_reset_n = main_litedramcore_sdram_reset_n;
assign main_litedramcore_sdram_csr_dfi_p1_reset_n = main_litedramcore_sdram_reset_n;
assign main_litedramcore_sdram_csr_dfi_p2_reset_n = main_litedramcore_sdram_reset_n;
assign main_litedramcore_sdram_csr_dfi_p3_reset_n = main_litedramcore_sdram_reset_n;
always @(*) begin
    main_litedramcore_sdram_csr_dfi_p0_ras_n <= 1'd1;
    if (main_litedramcore_sdram_phaseinjector0_command_issue_re) begin
        main_litedramcore_sdram_csr_dfi_p0_ras_n <= (~main_litedramcore_sdram_phaseinjector0_csrfield_ras);
    end else begin
        main_litedramcore_sdram_csr_dfi_p0_ras_n <= 1'd1;
    end
end
always @(*) begin
    main_litedramcore_sdram_csr_dfi_p0_we_n <= 1'd1;
    if (main_litedramcore_sdram_phaseinjector0_command_issue_re) begin
        main_litedramcore_sdram_csr_dfi_p0_we_n <= (~main_litedramcore_sdram_phaseinjector0_csrfield_we);
    end else begin
        main_litedramcore_sdram_csr_dfi_p0_we_n <= 1'd1;
    end
end
always @(*) begin
    main_litedramcore_sdram_csr_dfi_p0_cas_n <= 1'd1;
    if (main_litedramcore_sdram_phaseinjector0_command_issue_re) begin
        main_litedramcore_sdram_csr_dfi_p0_cas_n <= (~main_litedramcore_sdram_phaseinjector0_csrfield_cas);
    end else begin
        main_litedramcore_sdram_csr_dfi_p0_cas_n <= 1'd1;
    end
end
always @(*) begin
    main_litedramcore_sdram_csr_dfi_p0_cs_n <= 1'd1;
    if (main_litedramcore_sdram_phaseinjector0_command_issue_re) begin
        if (main_litedramcore_sdram_phaseinjector0_csrfield_cs_top) begin
            main_litedramcore_sdram_csr_dfi_p0_cs_n <= 2'd2;
        end else begin
            if (main_litedramcore_sdram_phaseinjector0_csrfield_cs_bottom) begin
                main_litedramcore_sdram_csr_dfi_p0_cs_n <= 1'd1;
            end else begin
                main_litedramcore_sdram_csr_dfi_p0_cs_n <= {1{(~main_litedramcore_sdram_phaseinjector0_csrfield_cs)}};
            end
        end
    end else begin
        main_litedramcore_sdram_csr_dfi_p0_cs_n <= {1{1'd1}};
    end
end
assign main_litedramcore_sdram_csr_dfi_p0_address = main_litedramcore_sdram_phaseinjector0_address_storage;
assign main_litedramcore_sdram_csr_dfi_p0_bank = main_litedramcore_sdram_phaseinjector0_baddress_storage;
assign main_litedramcore_sdram_csr_dfi_p0_wrdata_en = (main_litedramcore_sdram_phaseinjector0_command_issue_re & main_litedramcore_sdram_phaseinjector0_csrfield_wren);
assign main_litedramcore_sdram_csr_dfi_p0_rddata_en = (main_litedramcore_sdram_phaseinjector0_command_issue_re & main_litedramcore_sdram_phaseinjector0_csrfield_rden);
assign main_litedramcore_sdram_csr_dfi_p0_wrdata = main_litedramcore_sdram_phaseinjector0_wrdata_storage;
assign main_litedramcore_sdram_csr_dfi_p0_wrdata_mask = 1'd0;
always @(*) begin
    main_litedramcore_sdram_csr_dfi_p1_ras_n <= 1'd1;
    if (main_litedramcore_sdram_phaseinjector1_command_issue_re) begin
        main_litedramcore_sdram_csr_dfi_p1_ras_n <= (~main_litedramcore_sdram_phaseinjector1_csrfield_ras);
    end else begin
        main_litedramcore_sdram_csr_dfi_p1_ras_n <= 1'd1;
    end
end
always @(*) begin
    main_litedramcore_sdram_csr_dfi_p1_we_n <= 1'd1;
    if (main_litedramcore_sdram_phaseinjector1_command_issue_re) begin
        main_litedramcore_sdram_csr_dfi_p1_we_n <= (~main_litedramcore_sdram_phaseinjector1_csrfield_we);
    end else begin
        main_litedramcore_sdram_csr_dfi_p1_we_n <= 1'd1;
    end
end
always @(*) begin
    main_litedramcore_sdram_csr_dfi_p1_cas_n <= 1'd1;
    if (main_litedramcore_sdram_phaseinjector1_command_issue_re) begin
        main_litedramcore_sdram_csr_dfi_p1_cas_n <= (~main_litedramcore_sdram_phaseinjector1_csrfield_cas);
    end else begin
        main_litedramcore_sdram_csr_dfi_p1_cas_n <= 1'd1;
    end
end
always @(*) begin
    main_litedramcore_sdram_csr_dfi_p1_cs_n <= 1'd1;
    if (main_litedramcore_sdram_phaseinjector1_command_issue_re) begin
        if (main_litedramcore_sdram_phaseinjector1_csrfield_cs_top) begin
            main_litedramcore_sdram_csr_dfi_p1_cs_n <= 2'd2;
        end else begin
            if (main_litedramcore_sdram_phaseinjector1_csrfield_cs_bottom) begin
                main_litedramcore_sdram_csr_dfi_p1_cs_n <= 1'd1;
            end else begin
                main_litedramcore_sdram_csr_dfi_p1_cs_n <= {1{(~main_litedramcore_sdram_phaseinjector1_csrfield_cs)}};
            end
        end
    end else begin
        main_litedramcore_sdram_csr_dfi_p1_cs_n <= {1{1'd1}};
    end
end
assign main_litedramcore_sdram_csr_dfi_p1_address = main_litedramcore_sdram_phaseinjector1_address_storage;
assign main_litedramcore_sdram_csr_dfi_p1_bank = main_litedramcore_sdram_phaseinjector1_baddress_storage;
assign main_litedramcore_sdram_csr_dfi_p1_wrdata_en = (main_litedramcore_sdram_phaseinjector1_command_issue_re & main_litedramcore_sdram_phaseinjector1_csrfield_wren);
assign main_litedramcore_sdram_csr_dfi_p1_rddata_en = (main_litedramcore_sdram_phaseinjector1_command_issue_re & main_litedramcore_sdram_phaseinjector1_csrfield_rden);
assign main_litedramcore_sdram_csr_dfi_p1_wrdata = main_litedramcore_sdram_phaseinjector1_wrdata_storage;
assign main_litedramcore_sdram_csr_dfi_p1_wrdata_mask = 1'd0;
always @(*) begin
    main_litedramcore_sdram_csr_dfi_p2_ras_n <= 1'd1;
    if (main_litedramcore_sdram_phaseinjector2_command_issue_re) begin
        main_litedramcore_sdram_csr_dfi_p2_ras_n <= (~main_litedramcore_sdram_phaseinjector2_csrfield_ras);
    end else begin
        main_litedramcore_sdram_csr_dfi_p2_ras_n <= 1'd1;
    end
end
always @(*) begin
    main_litedramcore_sdram_csr_dfi_p2_we_n <= 1'd1;
    if (main_litedramcore_sdram_phaseinjector2_command_issue_re) begin
        main_litedramcore_sdram_csr_dfi_p2_we_n <= (~main_litedramcore_sdram_phaseinjector2_csrfield_we);
    end else begin
        main_litedramcore_sdram_csr_dfi_p2_we_n <= 1'd1;
    end
end
always @(*) begin
    main_litedramcore_sdram_csr_dfi_p2_cas_n <= 1'd1;
    if (main_litedramcore_sdram_phaseinjector2_command_issue_re) begin
        main_litedramcore_sdram_csr_dfi_p2_cas_n <= (~main_litedramcore_sdram_phaseinjector2_csrfield_cas);
    end else begin
        main_litedramcore_sdram_csr_dfi_p2_cas_n <= 1'd1;
    end
end
always @(*) begin
    main_litedramcore_sdram_csr_dfi_p2_cs_n <= 1'd1;
    if (main_litedramcore_sdram_phaseinjector2_command_issue_re) begin
        if (main_litedramcore_sdram_phaseinjector2_csrfield_cs_top) begin
            main_litedramcore_sdram_csr_dfi_p2_cs_n <= 2'd2;
        end else begin
            if (main_litedramcore_sdram_phaseinjector2_csrfield_cs_bottom) begin
                main_litedramcore_sdram_csr_dfi_p2_cs_n <= 1'd1;
            end else begin
                main_litedramcore_sdram_csr_dfi_p2_cs_n <= {1{(~main_litedramcore_sdram_phaseinjector2_csrfield_cs)}};
            end
        end
    end else begin
        main_litedramcore_sdram_csr_dfi_p2_cs_n <= {1{1'd1}};
    end
end
assign main_litedramcore_sdram_csr_dfi_p2_address = main_litedramcore_sdram_phaseinjector2_address_storage;
assign main_litedramcore_sdram_csr_dfi_p2_bank = main_litedramcore_sdram_phaseinjector2_baddress_storage;
assign main_litedramcore_sdram_csr_dfi_p2_wrdata_en = (main_litedramcore_sdram_phaseinjector2_command_issue_re & main_litedramcore_sdram_phaseinjector2_csrfield_wren);
assign main_litedramcore_sdram_csr_dfi_p2_rddata_en = (main_litedramcore_sdram_phaseinjector2_command_issue_re & main_litedramcore_sdram_phaseinjector2_csrfield_rden);
assign main_litedramcore_sdram_csr_dfi_p2_wrdata = main_litedramcore_sdram_phaseinjector2_wrdata_storage;
assign main_litedramcore_sdram_csr_dfi_p2_wrdata_mask = 1'd0;
always @(*) begin
    main_litedramcore_sdram_csr_dfi_p3_ras_n <= 1'd1;
    if (main_litedramcore_sdram_phaseinjector3_command_issue_re) begin
        main_litedramcore_sdram_csr_dfi_p3_ras_n <= (~main_litedramcore_sdram_phaseinjector3_csrfield_ras);
    end else begin
        main_litedramcore_sdram_csr_dfi_p3_ras_n <= 1'd1;
    end
end
always @(*) begin
    main_litedramcore_sdram_csr_dfi_p3_we_n <= 1'd1;
    if (main_litedramcore_sdram_phaseinjector3_command_issue_re) begin
        main_litedramcore_sdram_csr_dfi_p3_we_n <= (~main_litedramcore_sdram_phaseinjector3_csrfield_we);
    end else begin
        main_litedramcore_sdram_csr_dfi_p3_we_n <= 1'd1;
    end
end
always @(*) begin
    main_litedramcore_sdram_csr_dfi_p3_cas_n <= 1'd1;
    if (main_litedramcore_sdram_phaseinjector3_command_issue_re) begin
        main_litedramcore_sdram_csr_dfi_p3_cas_n <= (~main_litedramcore_sdram_phaseinjector3_csrfield_cas);
    end else begin
        main_litedramcore_sdram_csr_dfi_p3_cas_n <= 1'd1;
    end
end
always @(*) begin
    main_litedramcore_sdram_csr_dfi_p3_cs_n <= 1'd1;
    if (main_litedramcore_sdram_phaseinjector3_command_issue_re) begin
        if (main_litedramcore_sdram_phaseinjector3_csrfield_cs_top) begin
            main_litedramcore_sdram_csr_dfi_p3_cs_n <= 2'd2;
        end else begin
            if (main_litedramcore_sdram_phaseinjector3_csrfield_cs_bottom) begin
                main_litedramcore_sdram_csr_dfi_p3_cs_n <= 1'd1;
            end else begin
                main_litedramcore_sdram_csr_dfi_p3_cs_n <= {1{(~main_litedramcore_sdram_phaseinjector3_csrfield_cs)}};
            end
        end
    end else begin
        main_litedramcore_sdram_csr_dfi_p3_cs_n <= {1{1'd1}};
    end
end
assign main_litedramcore_sdram_csr_dfi_p3_address = main_litedramcore_sdram_phaseinjector3_address_storage;
assign main_litedramcore_sdram_csr_dfi_p3_bank = main_litedramcore_sdram_phaseinjector3_baddress_storage;
assign main_litedramcore_sdram_csr_dfi_p3_wrdata_en = (main_litedramcore_sdram_phaseinjector3_command_issue_re & main_litedramcore_sdram_phaseinjector3_csrfield_wren);
assign main_litedramcore_sdram_csr_dfi_p3_rddata_en = (main_litedramcore_sdram_phaseinjector3_command_issue_re & main_litedramcore_sdram_phaseinjector3_csrfield_rden);
assign main_litedramcore_sdram_csr_dfi_p3_wrdata = main_litedramcore_sdram_phaseinjector3_wrdata_storage;
assign main_litedramcore_sdram_csr_dfi_p3_wrdata_mask = 1'd0;
assign main_litedramcore_sdram_bankmachine0_req_valid = main_litedramcore_sdram_interface_bank0_valid;
assign main_litedramcore_sdram_interface_bank0_ready = main_litedramcore_sdram_bankmachine0_req_ready;
assign main_litedramcore_sdram_bankmachine0_req_we = main_litedramcore_sdram_interface_bank0_we;
assign main_litedramcore_sdram_bankmachine0_req_addr = main_litedramcore_sdram_interface_bank0_addr;
assign main_litedramcore_sdram_interface_bank0_lock = main_litedramcore_sdram_bankmachine0_req_lock;
assign main_litedramcore_sdram_interface_bank0_wdata_ready = main_litedramcore_sdram_bankmachine0_req_wdata_ready;
assign main_litedramcore_sdram_interface_bank0_rdata_valid = main_litedramcore_sdram_bankmachine0_req_rdata_valid;
assign main_litedramcore_sdram_bankmachine1_req_valid = main_litedramcore_sdram_interface_bank1_valid;
assign main_litedramcore_sdram_interface_bank1_ready = main_litedramcore_sdram_bankmachine1_req_ready;
assign main_litedramcore_sdram_bankmachine1_req_we = main_litedramcore_sdram_interface_bank1_we;
assign main_litedramcore_sdram_bankmachine1_req_addr = main_litedramcore_sdram_interface_bank1_addr;
assign main_litedramcore_sdram_interface_bank1_lock = main_litedramcore_sdram_bankmachine1_req_lock;
assign main_litedramcore_sdram_interface_bank1_wdata_ready = main_litedramcore_sdram_bankmachine1_req_wdata_ready;
assign main_litedramcore_sdram_interface_bank1_rdata_valid = main_litedramcore_sdram_bankmachine1_req_rdata_valid;
assign main_litedramcore_sdram_bankmachine2_req_valid = main_litedramcore_sdram_interface_bank2_valid;
assign main_litedramcore_sdram_interface_bank2_ready = main_litedramcore_sdram_bankmachine2_req_ready;
assign main_litedramcore_sdram_bankmachine2_req_we = main_litedramcore_sdram_interface_bank2_we;
assign main_litedramcore_sdram_bankmachine2_req_addr = main_litedramcore_sdram_interface_bank2_addr;
assign main_litedramcore_sdram_interface_bank2_lock = main_litedramcore_sdram_bankmachine2_req_lock;
assign main_litedramcore_sdram_interface_bank2_wdata_ready = main_litedramcore_sdram_bankmachine2_req_wdata_ready;
assign main_litedramcore_sdram_interface_bank2_rdata_valid = main_litedramcore_sdram_bankmachine2_req_rdata_valid;
assign main_litedramcore_sdram_bankmachine3_req_valid = main_litedramcore_sdram_interface_bank3_valid;
assign main_litedramcore_sdram_interface_bank3_ready = main_litedramcore_sdram_bankmachine3_req_ready;
assign main_litedramcore_sdram_bankmachine3_req_we = main_litedramcore_sdram_interface_bank3_we;
assign main_litedramcore_sdram_bankmachine3_req_addr = main_litedramcore_sdram_interface_bank3_addr;
assign main_litedramcore_sdram_interface_bank3_lock = main_litedramcore_sdram_bankmachine3_req_lock;
assign main_litedramcore_sdram_interface_bank3_wdata_ready = main_litedramcore_sdram_bankmachine3_req_wdata_ready;
assign main_litedramcore_sdram_interface_bank3_rdata_valid = main_litedramcore_sdram_bankmachine3_req_rdata_valid;
assign main_litedramcore_sdram_bankmachine4_req_valid = main_litedramcore_sdram_interface_bank4_valid;
assign main_litedramcore_sdram_interface_bank4_ready = main_litedramcore_sdram_bankmachine4_req_ready;
assign main_litedramcore_sdram_bankmachine4_req_we = main_litedramcore_sdram_interface_bank4_we;
assign main_litedramcore_sdram_bankmachine4_req_addr = main_litedramcore_sdram_interface_bank4_addr;
assign main_litedramcore_sdram_interface_bank4_lock = main_litedramcore_sdram_bankmachine4_req_lock;
assign main_litedramcore_sdram_interface_bank4_wdata_ready = main_litedramcore_sdram_bankmachine4_req_wdata_ready;
assign main_litedramcore_sdram_interface_bank4_rdata_valid = main_litedramcore_sdram_bankmachine4_req_rdata_valid;
assign main_litedramcore_sdram_bankmachine5_req_valid = main_litedramcore_sdram_interface_bank5_valid;
assign main_litedramcore_sdram_interface_bank5_ready = main_litedramcore_sdram_bankmachine5_req_ready;
assign main_litedramcore_sdram_bankmachine5_req_we = main_litedramcore_sdram_interface_bank5_we;
assign main_litedramcore_sdram_bankmachine5_req_addr = main_litedramcore_sdram_interface_bank5_addr;
assign main_litedramcore_sdram_interface_bank5_lock = main_litedramcore_sdram_bankmachine5_req_lock;
assign main_litedramcore_sdram_interface_bank5_wdata_ready = main_litedramcore_sdram_bankmachine5_req_wdata_ready;
assign main_litedramcore_sdram_interface_bank5_rdata_valid = main_litedramcore_sdram_bankmachine5_req_rdata_valid;
assign main_litedramcore_sdram_bankmachine6_req_valid = main_litedramcore_sdram_interface_bank6_valid;
assign main_litedramcore_sdram_interface_bank6_ready = main_litedramcore_sdram_bankmachine6_req_ready;
assign main_litedramcore_sdram_bankmachine6_req_we = main_litedramcore_sdram_interface_bank6_we;
assign main_litedramcore_sdram_bankmachine6_req_addr = main_litedramcore_sdram_interface_bank6_addr;
assign main_litedramcore_sdram_interface_bank6_lock = main_litedramcore_sdram_bankmachine6_req_lock;
assign main_litedramcore_sdram_interface_bank6_wdata_ready = main_litedramcore_sdram_bankmachine6_req_wdata_ready;
assign main_litedramcore_sdram_interface_bank6_rdata_valid = main_litedramcore_sdram_bankmachine6_req_rdata_valid;
assign main_litedramcore_sdram_bankmachine7_req_valid = main_litedramcore_sdram_interface_bank7_valid;
assign main_litedramcore_sdram_interface_bank7_ready = main_litedramcore_sdram_bankmachine7_req_ready;
assign main_litedramcore_sdram_bankmachine7_req_we = main_litedramcore_sdram_interface_bank7_we;
assign main_litedramcore_sdram_bankmachine7_req_addr = main_litedramcore_sdram_interface_bank7_addr;
assign main_litedramcore_sdram_interface_bank7_lock = main_litedramcore_sdram_bankmachine7_req_lock;
assign main_litedramcore_sdram_interface_bank7_wdata_ready = main_litedramcore_sdram_bankmachine7_req_wdata_ready;
assign main_litedramcore_sdram_interface_bank7_rdata_valid = main_litedramcore_sdram_bankmachine7_req_rdata_valid;
assign main_litedramcore_sdram_timer_wait = (~main_litedramcore_sdram_timer_done0);
assign main_litedramcore_sdram_postponer_req_i = main_litedramcore_sdram_timer_done0;
assign main_litedramcore_sdram_wants_refresh = main_litedramcore_sdram_postponer_req_o;
assign main_litedramcore_sdram_wants_zqcs = main_litedramcore_sdram_zqcs_timer_done0;
assign main_litedramcore_sdram_zqcs_timer_wait = (~main_litedramcore_sdram_zqcs_executer_done);
assign main_litedramcore_sdram_timer_done1 = (main_litedramcore_sdram_timer_count1 == 1'd0);
assign main_litedramcore_sdram_timer_done0 = main_litedramcore_sdram_timer_done1;
assign main_litedramcore_sdram_timer_count0 = main_litedramcore_sdram_timer_count1;
assign main_litedramcore_sdram_sequencer_start1 = (main_litedramcore_sdram_sequencer_start0 | (main_litedramcore_sdram_sequencer_count != 1'd0));
assign main_litedramcore_sdram_sequencer_done0 = (main_litedramcore_sdram_sequencer_done1 & (main_litedramcore_sdram_sequencer_count == 1'd0));
assign main_litedramcore_sdram_zqcs_timer_done1 = (main_litedramcore_sdram_zqcs_timer_count1 == 1'd0);
assign main_litedramcore_sdram_zqcs_timer_done0 = main_litedramcore_sdram_zqcs_timer_done1;
assign main_litedramcore_sdram_zqcs_timer_count0 = main_litedramcore_sdram_zqcs_timer_count1;
always @(*) begin
    builder_litedramcore_litedramcore_refresher_next_state <= 2'd0;
    builder_litedramcore_litedramcore_refresher_next_state <= builder_litedramcore_litedramcore_refresher_state;
    case (builder_litedramcore_litedramcore_refresher_state)
        1'd1: begin
            if (main_litedramcore_sdram_cmd_ready) begin
                builder_litedramcore_litedramcore_refresher_next_state <= 2'd2;
            end
        end
        2'd2: begin
            if (main_litedramcore_sdram_sequencer_done0) begin
                if (main_litedramcore_sdram_wants_zqcs) begin
                    builder_litedramcore_litedramcore_refresher_next_state <= 2'd3;
                end else begin
                    builder_litedramcore_litedramcore_refresher_next_state <= 1'd0;
                end
            end
        end
        2'd3: begin
            if (main_litedramcore_sdram_zqcs_executer_done) begin
                builder_litedramcore_litedramcore_refresher_next_state <= 1'd0;
            end
        end
        default: begin
            if (1'd1) begin
                if (main_litedramcore_sdram_wants_refresh) begin
                    builder_litedramcore_litedramcore_refresher_next_state <= 1'd1;
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_sequencer_start0 <= 1'd0;
    case (builder_litedramcore_litedramcore_refresher_state)
        1'd1: begin
            if (main_litedramcore_sdram_cmd_ready) begin
                main_litedramcore_sdram_sequencer_start0 <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_cmd_valid <= 1'd0;
    case (builder_litedramcore_litedramcore_refresher_state)
        1'd1: begin
            main_litedramcore_sdram_cmd_valid <= 1'd1;
        end
        2'd2: begin
            main_litedramcore_sdram_cmd_valid <= 1'd1;
            if (main_litedramcore_sdram_sequencer_done0) begin
                if (main_litedramcore_sdram_wants_zqcs) begin
                end else begin
                    main_litedramcore_sdram_cmd_valid <= 1'd0;
                end
            end
        end
        2'd3: begin
            main_litedramcore_sdram_cmd_valid <= 1'd1;
            if (main_litedramcore_sdram_zqcs_executer_done) begin
                main_litedramcore_sdram_cmd_valid <= 1'd0;
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_zqcs_executer_start <= 1'd0;
    case (builder_litedramcore_litedramcore_refresher_state)
        1'd1: begin
        end
        2'd2: begin
            if (main_litedramcore_sdram_sequencer_done0) begin
                if (main_litedramcore_sdram_wants_zqcs) begin
                    main_litedramcore_sdram_zqcs_executer_start <= 1'd1;
                end else begin
                end
            end
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_cmd_last <= 1'd0;
    case (builder_litedramcore_litedramcore_refresher_state)
        1'd1: begin
        end
        2'd2: begin
            if (main_litedramcore_sdram_sequencer_done0) begin
                if (main_litedramcore_sdram_wants_zqcs) begin
                end else begin
                    main_litedramcore_sdram_cmd_last <= 1'd1;
                end
            end
        end
        2'd3: begin
            if (main_litedramcore_sdram_zqcs_executer_done) begin
                main_litedramcore_sdram_cmd_last <= 1'd1;
            end
        end
        default: begin
        end
    endcase
end
assign main_litedramcore_sdram_bankmachine0_sink_valid = main_litedramcore_sdram_bankmachine0_req_valid;
assign main_litedramcore_sdram_bankmachine0_req_ready = main_litedramcore_sdram_bankmachine0_sink_ready;
assign main_litedramcore_sdram_bankmachine0_sink_payload_we = main_litedramcore_sdram_bankmachine0_req_we;
assign main_litedramcore_sdram_bankmachine0_sink_payload_addr = main_litedramcore_sdram_bankmachine0_req_addr;
assign main_litedramcore_sdram_bankmachine0_sink_sink_valid = main_litedramcore_sdram_bankmachine0_source_valid;
assign main_litedramcore_sdram_bankmachine0_source_ready = main_litedramcore_sdram_bankmachine0_sink_sink_ready;
assign main_litedramcore_sdram_bankmachine0_sink_sink_first = main_litedramcore_sdram_bankmachine0_source_first;
assign main_litedramcore_sdram_bankmachine0_sink_sink_last = main_litedramcore_sdram_bankmachine0_source_last;
assign main_litedramcore_sdram_bankmachine0_sink_sink_payload_we = main_litedramcore_sdram_bankmachine0_source_payload_we;
assign main_litedramcore_sdram_bankmachine0_sink_sink_payload_addr = main_litedramcore_sdram_bankmachine0_source_payload_addr;
assign main_litedramcore_sdram_bankmachine0_source_source_ready = (main_litedramcore_sdram_bankmachine0_req_wdata_ready | main_litedramcore_sdram_bankmachine0_req_rdata_valid);
assign main_litedramcore_sdram_bankmachine0_req_lock = (main_litedramcore_sdram_bankmachine0_source_valid | main_litedramcore_sdram_bankmachine0_source_source_valid);
assign main_litedramcore_sdram_bankmachine0_row_hit = (main_litedramcore_sdram_bankmachine0_row == main_litedramcore_sdram_bankmachine0_source_source_payload_addr[21:7]);
assign main_litedramcore_sdram_bankmachine0_cmd_payload_ba = 1'd0;
always @(*) begin
    main_litedramcore_sdram_bankmachine0_cmd_payload_a <= 15'd0;
    if (main_litedramcore_sdram_bankmachine0_row_col_n_addr_sel) begin
        main_litedramcore_sdram_bankmachine0_cmd_payload_a <= main_litedramcore_sdram_bankmachine0_source_source_payload_addr[21:7];
    end else begin
        main_litedramcore_sdram_bankmachine0_cmd_payload_a <= ((main_litedramcore_sdram_bankmachine0_auto_precharge <<< 4'd10) | {main_litedramcore_sdram_bankmachine0_source_source_payload_addr[6:0], {3{1'd0}}});
    end
end
assign main_litedramcore_sdram_bankmachine0_twtpcon_valid = ((main_litedramcore_sdram_bankmachine0_cmd_valid & main_litedramcore_sdram_bankmachine0_cmd_ready) & main_litedramcore_sdram_bankmachine0_cmd_payload_is_write);
assign main_litedramcore_sdram_bankmachine0_trccon_valid = ((main_litedramcore_sdram_bankmachine0_cmd_valid & main_litedramcore_sdram_bankmachine0_cmd_ready) & main_litedramcore_sdram_bankmachine0_row_open);
assign main_litedramcore_sdram_bankmachine0_trascon_valid = ((main_litedramcore_sdram_bankmachine0_cmd_valid & main_litedramcore_sdram_bankmachine0_cmd_ready) & main_litedramcore_sdram_bankmachine0_row_open);
always @(*) begin
    main_litedramcore_sdram_bankmachine0_auto_precharge <= 1'd0;
    if ((main_litedramcore_sdram_bankmachine0_source_valid & main_litedramcore_sdram_bankmachine0_source_source_valid)) begin
        if ((main_litedramcore_sdram_bankmachine0_source_payload_addr[21:7] != main_litedramcore_sdram_bankmachine0_source_source_payload_addr[21:7])) begin
            main_litedramcore_sdram_bankmachine0_auto_precharge <= (main_litedramcore_sdram_bankmachine0_row_close == 1'd0);
        end
    end
end
assign main_litedramcore_sdram_bankmachine0_syncfifo0_din = {main_litedramcore_sdram_bankmachine0_fifo_in_last, main_litedramcore_sdram_bankmachine0_fifo_in_first, main_litedramcore_sdram_bankmachine0_fifo_in_payload_addr, main_litedramcore_sdram_bankmachine0_fifo_in_payload_we};
assign {main_litedramcore_sdram_bankmachine0_fifo_out_last, main_litedramcore_sdram_bankmachine0_fifo_out_first, main_litedramcore_sdram_bankmachine0_fifo_out_payload_addr, main_litedramcore_sdram_bankmachine0_fifo_out_payload_we} = main_litedramcore_sdram_bankmachine0_syncfifo0_dout;
assign {main_litedramcore_sdram_bankmachine0_fifo_out_last, main_litedramcore_sdram_bankmachine0_fifo_out_first, main_litedramcore_sdram_bankmachine0_fifo_out_payload_addr, main_litedramcore_sdram_bankmachine0_fifo_out_payload_we} = main_litedramcore_sdram_bankmachine0_syncfifo0_dout;
assign {main_litedramcore_sdram_bankmachine0_fifo_out_last, main_litedramcore_sdram_bankmachine0_fifo_out_first, main_litedramcore_sdram_bankmachine0_fifo_out_payload_addr, main_litedramcore_sdram_bankmachine0_fifo_out_payload_we} = main_litedramcore_sdram_bankmachine0_syncfifo0_dout;
assign {main_litedramcore_sdram_bankmachine0_fifo_out_last, main_litedramcore_sdram_bankmachine0_fifo_out_first, main_litedramcore_sdram_bankmachine0_fifo_out_payload_addr, main_litedramcore_sdram_bankmachine0_fifo_out_payload_we} = main_litedramcore_sdram_bankmachine0_syncfifo0_dout;
assign main_litedramcore_sdram_bankmachine0_sink_ready = main_litedramcore_sdram_bankmachine0_syncfifo0_writable;
assign main_litedramcore_sdram_bankmachine0_syncfifo0_we = main_litedramcore_sdram_bankmachine0_sink_valid;
assign main_litedramcore_sdram_bankmachine0_fifo_in_first = main_litedramcore_sdram_bankmachine0_sink_first;
assign main_litedramcore_sdram_bankmachine0_fifo_in_last = main_litedramcore_sdram_bankmachine0_sink_last;
assign main_litedramcore_sdram_bankmachine0_fifo_in_payload_we = main_litedramcore_sdram_bankmachine0_sink_payload_we;
assign main_litedramcore_sdram_bankmachine0_fifo_in_payload_addr = main_litedramcore_sdram_bankmachine0_sink_payload_addr;
assign main_litedramcore_sdram_bankmachine0_source_valid = main_litedramcore_sdram_bankmachine0_syncfifo0_readable;
assign main_litedramcore_sdram_bankmachine0_source_first = main_litedramcore_sdram_bankmachine0_fifo_out_first;
assign main_litedramcore_sdram_bankmachine0_source_last = main_litedramcore_sdram_bankmachine0_fifo_out_last;
assign main_litedramcore_sdram_bankmachine0_source_payload_we = main_litedramcore_sdram_bankmachine0_fifo_out_payload_we;
assign main_litedramcore_sdram_bankmachine0_source_payload_addr = main_litedramcore_sdram_bankmachine0_fifo_out_payload_addr;
assign main_litedramcore_sdram_bankmachine0_syncfifo0_re = main_litedramcore_sdram_bankmachine0_source_ready;
always @(*) begin
    main_litedramcore_sdram_bankmachine0_wrport_adr <= 4'd0;
    if (main_litedramcore_sdram_bankmachine0_replace) begin
        main_litedramcore_sdram_bankmachine0_wrport_adr <= (main_litedramcore_sdram_bankmachine0_produce - 1'd1);
    end else begin
        main_litedramcore_sdram_bankmachine0_wrport_adr <= main_litedramcore_sdram_bankmachine0_produce;
    end
end
assign main_litedramcore_sdram_bankmachine0_wrport_dat_w = main_litedramcore_sdram_bankmachine0_syncfifo0_din;
assign main_litedramcore_sdram_bankmachine0_wrport_we = (main_litedramcore_sdram_bankmachine0_syncfifo0_we & (main_litedramcore_sdram_bankmachine0_syncfifo0_writable | main_litedramcore_sdram_bankmachine0_replace));
assign main_litedramcore_sdram_bankmachine0_do_read = (main_litedramcore_sdram_bankmachine0_syncfifo0_readable & main_litedramcore_sdram_bankmachine0_syncfifo0_re);
assign main_litedramcore_sdram_bankmachine0_rdport_adr = main_litedramcore_sdram_bankmachine0_consume;
assign main_litedramcore_sdram_bankmachine0_syncfifo0_dout = main_litedramcore_sdram_bankmachine0_rdport_dat_r;
assign main_litedramcore_sdram_bankmachine0_syncfifo0_writable = (main_litedramcore_sdram_bankmachine0_level != 5'd16);
assign main_litedramcore_sdram_bankmachine0_syncfifo0_readable = (main_litedramcore_sdram_bankmachine0_level != 1'd0);
assign main_litedramcore_sdram_bankmachine0_pipe_valid_sink_ready = ((~main_litedramcore_sdram_bankmachine0_pipe_valid_source_valid) | main_litedramcore_sdram_bankmachine0_pipe_valid_source_ready);
assign main_litedramcore_sdram_bankmachine0_pipe_valid_sink_valid = main_litedramcore_sdram_bankmachine0_sink_sink_valid;
assign main_litedramcore_sdram_bankmachine0_sink_sink_ready = main_litedramcore_sdram_bankmachine0_pipe_valid_sink_ready;
assign main_litedramcore_sdram_bankmachine0_pipe_valid_sink_first = main_litedramcore_sdram_bankmachine0_sink_sink_first;
assign main_litedramcore_sdram_bankmachine0_pipe_valid_sink_last = main_litedramcore_sdram_bankmachine0_sink_sink_last;
assign main_litedramcore_sdram_bankmachine0_pipe_valid_sink_payload_we = main_litedramcore_sdram_bankmachine0_sink_sink_payload_we;
assign main_litedramcore_sdram_bankmachine0_pipe_valid_sink_payload_addr = main_litedramcore_sdram_bankmachine0_sink_sink_payload_addr;
assign main_litedramcore_sdram_bankmachine0_source_source_valid = main_litedramcore_sdram_bankmachine0_pipe_valid_source_valid;
assign main_litedramcore_sdram_bankmachine0_pipe_valid_source_ready = main_litedramcore_sdram_bankmachine0_source_source_ready;
assign main_litedramcore_sdram_bankmachine0_source_source_first = main_litedramcore_sdram_bankmachine0_pipe_valid_source_first;
assign main_litedramcore_sdram_bankmachine0_source_source_last = main_litedramcore_sdram_bankmachine0_pipe_valid_source_last;
assign main_litedramcore_sdram_bankmachine0_source_source_payload_we = main_litedramcore_sdram_bankmachine0_pipe_valid_source_payload_we;
assign main_litedramcore_sdram_bankmachine0_source_source_payload_addr = main_litedramcore_sdram_bankmachine0_pipe_valid_source_payload_addr;
always @(*) begin
    builder_litedramcore_litedramcore_bankmachine0_next_state <= 4'd0;
    builder_litedramcore_litedramcore_bankmachine0_next_state <= builder_litedramcore_litedramcore_bankmachine0_state;
    case (builder_litedramcore_litedramcore_bankmachine0_state)
        1'd1: begin
            if ((main_litedramcore_sdram_bankmachine0_twtpcon_ready & main_litedramcore_sdram_bankmachine0_trascon_ready)) begin
                if (main_litedramcore_sdram_bankmachine0_cmd_ready) begin
                    builder_litedramcore_litedramcore_bankmachine0_next_state <= 3'd5;
                end
            end
        end
        2'd2: begin
            if ((main_litedramcore_sdram_bankmachine0_twtpcon_ready & main_litedramcore_sdram_bankmachine0_trascon_ready)) begin
                builder_litedramcore_litedramcore_bankmachine0_next_state <= 3'd5;
            end
        end
        2'd3: begin
            if (main_litedramcore_sdram_bankmachine0_trccon_ready) begin
                if (main_litedramcore_sdram_bankmachine0_cmd_ready) begin
                    builder_litedramcore_litedramcore_bankmachine0_next_state <= 3'd7;
                end
            end
        end
        3'd4: begin
            if ((~main_litedramcore_sdram_bankmachine0_refresh_req)) begin
                builder_litedramcore_litedramcore_bankmachine0_next_state <= 1'd0;
            end
        end
        3'd5: begin
            builder_litedramcore_litedramcore_bankmachine0_next_state <= 3'd6;
        end
        3'd6: begin
            builder_litedramcore_litedramcore_bankmachine0_next_state <= 2'd3;
        end
        3'd7: begin
            builder_litedramcore_litedramcore_bankmachine0_next_state <= 4'd8;
        end
        4'd8: begin
            builder_litedramcore_litedramcore_bankmachine0_next_state <= 1'd0;
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine0_refresh_req) begin
                builder_litedramcore_litedramcore_bankmachine0_next_state <= 3'd4;
            end else begin
                if (main_litedramcore_sdram_bankmachine0_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine0_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine0_row_hit) begin
                            if ((main_litedramcore_sdram_bankmachine0_cmd_ready & main_litedramcore_sdram_bankmachine0_auto_precharge)) begin
                                builder_litedramcore_litedramcore_bankmachine0_next_state <= 2'd2;
                            end
                        end else begin
                            builder_litedramcore_litedramcore_bankmachine0_next_state <= 1'd1;
                        end
                    end else begin
                        builder_litedramcore_litedramcore_bankmachine0_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine0_cmd_payload_is_cmd <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine0_state)
        1'd1: begin
            if ((main_litedramcore_sdram_bankmachine0_twtpcon_ready & main_litedramcore_sdram_bankmachine0_trascon_ready)) begin
                main_litedramcore_sdram_bankmachine0_cmd_payload_is_cmd <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (main_litedramcore_sdram_bankmachine0_trccon_ready) begin
                main_litedramcore_sdram_bankmachine0_cmd_payload_is_cmd <= 1'd1;
            end
        end
        3'd4: begin
            main_litedramcore_sdram_bankmachine0_cmd_payload_is_cmd <= 1'd1;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine0_cmd_payload_is_read <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine0_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine0_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine0_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine0_row_hit) begin
                            if (main_litedramcore_sdram_bankmachine0_source_source_payload_we) begin
                            end else begin
                                main_litedramcore_sdram_bankmachine0_cmd_payload_is_read <= 1'd1;
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine0_cmd_payload_is_write <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine0_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine0_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine0_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine0_row_hit) begin
                            if (main_litedramcore_sdram_bankmachine0_source_source_payload_we) begin
                                main_litedramcore_sdram_bankmachine0_cmd_payload_is_write <= 1'd1;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine0_req_wdata_ready <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine0_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine0_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine0_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine0_row_hit) begin
                            if (main_litedramcore_sdram_bankmachine0_source_source_payload_we) begin
                                main_litedramcore_sdram_bankmachine0_req_wdata_ready <= main_litedramcore_sdram_bankmachine0_cmd_ready;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine0_req_rdata_valid <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine0_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine0_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine0_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine0_row_hit) begin
                            if (main_litedramcore_sdram_bankmachine0_source_source_payload_we) begin
                            end else begin
                                main_litedramcore_sdram_bankmachine0_req_rdata_valid <= main_litedramcore_sdram_bankmachine0_cmd_ready;
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine0_refresh_gnt <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_litedramcore_sdram_bankmachine0_twtpcon_ready) begin
                main_litedramcore_sdram_bankmachine0_refresh_gnt <= 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine0_row_open <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (main_litedramcore_sdram_bankmachine0_trccon_ready) begin
                main_litedramcore_sdram_bankmachine0_row_open <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine0_cmd_valid <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine0_state)
        1'd1: begin
            if ((main_litedramcore_sdram_bankmachine0_twtpcon_ready & main_litedramcore_sdram_bankmachine0_trascon_ready)) begin
                main_litedramcore_sdram_bankmachine0_cmd_valid <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (main_litedramcore_sdram_bankmachine0_trccon_ready) begin
                main_litedramcore_sdram_bankmachine0_cmd_valid <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine0_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine0_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine0_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine0_row_hit) begin
                            main_litedramcore_sdram_bankmachine0_cmd_valid <= 1'd1;
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine0_row_close <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine0_state)
        1'd1: begin
            main_litedramcore_sdram_bankmachine0_row_close <= 1'd1;
        end
        2'd2: begin
            main_litedramcore_sdram_bankmachine0_row_close <= 1'd1;
        end
        2'd3: begin
        end
        3'd4: begin
            main_litedramcore_sdram_bankmachine0_row_close <= 1'd1;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine0_row_col_n_addr_sel <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (main_litedramcore_sdram_bankmachine0_trccon_ready) begin
                main_litedramcore_sdram_bankmachine0_row_col_n_addr_sel <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine0_cmd_payload_cas <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine0_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine0_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine0_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine0_row_hit) begin
                            main_litedramcore_sdram_bankmachine0_cmd_payload_cas <= 1'd1;
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine0_cmd_payload_ras <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine0_state)
        1'd1: begin
            if ((main_litedramcore_sdram_bankmachine0_twtpcon_ready & main_litedramcore_sdram_bankmachine0_trascon_ready)) begin
                main_litedramcore_sdram_bankmachine0_cmd_payload_ras <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (main_litedramcore_sdram_bankmachine0_trccon_ready) begin
                main_litedramcore_sdram_bankmachine0_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine0_cmd_payload_we <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine0_state)
        1'd1: begin
            if ((main_litedramcore_sdram_bankmachine0_twtpcon_ready & main_litedramcore_sdram_bankmachine0_trascon_ready)) begin
                main_litedramcore_sdram_bankmachine0_cmd_payload_we <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine0_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine0_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine0_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine0_row_hit) begin
                            if (main_litedramcore_sdram_bankmachine0_source_source_payload_we) begin
                                main_litedramcore_sdram_bankmachine0_cmd_payload_we <= 1'd1;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
assign main_litedramcore_sdram_bankmachine1_sink_valid = main_litedramcore_sdram_bankmachine1_req_valid;
assign main_litedramcore_sdram_bankmachine1_req_ready = main_litedramcore_sdram_bankmachine1_sink_ready;
assign main_litedramcore_sdram_bankmachine1_sink_payload_we = main_litedramcore_sdram_bankmachine1_req_we;
assign main_litedramcore_sdram_bankmachine1_sink_payload_addr = main_litedramcore_sdram_bankmachine1_req_addr;
assign main_litedramcore_sdram_bankmachine1_sink_sink_valid = main_litedramcore_sdram_bankmachine1_source_valid;
assign main_litedramcore_sdram_bankmachine1_source_ready = main_litedramcore_sdram_bankmachine1_sink_sink_ready;
assign main_litedramcore_sdram_bankmachine1_sink_sink_first = main_litedramcore_sdram_bankmachine1_source_first;
assign main_litedramcore_sdram_bankmachine1_sink_sink_last = main_litedramcore_sdram_bankmachine1_source_last;
assign main_litedramcore_sdram_bankmachine1_sink_sink_payload_we = main_litedramcore_sdram_bankmachine1_source_payload_we;
assign main_litedramcore_sdram_bankmachine1_sink_sink_payload_addr = main_litedramcore_sdram_bankmachine1_source_payload_addr;
assign main_litedramcore_sdram_bankmachine1_source_source_ready = (main_litedramcore_sdram_bankmachine1_req_wdata_ready | main_litedramcore_sdram_bankmachine1_req_rdata_valid);
assign main_litedramcore_sdram_bankmachine1_req_lock = (main_litedramcore_sdram_bankmachine1_source_valid | main_litedramcore_sdram_bankmachine1_source_source_valid);
assign main_litedramcore_sdram_bankmachine1_row_hit = (main_litedramcore_sdram_bankmachine1_row == main_litedramcore_sdram_bankmachine1_source_source_payload_addr[21:7]);
assign main_litedramcore_sdram_bankmachine1_cmd_payload_ba = 1'd1;
always @(*) begin
    main_litedramcore_sdram_bankmachine1_cmd_payload_a <= 15'd0;
    if (main_litedramcore_sdram_bankmachine1_row_col_n_addr_sel) begin
        main_litedramcore_sdram_bankmachine1_cmd_payload_a <= main_litedramcore_sdram_bankmachine1_source_source_payload_addr[21:7];
    end else begin
        main_litedramcore_sdram_bankmachine1_cmd_payload_a <= ((main_litedramcore_sdram_bankmachine1_auto_precharge <<< 4'd10) | {main_litedramcore_sdram_bankmachine1_source_source_payload_addr[6:0], {3{1'd0}}});
    end
end
assign main_litedramcore_sdram_bankmachine1_twtpcon_valid = ((main_litedramcore_sdram_bankmachine1_cmd_valid & main_litedramcore_sdram_bankmachine1_cmd_ready) & main_litedramcore_sdram_bankmachine1_cmd_payload_is_write);
assign main_litedramcore_sdram_bankmachine1_trccon_valid = ((main_litedramcore_sdram_bankmachine1_cmd_valid & main_litedramcore_sdram_bankmachine1_cmd_ready) & main_litedramcore_sdram_bankmachine1_row_open);
assign main_litedramcore_sdram_bankmachine1_trascon_valid = ((main_litedramcore_sdram_bankmachine1_cmd_valid & main_litedramcore_sdram_bankmachine1_cmd_ready) & main_litedramcore_sdram_bankmachine1_row_open);
always @(*) begin
    main_litedramcore_sdram_bankmachine1_auto_precharge <= 1'd0;
    if ((main_litedramcore_sdram_bankmachine1_source_valid & main_litedramcore_sdram_bankmachine1_source_source_valid)) begin
        if ((main_litedramcore_sdram_bankmachine1_source_payload_addr[21:7] != main_litedramcore_sdram_bankmachine1_source_source_payload_addr[21:7])) begin
            main_litedramcore_sdram_bankmachine1_auto_precharge <= (main_litedramcore_sdram_bankmachine1_row_close == 1'd0);
        end
    end
end
assign main_litedramcore_sdram_bankmachine1_syncfifo1_din = {main_litedramcore_sdram_bankmachine1_fifo_in_last, main_litedramcore_sdram_bankmachine1_fifo_in_first, main_litedramcore_sdram_bankmachine1_fifo_in_payload_addr, main_litedramcore_sdram_bankmachine1_fifo_in_payload_we};
assign {main_litedramcore_sdram_bankmachine1_fifo_out_last, main_litedramcore_sdram_bankmachine1_fifo_out_first, main_litedramcore_sdram_bankmachine1_fifo_out_payload_addr, main_litedramcore_sdram_bankmachine1_fifo_out_payload_we} = main_litedramcore_sdram_bankmachine1_syncfifo1_dout;
assign {main_litedramcore_sdram_bankmachine1_fifo_out_last, main_litedramcore_sdram_bankmachine1_fifo_out_first, main_litedramcore_sdram_bankmachine1_fifo_out_payload_addr, main_litedramcore_sdram_bankmachine1_fifo_out_payload_we} = main_litedramcore_sdram_bankmachine1_syncfifo1_dout;
assign {main_litedramcore_sdram_bankmachine1_fifo_out_last, main_litedramcore_sdram_bankmachine1_fifo_out_first, main_litedramcore_sdram_bankmachine1_fifo_out_payload_addr, main_litedramcore_sdram_bankmachine1_fifo_out_payload_we} = main_litedramcore_sdram_bankmachine1_syncfifo1_dout;
assign {main_litedramcore_sdram_bankmachine1_fifo_out_last, main_litedramcore_sdram_bankmachine1_fifo_out_first, main_litedramcore_sdram_bankmachine1_fifo_out_payload_addr, main_litedramcore_sdram_bankmachine1_fifo_out_payload_we} = main_litedramcore_sdram_bankmachine1_syncfifo1_dout;
assign main_litedramcore_sdram_bankmachine1_sink_ready = main_litedramcore_sdram_bankmachine1_syncfifo1_writable;
assign main_litedramcore_sdram_bankmachine1_syncfifo1_we = main_litedramcore_sdram_bankmachine1_sink_valid;
assign main_litedramcore_sdram_bankmachine1_fifo_in_first = main_litedramcore_sdram_bankmachine1_sink_first;
assign main_litedramcore_sdram_bankmachine1_fifo_in_last = main_litedramcore_sdram_bankmachine1_sink_last;
assign main_litedramcore_sdram_bankmachine1_fifo_in_payload_we = main_litedramcore_sdram_bankmachine1_sink_payload_we;
assign main_litedramcore_sdram_bankmachine1_fifo_in_payload_addr = main_litedramcore_sdram_bankmachine1_sink_payload_addr;
assign main_litedramcore_sdram_bankmachine1_source_valid = main_litedramcore_sdram_bankmachine1_syncfifo1_readable;
assign main_litedramcore_sdram_bankmachine1_source_first = main_litedramcore_sdram_bankmachine1_fifo_out_first;
assign main_litedramcore_sdram_bankmachine1_source_last = main_litedramcore_sdram_bankmachine1_fifo_out_last;
assign main_litedramcore_sdram_bankmachine1_source_payload_we = main_litedramcore_sdram_bankmachine1_fifo_out_payload_we;
assign main_litedramcore_sdram_bankmachine1_source_payload_addr = main_litedramcore_sdram_bankmachine1_fifo_out_payload_addr;
assign main_litedramcore_sdram_bankmachine1_syncfifo1_re = main_litedramcore_sdram_bankmachine1_source_ready;
always @(*) begin
    main_litedramcore_sdram_bankmachine1_wrport_adr <= 4'd0;
    if (main_litedramcore_sdram_bankmachine1_replace) begin
        main_litedramcore_sdram_bankmachine1_wrport_adr <= (main_litedramcore_sdram_bankmachine1_produce - 1'd1);
    end else begin
        main_litedramcore_sdram_bankmachine1_wrport_adr <= main_litedramcore_sdram_bankmachine1_produce;
    end
end
assign main_litedramcore_sdram_bankmachine1_wrport_dat_w = main_litedramcore_sdram_bankmachine1_syncfifo1_din;
assign main_litedramcore_sdram_bankmachine1_wrport_we = (main_litedramcore_sdram_bankmachine1_syncfifo1_we & (main_litedramcore_sdram_bankmachine1_syncfifo1_writable | main_litedramcore_sdram_bankmachine1_replace));
assign main_litedramcore_sdram_bankmachine1_do_read = (main_litedramcore_sdram_bankmachine1_syncfifo1_readable & main_litedramcore_sdram_bankmachine1_syncfifo1_re);
assign main_litedramcore_sdram_bankmachine1_rdport_adr = main_litedramcore_sdram_bankmachine1_consume;
assign main_litedramcore_sdram_bankmachine1_syncfifo1_dout = main_litedramcore_sdram_bankmachine1_rdport_dat_r;
assign main_litedramcore_sdram_bankmachine1_syncfifo1_writable = (main_litedramcore_sdram_bankmachine1_level != 5'd16);
assign main_litedramcore_sdram_bankmachine1_syncfifo1_readable = (main_litedramcore_sdram_bankmachine1_level != 1'd0);
assign main_litedramcore_sdram_bankmachine1_pipe_valid_sink_ready = ((~main_litedramcore_sdram_bankmachine1_pipe_valid_source_valid) | main_litedramcore_sdram_bankmachine1_pipe_valid_source_ready);
assign main_litedramcore_sdram_bankmachine1_pipe_valid_sink_valid = main_litedramcore_sdram_bankmachine1_sink_sink_valid;
assign main_litedramcore_sdram_bankmachine1_sink_sink_ready = main_litedramcore_sdram_bankmachine1_pipe_valid_sink_ready;
assign main_litedramcore_sdram_bankmachine1_pipe_valid_sink_first = main_litedramcore_sdram_bankmachine1_sink_sink_first;
assign main_litedramcore_sdram_bankmachine1_pipe_valid_sink_last = main_litedramcore_sdram_bankmachine1_sink_sink_last;
assign main_litedramcore_sdram_bankmachine1_pipe_valid_sink_payload_we = main_litedramcore_sdram_bankmachine1_sink_sink_payload_we;
assign main_litedramcore_sdram_bankmachine1_pipe_valid_sink_payload_addr = main_litedramcore_sdram_bankmachine1_sink_sink_payload_addr;
assign main_litedramcore_sdram_bankmachine1_source_source_valid = main_litedramcore_sdram_bankmachine1_pipe_valid_source_valid;
assign main_litedramcore_sdram_bankmachine1_pipe_valid_source_ready = main_litedramcore_sdram_bankmachine1_source_source_ready;
assign main_litedramcore_sdram_bankmachine1_source_source_first = main_litedramcore_sdram_bankmachine1_pipe_valid_source_first;
assign main_litedramcore_sdram_bankmachine1_source_source_last = main_litedramcore_sdram_bankmachine1_pipe_valid_source_last;
assign main_litedramcore_sdram_bankmachine1_source_source_payload_we = main_litedramcore_sdram_bankmachine1_pipe_valid_source_payload_we;
assign main_litedramcore_sdram_bankmachine1_source_source_payload_addr = main_litedramcore_sdram_bankmachine1_pipe_valid_source_payload_addr;
always @(*) begin
    builder_litedramcore_litedramcore_bankmachine1_next_state <= 4'd0;
    builder_litedramcore_litedramcore_bankmachine1_next_state <= builder_litedramcore_litedramcore_bankmachine1_state;
    case (builder_litedramcore_litedramcore_bankmachine1_state)
        1'd1: begin
            if ((main_litedramcore_sdram_bankmachine1_twtpcon_ready & main_litedramcore_sdram_bankmachine1_trascon_ready)) begin
                if (main_litedramcore_sdram_bankmachine1_cmd_ready) begin
                    builder_litedramcore_litedramcore_bankmachine1_next_state <= 3'd5;
                end
            end
        end
        2'd2: begin
            if ((main_litedramcore_sdram_bankmachine1_twtpcon_ready & main_litedramcore_sdram_bankmachine1_trascon_ready)) begin
                builder_litedramcore_litedramcore_bankmachine1_next_state <= 3'd5;
            end
        end
        2'd3: begin
            if (main_litedramcore_sdram_bankmachine1_trccon_ready) begin
                if (main_litedramcore_sdram_bankmachine1_cmd_ready) begin
                    builder_litedramcore_litedramcore_bankmachine1_next_state <= 3'd7;
                end
            end
        end
        3'd4: begin
            if ((~main_litedramcore_sdram_bankmachine1_refresh_req)) begin
                builder_litedramcore_litedramcore_bankmachine1_next_state <= 1'd0;
            end
        end
        3'd5: begin
            builder_litedramcore_litedramcore_bankmachine1_next_state <= 3'd6;
        end
        3'd6: begin
            builder_litedramcore_litedramcore_bankmachine1_next_state <= 2'd3;
        end
        3'd7: begin
            builder_litedramcore_litedramcore_bankmachine1_next_state <= 4'd8;
        end
        4'd8: begin
            builder_litedramcore_litedramcore_bankmachine1_next_state <= 1'd0;
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine1_refresh_req) begin
                builder_litedramcore_litedramcore_bankmachine1_next_state <= 3'd4;
            end else begin
                if (main_litedramcore_sdram_bankmachine1_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine1_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine1_row_hit) begin
                            if ((main_litedramcore_sdram_bankmachine1_cmd_ready & main_litedramcore_sdram_bankmachine1_auto_precharge)) begin
                                builder_litedramcore_litedramcore_bankmachine1_next_state <= 2'd2;
                            end
                        end else begin
                            builder_litedramcore_litedramcore_bankmachine1_next_state <= 1'd1;
                        end
                    end else begin
                        builder_litedramcore_litedramcore_bankmachine1_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine1_req_rdata_valid <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine1_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine1_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine1_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine1_row_hit) begin
                            if (main_litedramcore_sdram_bankmachine1_source_source_payload_we) begin
                            end else begin
                                main_litedramcore_sdram_bankmachine1_req_rdata_valid <= main_litedramcore_sdram_bankmachine1_cmd_ready;
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine1_refresh_gnt <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_litedramcore_sdram_bankmachine1_twtpcon_ready) begin
                main_litedramcore_sdram_bankmachine1_refresh_gnt <= 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine1_row_open <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (main_litedramcore_sdram_bankmachine1_trccon_ready) begin
                main_litedramcore_sdram_bankmachine1_row_open <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine1_cmd_valid <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine1_state)
        1'd1: begin
            if ((main_litedramcore_sdram_bankmachine1_twtpcon_ready & main_litedramcore_sdram_bankmachine1_trascon_ready)) begin
                main_litedramcore_sdram_bankmachine1_cmd_valid <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (main_litedramcore_sdram_bankmachine1_trccon_ready) begin
                main_litedramcore_sdram_bankmachine1_cmd_valid <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine1_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine1_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine1_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine1_row_hit) begin
                            main_litedramcore_sdram_bankmachine1_cmd_valid <= 1'd1;
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine1_row_close <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine1_state)
        1'd1: begin
            main_litedramcore_sdram_bankmachine1_row_close <= 1'd1;
        end
        2'd2: begin
            main_litedramcore_sdram_bankmachine1_row_close <= 1'd1;
        end
        2'd3: begin
        end
        3'd4: begin
            main_litedramcore_sdram_bankmachine1_row_close <= 1'd1;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine1_row_col_n_addr_sel <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (main_litedramcore_sdram_bankmachine1_trccon_ready) begin
                main_litedramcore_sdram_bankmachine1_row_col_n_addr_sel <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine1_cmd_payload_cas <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine1_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine1_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine1_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine1_row_hit) begin
                            main_litedramcore_sdram_bankmachine1_cmd_payload_cas <= 1'd1;
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine1_cmd_payload_ras <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine1_state)
        1'd1: begin
            if ((main_litedramcore_sdram_bankmachine1_twtpcon_ready & main_litedramcore_sdram_bankmachine1_trascon_ready)) begin
                main_litedramcore_sdram_bankmachine1_cmd_payload_ras <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (main_litedramcore_sdram_bankmachine1_trccon_ready) begin
                main_litedramcore_sdram_bankmachine1_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine1_cmd_payload_we <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine1_state)
        1'd1: begin
            if ((main_litedramcore_sdram_bankmachine1_twtpcon_ready & main_litedramcore_sdram_bankmachine1_trascon_ready)) begin
                main_litedramcore_sdram_bankmachine1_cmd_payload_we <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine1_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine1_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine1_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine1_row_hit) begin
                            if (main_litedramcore_sdram_bankmachine1_source_source_payload_we) begin
                                main_litedramcore_sdram_bankmachine1_cmd_payload_we <= 1'd1;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine1_cmd_payload_is_cmd <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine1_state)
        1'd1: begin
            if ((main_litedramcore_sdram_bankmachine1_twtpcon_ready & main_litedramcore_sdram_bankmachine1_trascon_ready)) begin
                main_litedramcore_sdram_bankmachine1_cmd_payload_is_cmd <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (main_litedramcore_sdram_bankmachine1_trccon_ready) begin
                main_litedramcore_sdram_bankmachine1_cmd_payload_is_cmd <= 1'd1;
            end
        end
        3'd4: begin
            main_litedramcore_sdram_bankmachine1_cmd_payload_is_cmd <= 1'd1;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine1_cmd_payload_is_read <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine1_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine1_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine1_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine1_row_hit) begin
                            if (main_litedramcore_sdram_bankmachine1_source_source_payload_we) begin
                            end else begin
                                main_litedramcore_sdram_bankmachine1_cmd_payload_is_read <= 1'd1;
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine1_cmd_payload_is_write <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine1_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine1_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine1_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine1_row_hit) begin
                            if (main_litedramcore_sdram_bankmachine1_source_source_payload_we) begin
                                main_litedramcore_sdram_bankmachine1_cmd_payload_is_write <= 1'd1;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine1_req_wdata_ready <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine1_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine1_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine1_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine1_row_hit) begin
                            if (main_litedramcore_sdram_bankmachine1_source_source_payload_we) begin
                                main_litedramcore_sdram_bankmachine1_req_wdata_ready <= main_litedramcore_sdram_bankmachine1_cmd_ready;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
assign main_litedramcore_sdram_bankmachine2_sink_valid = main_litedramcore_sdram_bankmachine2_req_valid;
assign main_litedramcore_sdram_bankmachine2_req_ready = main_litedramcore_sdram_bankmachine2_sink_ready;
assign main_litedramcore_sdram_bankmachine2_sink_payload_we = main_litedramcore_sdram_bankmachine2_req_we;
assign main_litedramcore_sdram_bankmachine2_sink_payload_addr = main_litedramcore_sdram_bankmachine2_req_addr;
assign main_litedramcore_sdram_bankmachine2_sink_sink_valid = main_litedramcore_sdram_bankmachine2_source_valid;
assign main_litedramcore_sdram_bankmachine2_source_ready = main_litedramcore_sdram_bankmachine2_sink_sink_ready;
assign main_litedramcore_sdram_bankmachine2_sink_sink_first = main_litedramcore_sdram_bankmachine2_source_first;
assign main_litedramcore_sdram_bankmachine2_sink_sink_last = main_litedramcore_sdram_bankmachine2_source_last;
assign main_litedramcore_sdram_bankmachine2_sink_sink_payload_we = main_litedramcore_sdram_bankmachine2_source_payload_we;
assign main_litedramcore_sdram_bankmachine2_sink_sink_payload_addr = main_litedramcore_sdram_bankmachine2_source_payload_addr;
assign main_litedramcore_sdram_bankmachine2_source_source_ready = (main_litedramcore_sdram_bankmachine2_req_wdata_ready | main_litedramcore_sdram_bankmachine2_req_rdata_valid);
assign main_litedramcore_sdram_bankmachine2_req_lock = (main_litedramcore_sdram_bankmachine2_source_valid | main_litedramcore_sdram_bankmachine2_source_source_valid);
assign main_litedramcore_sdram_bankmachine2_row_hit = (main_litedramcore_sdram_bankmachine2_row == main_litedramcore_sdram_bankmachine2_source_source_payload_addr[21:7]);
assign main_litedramcore_sdram_bankmachine2_cmd_payload_ba = 2'd2;
always @(*) begin
    main_litedramcore_sdram_bankmachine2_cmd_payload_a <= 15'd0;
    if (main_litedramcore_sdram_bankmachine2_row_col_n_addr_sel) begin
        main_litedramcore_sdram_bankmachine2_cmd_payload_a <= main_litedramcore_sdram_bankmachine2_source_source_payload_addr[21:7];
    end else begin
        main_litedramcore_sdram_bankmachine2_cmd_payload_a <= ((main_litedramcore_sdram_bankmachine2_auto_precharge <<< 4'd10) | {main_litedramcore_sdram_bankmachine2_source_source_payload_addr[6:0], {3{1'd0}}});
    end
end
assign main_litedramcore_sdram_bankmachine2_twtpcon_valid = ((main_litedramcore_sdram_bankmachine2_cmd_valid & main_litedramcore_sdram_bankmachine2_cmd_ready) & main_litedramcore_sdram_bankmachine2_cmd_payload_is_write);
assign main_litedramcore_sdram_bankmachine2_trccon_valid = ((main_litedramcore_sdram_bankmachine2_cmd_valid & main_litedramcore_sdram_bankmachine2_cmd_ready) & main_litedramcore_sdram_bankmachine2_row_open);
assign main_litedramcore_sdram_bankmachine2_trascon_valid = ((main_litedramcore_sdram_bankmachine2_cmd_valid & main_litedramcore_sdram_bankmachine2_cmd_ready) & main_litedramcore_sdram_bankmachine2_row_open);
always @(*) begin
    main_litedramcore_sdram_bankmachine2_auto_precharge <= 1'd0;
    if ((main_litedramcore_sdram_bankmachine2_source_valid & main_litedramcore_sdram_bankmachine2_source_source_valid)) begin
        if ((main_litedramcore_sdram_bankmachine2_source_payload_addr[21:7] != main_litedramcore_sdram_bankmachine2_source_source_payload_addr[21:7])) begin
            main_litedramcore_sdram_bankmachine2_auto_precharge <= (main_litedramcore_sdram_bankmachine2_row_close == 1'd0);
        end
    end
end
assign main_litedramcore_sdram_bankmachine2_syncfifo2_din = {main_litedramcore_sdram_bankmachine2_fifo_in_last, main_litedramcore_sdram_bankmachine2_fifo_in_first, main_litedramcore_sdram_bankmachine2_fifo_in_payload_addr, main_litedramcore_sdram_bankmachine2_fifo_in_payload_we};
assign {main_litedramcore_sdram_bankmachine2_fifo_out_last, main_litedramcore_sdram_bankmachine2_fifo_out_first, main_litedramcore_sdram_bankmachine2_fifo_out_payload_addr, main_litedramcore_sdram_bankmachine2_fifo_out_payload_we} = main_litedramcore_sdram_bankmachine2_syncfifo2_dout;
assign {main_litedramcore_sdram_bankmachine2_fifo_out_last, main_litedramcore_sdram_bankmachine2_fifo_out_first, main_litedramcore_sdram_bankmachine2_fifo_out_payload_addr, main_litedramcore_sdram_bankmachine2_fifo_out_payload_we} = main_litedramcore_sdram_bankmachine2_syncfifo2_dout;
assign {main_litedramcore_sdram_bankmachine2_fifo_out_last, main_litedramcore_sdram_bankmachine2_fifo_out_first, main_litedramcore_sdram_bankmachine2_fifo_out_payload_addr, main_litedramcore_sdram_bankmachine2_fifo_out_payload_we} = main_litedramcore_sdram_bankmachine2_syncfifo2_dout;
assign {main_litedramcore_sdram_bankmachine2_fifo_out_last, main_litedramcore_sdram_bankmachine2_fifo_out_first, main_litedramcore_sdram_bankmachine2_fifo_out_payload_addr, main_litedramcore_sdram_bankmachine2_fifo_out_payload_we} = main_litedramcore_sdram_bankmachine2_syncfifo2_dout;
assign main_litedramcore_sdram_bankmachine2_sink_ready = main_litedramcore_sdram_bankmachine2_syncfifo2_writable;
assign main_litedramcore_sdram_bankmachine2_syncfifo2_we = main_litedramcore_sdram_bankmachine2_sink_valid;
assign main_litedramcore_sdram_bankmachine2_fifo_in_first = main_litedramcore_sdram_bankmachine2_sink_first;
assign main_litedramcore_sdram_bankmachine2_fifo_in_last = main_litedramcore_sdram_bankmachine2_sink_last;
assign main_litedramcore_sdram_bankmachine2_fifo_in_payload_we = main_litedramcore_sdram_bankmachine2_sink_payload_we;
assign main_litedramcore_sdram_bankmachine2_fifo_in_payload_addr = main_litedramcore_sdram_bankmachine2_sink_payload_addr;
assign main_litedramcore_sdram_bankmachine2_source_valid = main_litedramcore_sdram_bankmachine2_syncfifo2_readable;
assign main_litedramcore_sdram_bankmachine2_source_first = main_litedramcore_sdram_bankmachine2_fifo_out_first;
assign main_litedramcore_sdram_bankmachine2_source_last = main_litedramcore_sdram_bankmachine2_fifo_out_last;
assign main_litedramcore_sdram_bankmachine2_source_payload_we = main_litedramcore_sdram_bankmachine2_fifo_out_payload_we;
assign main_litedramcore_sdram_bankmachine2_source_payload_addr = main_litedramcore_sdram_bankmachine2_fifo_out_payload_addr;
assign main_litedramcore_sdram_bankmachine2_syncfifo2_re = main_litedramcore_sdram_bankmachine2_source_ready;
always @(*) begin
    main_litedramcore_sdram_bankmachine2_wrport_adr <= 4'd0;
    if (main_litedramcore_sdram_bankmachine2_replace) begin
        main_litedramcore_sdram_bankmachine2_wrport_adr <= (main_litedramcore_sdram_bankmachine2_produce - 1'd1);
    end else begin
        main_litedramcore_sdram_bankmachine2_wrport_adr <= main_litedramcore_sdram_bankmachine2_produce;
    end
end
assign main_litedramcore_sdram_bankmachine2_wrport_dat_w = main_litedramcore_sdram_bankmachine2_syncfifo2_din;
assign main_litedramcore_sdram_bankmachine2_wrport_we = (main_litedramcore_sdram_bankmachine2_syncfifo2_we & (main_litedramcore_sdram_bankmachine2_syncfifo2_writable | main_litedramcore_sdram_bankmachine2_replace));
assign main_litedramcore_sdram_bankmachine2_do_read = (main_litedramcore_sdram_bankmachine2_syncfifo2_readable & main_litedramcore_sdram_bankmachine2_syncfifo2_re);
assign main_litedramcore_sdram_bankmachine2_rdport_adr = main_litedramcore_sdram_bankmachine2_consume;
assign main_litedramcore_sdram_bankmachine2_syncfifo2_dout = main_litedramcore_sdram_bankmachine2_rdport_dat_r;
assign main_litedramcore_sdram_bankmachine2_syncfifo2_writable = (main_litedramcore_sdram_bankmachine2_level != 5'd16);
assign main_litedramcore_sdram_bankmachine2_syncfifo2_readable = (main_litedramcore_sdram_bankmachine2_level != 1'd0);
assign main_litedramcore_sdram_bankmachine2_pipe_valid_sink_ready = ((~main_litedramcore_sdram_bankmachine2_pipe_valid_source_valid) | main_litedramcore_sdram_bankmachine2_pipe_valid_source_ready);
assign main_litedramcore_sdram_bankmachine2_pipe_valid_sink_valid = main_litedramcore_sdram_bankmachine2_sink_sink_valid;
assign main_litedramcore_sdram_bankmachine2_sink_sink_ready = main_litedramcore_sdram_bankmachine2_pipe_valid_sink_ready;
assign main_litedramcore_sdram_bankmachine2_pipe_valid_sink_first = main_litedramcore_sdram_bankmachine2_sink_sink_first;
assign main_litedramcore_sdram_bankmachine2_pipe_valid_sink_last = main_litedramcore_sdram_bankmachine2_sink_sink_last;
assign main_litedramcore_sdram_bankmachine2_pipe_valid_sink_payload_we = main_litedramcore_sdram_bankmachine2_sink_sink_payload_we;
assign main_litedramcore_sdram_bankmachine2_pipe_valid_sink_payload_addr = main_litedramcore_sdram_bankmachine2_sink_sink_payload_addr;
assign main_litedramcore_sdram_bankmachine2_source_source_valid = main_litedramcore_sdram_bankmachine2_pipe_valid_source_valid;
assign main_litedramcore_sdram_bankmachine2_pipe_valid_source_ready = main_litedramcore_sdram_bankmachine2_source_source_ready;
assign main_litedramcore_sdram_bankmachine2_source_source_first = main_litedramcore_sdram_bankmachine2_pipe_valid_source_first;
assign main_litedramcore_sdram_bankmachine2_source_source_last = main_litedramcore_sdram_bankmachine2_pipe_valid_source_last;
assign main_litedramcore_sdram_bankmachine2_source_source_payload_we = main_litedramcore_sdram_bankmachine2_pipe_valid_source_payload_we;
assign main_litedramcore_sdram_bankmachine2_source_source_payload_addr = main_litedramcore_sdram_bankmachine2_pipe_valid_source_payload_addr;
always @(*) begin
    builder_litedramcore_litedramcore_bankmachine2_next_state <= 4'd0;
    builder_litedramcore_litedramcore_bankmachine2_next_state <= builder_litedramcore_litedramcore_bankmachine2_state;
    case (builder_litedramcore_litedramcore_bankmachine2_state)
        1'd1: begin
            if ((main_litedramcore_sdram_bankmachine2_twtpcon_ready & main_litedramcore_sdram_bankmachine2_trascon_ready)) begin
                if (main_litedramcore_sdram_bankmachine2_cmd_ready) begin
                    builder_litedramcore_litedramcore_bankmachine2_next_state <= 3'd5;
                end
            end
        end
        2'd2: begin
            if ((main_litedramcore_sdram_bankmachine2_twtpcon_ready & main_litedramcore_sdram_bankmachine2_trascon_ready)) begin
                builder_litedramcore_litedramcore_bankmachine2_next_state <= 3'd5;
            end
        end
        2'd3: begin
            if (main_litedramcore_sdram_bankmachine2_trccon_ready) begin
                if (main_litedramcore_sdram_bankmachine2_cmd_ready) begin
                    builder_litedramcore_litedramcore_bankmachine2_next_state <= 3'd7;
                end
            end
        end
        3'd4: begin
            if ((~main_litedramcore_sdram_bankmachine2_refresh_req)) begin
                builder_litedramcore_litedramcore_bankmachine2_next_state <= 1'd0;
            end
        end
        3'd5: begin
            builder_litedramcore_litedramcore_bankmachine2_next_state <= 3'd6;
        end
        3'd6: begin
            builder_litedramcore_litedramcore_bankmachine2_next_state <= 2'd3;
        end
        3'd7: begin
            builder_litedramcore_litedramcore_bankmachine2_next_state <= 4'd8;
        end
        4'd8: begin
            builder_litedramcore_litedramcore_bankmachine2_next_state <= 1'd0;
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine2_refresh_req) begin
                builder_litedramcore_litedramcore_bankmachine2_next_state <= 3'd4;
            end else begin
                if (main_litedramcore_sdram_bankmachine2_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine2_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine2_row_hit) begin
                            if ((main_litedramcore_sdram_bankmachine2_cmd_ready & main_litedramcore_sdram_bankmachine2_auto_precharge)) begin
                                builder_litedramcore_litedramcore_bankmachine2_next_state <= 2'd2;
                            end
                        end else begin
                            builder_litedramcore_litedramcore_bankmachine2_next_state <= 1'd1;
                        end
                    end else begin
                        builder_litedramcore_litedramcore_bankmachine2_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine2_row_col_n_addr_sel <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine2_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (main_litedramcore_sdram_bankmachine2_trccon_ready) begin
                main_litedramcore_sdram_bankmachine2_row_col_n_addr_sel <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine2_cmd_payload_cas <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine2_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine2_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine2_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine2_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine2_row_hit) begin
                            main_litedramcore_sdram_bankmachine2_cmd_payload_cas <= 1'd1;
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine2_cmd_payload_ras <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine2_state)
        1'd1: begin
            if ((main_litedramcore_sdram_bankmachine2_twtpcon_ready & main_litedramcore_sdram_bankmachine2_trascon_ready)) begin
                main_litedramcore_sdram_bankmachine2_cmd_payload_ras <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (main_litedramcore_sdram_bankmachine2_trccon_ready) begin
                main_litedramcore_sdram_bankmachine2_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine2_cmd_payload_we <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine2_state)
        1'd1: begin
            if ((main_litedramcore_sdram_bankmachine2_twtpcon_ready & main_litedramcore_sdram_bankmachine2_trascon_ready)) begin
                main_litedramcore_sdram_bankmachine2_cmd_payload_we <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine2_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine2_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine2_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine2_row_hit) begin
                            if (main_litedramcore_sdram_bankmachine2_source_source_payload_we) begin
                                main_litedramcore_sdram_bankmachine2_cmd_payload_we <= 1'd1;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine2_cmd_payload_is_cmd <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine2_state)
        1'd1: begin
            if ((main_litedramcore_sdram_bankmachine2_twtpcon_ready & main_litedramcore_sdram_bankmachine2_trascon_ready)) begin
                main_litedramcore_sdram_bankmachine2_cmd_payload_is_cmd <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (main_litedramcore_sdram_bankmachine2_trccon_ready) begin
                main_litedramcore_sdram_bankmachine2_cmd_payload_is_cmd <= 1'd1;
            end
        end
        3'd4: begin
            main_litedramcore_sdram_bankmachine2_cmd_payload_is_cmd <= 1'd1;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine2_cmd_payload_is_read <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine2_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine2_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine2_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine2_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine2_row_hit) begin
                            if (main_litedramcore_sdram_bankmachine2_source_source_payload_we) begin
                            end else begin
                                main_litedramcore_sdram_bankmachine2_cmd_payload_is_read <= 1'd1;
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine2_cmd_payload_is_write <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine2_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine2_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine2_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine2_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine2_row_hit) begin
                            if (main_litedramcore_sdram_bankmachine2_source_source_payload_we) begin
                                main_litedramcore_sdram_bankmachine2_cmd_payload_is_write <= 1'd1;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine2_req_wdata_ready <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine2_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine2_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine2_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine2_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine2_row_hit) begin
                            if (main_litedramcore_sdram_bankmachine2_source_source_payload_we) begin
                                main_litedramcore_sdram_bankmachine2_req_wdata_ready <= main_litedramcore_sdram_bankmachine2_cmd_ready;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine2_req_rdata_valid <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine2_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine2_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine2_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine2_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine2_row_hit) begin
                            if (main_litedramcore_sdram_bankmachine2_source_source_payload_we) begin
                            end else begin
                                main_litedramcore_sdram_bankmachine2_req_rdata_valid <= main_litedramcore_sdram_bankmachine2_cmd_ready;
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine2_refresh_gnt <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine2_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_litedramcore_sdram_bankmachine2_twtpcon_ready) begin
                main_litedramcore_sdram_bankmachine2_refresh_gnt <= 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine2_row_open <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine2_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (main_litedramcore_sdram_bankmachine2_trccon_ready) begin
                main_litedramcore_sdram_bankmachine2_row_open <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine2_cmd_valid <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine2_state)
        1'd1: begin
            if ((main_litedramcore_sdram_bankmachine2_twtpcon_ready & main_litedramcore_sdram_bankmachine2_trascon_ready)) begin
                main_litedramcore_sdram_bankmachine2_cmd_valid <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (main_litedramcore_sdram_bankmachine2_trccon_ready) begin
                main_litedramcore_sdram_bankmachine2_cmd_valid <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine2_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine2_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine2_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine2_row_hit) begin
                            main_litedramcore_sdram_bankmachine2_cmd_valid <= 1'd1;
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine2_row_close <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine2_state)
        1'd1: begin
            main_litedramcore_sdram_bankmachine2_row_close <= 1'd1;
        end
        2'd2: begin
            main_litedramcore_sdram_bankmachine2_row_close <= 1'd1;
        end
        2'd3: begin
        end
        3'd4: begin
            main_litedramcore_sdram_bankmachine2_row_close <= 1'd1;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
assign main_litedramcore_sdram_bankmachine3_sink_valid = main_litedramcore_sdram_bankmachine3_req_valid;
assign main_litedramcore_sdram_bankmachine3_req_ready = main_litedramcore_sdram_bankmachine3_sink_ready;
assign main_litedramcore_sdram_bankmachine3_sink_payload_we = main_litedramcore_sdram_bankmachine3_req_we;
assign main_litedramcore_sdram_bankmachine3_sink_payload_addr = main_litedramcore_sdram_bankmachine3_req_addr;
assign main_litedramcore_sdram_bankmachine3_sink_sink_valid = main_litedramcore_sdram_bankmachine3_source_valid;
assign main_litedramcore_sdram_bankmachine3_source_ready = main_litedramcore_sdram_bankmachine3_sink_sink_ready;
assign main_litedramcore_sdram_bankmachine3_sink_sink_first = main_litedramcore_sdram_bankmachine3_source_first;
assign main_litedramcore_sdram_bankmachine3_sink_sink_last = main_litedramcore_sdram_bankmachine3_source_last;
assign main_litedramcore_sdram_bankmachine3_sink_sink_payload_we = main_litedramcore_sdram_bankmachine3_source_payload_we;
assign main_litedramcore_sdram_bankmachine3_sink_sink_payload_addr = main_litedramcore_sdram_bankmachine3_source_payload_addr;
assign main_litedramcore_sdram_bankmachine3_source_source_ready = (main_litedramcore_sdram_bankmachine3_req_wdata_ready | main_litedramcore_sdram_bankmachine3_req_rdata_valid);
assign main_litedramcore_sdram_bankmachine3_req_lock = (main_litedramcore_sdram_bankmachine3_source_valid | main_litedramcore_sdram_bankmachine3_source_source_valid);
assign main_litedramcore_sdram_bankmachine3_row_hit = (main_litedramcore_sdram_bankmachine3_row == main_litedramcore_sdram_bankmachine3_source_source_payload_addr[21:7]);
assign main_litedramcore_sdram_bankmachine3_cmd_payload_ba = 2'd3;
always @(*) begin
    main_litedramcore_sdram_bankmachine3_cmd_payload_a <= 15'd0;
    if (main_litedramcore_sdram_bankmachine3_row_col_n_addr_sel) begin
        main_litedramcore_sdram_bankmachine3_cmd_payload_a <= main_litedramcore_sdram_bankmachine3_source_source_payload_addr[21:7];
    end else begin
        main_litedramcore_sdram_bankmachine3_cmd_payload_a <= ((main_litedramcore_sdram_bankmachine3_auto_precharge <<< 4'd10) | {main_litedramcore_sdram_bankmachine3_source_source_payload_addr[6:0], {3{1'd0}}});
    end
end
assign main_litedramcore_sdram_bankmachine3_twtpcon_valid = ((main_litedramcore_sdram_bankmachine3_cmd_valid & main_litedramcore_sdram_bankmachine3_cmd_ready) & main_litedramcore_sdram_bankmachine3_cmd_payload_is_write);
assign main_litedramcore_sdram_bankmachine3_trccon_valid = ((main_litedramcore_sdram_bankmachine3_cmd_valid & main_litedramcore_sdram_bankmachine3_cmd_ready) & main_litedramcore_sdram_bankmachine3_row_open);
assign main_litedramcore_sdram_bankmachine3_trascon_valid = ((main_litedramcore_sdram_bankmachine3_cmd_valid & main_litedramcore_sdram_bankmachine3_cmd_ready) & main_litedramcore_sdram_bankmachine3_row_open);
always @(*) begin
    main_litedramcore_sdram_bankmachine3_auto_precharge <= 1'd0;
    if ((main_litedramcore_sdram_bankmachine3_source_valid & main_litedramcore_sdram_bankmachine3_source_source_valid)) begin
        if ((main_litedramcore_sdram_bankmachine3_source_payload_addr[21:7] != main_litedramcore_sdram_bankmachine3_source_source_payload_addr[21:7])) begin
            main_litedramcore_sdram_bankmachine3_auto_precharge <= (main_litedramcore_sdram_bankmachine3_row_close == 1'd0);
        end
    end
end
assign main_litedramcore_sdram_bankmachine3_syncfifo3_din = {main_litedramcore_sdram_bankmachine3_fifo_in_last, main_litedramcore_sdram_bankmachine3_fifo_in_first, main_litedramcore_sdram_bankmachine3_fifo_in_payload_addr, main_litedramcore_sdram_bankmachine3_fifo_in_payload_we};
assign {main_litedramcore_sdram_bankmachine3_fifo_out_last, main_litedramcore_sdram_bankmachine3_fifo_out_first, main_litedramcore_sdram_bankmachine3_fifo_out_payload_addr, main_litedramcore_sdram_bankmachine3_fifo_out_payload_we} = main_litedramcore_sdram_bankmachine3_syncfifo3_dout;
assign {main_litedramcore_sdram_bankmachine3_fifo_out_last, main_litedramcore_sdram_bankmachine3_fifo_out_first, main_litedramcore_sdram_bankmachine3_fifo_out_payload_addr, main_litedramcore_sdram_bankmachine3_fifo_out_payload_we} = main_litedramcore_sdram_bankmachine3_syncfifo3_dout;
assign {main_litedramcore_sdram_bankmachine3_fifo_out_last, main_litedramcore_sdram_bankmachine3_fifo_out_first, main_litedramcore_sdram_bankmachine3_fifo_out_payload_addr, main_litedramcore_sdram_bankmachine3_fifo_out_payload_we} = main_litedramcore_sdram_bankmachine3_syncfifo3_dout;
assign {main_litedramcore_sdram_bankmachine3_fifo_out_last, main_litedramcore_sdram_bankmachine3_fifo_out_first, main_litedramcore_sdram_bankmachine3_fifo_out_payload_addr, main_litedramcore_sdram_bankmachine3_fifo_out_payload_we} = main_litedramcore_sdram_bankmachine3_syncfifo3_dout;
assign main_litedramcore_sdram_bankmachine3_sink_ready = main_litedramcore_sdram_bankmachine3_syncfifo3_writable;
assign main_litedramcore_sdram_bankmachine3_syncfifo3_we = main_litedramcore_sdram_bankmachine3_sink_valid;
assign main_litedramcore_sdram_bankmachine3_fifo_in_first = main_litedramcore_sdram_bankmachine3_sink_first;
assign main_litedramcore_sdram_bankmachine3_fifo_in_last = main_litedramcore_sdram_bankmachine3_sink_last;
assign main_litedramcore_sdram_bankmachine3_fifo_in_payload_we = main_litedramcore_sdram_bankmachine3_sink_payload_we;
assign main_litedramcore_sdram_bankmachine3_fifo_in_payload_addr = main_litedramcore_sdram_bankmachine3_sink_payload_addr;
assign main_litedramcore_sdram_bankmachine3_source_valid = main_litedramcore_sdram_bankmachine3_syncfifo3_readable;
assign main_litedramcore_sdram_bankmachine3_source_first = main_litedramcore_sdram_bankmachine3_fifo_out_first;
assign main_litedramcore_sdram_bankmachine3_source_last = main_litedramcore_sdram_bankmachine3_fifo_out_last;
assign main_litedramcore_sdram_bankmachine3_source_payload_we = main_litedramcore_sdram_bankmachine3_fifo_out_payload_we;
assign main_litedramcore_sdram_bankmachine3_source_payload_addr = main_litedramcore_sdram_bankmachine3_fifo_out_payload_addr;
assign main_litedramcore_sdram_bankmachine3_syncfifo3_re = main_litedramcore_sdram_bankmachine3_source_ready;
always @(*) begin
    main_litedramcore_sdram_bankmachine3_wrport_adr <= 4'd0;
    if (main_litedramcore_sdram_bankmachine3_replace) begin
        main_litedramcore_sdram_bankmachine3_wrport_adr <= (main_litedramcore_sdram_bankmachine3_produce - 1'd1);
    end else begin
        main_litedramcore_sdram_bankmachine3_wrport_adr <= main_litedramcore_sdram_bankmachine3_produce;
    end
end
assign main_litedramcore_sdram_bankmachine3_wrport_dat_w = main_litedramcore_sdram_bankmachine3_syncfifo3_din;
assign main_litedramcore_sdram_bankmachine3_wrport_we = (main_litedramcore_sdram_bankmachine3_syncfifo3_we & (main_litedramcore_sdram_bankmachine3_syncfifo3_writable | main_litedramcore_sdram_bankmachine3_replace));
assign main_litedramcore_sdram_bankmachine3_do_read = (main_litedramcore_sdram_bankmachine3_syncfifo3_readable & main_litedramcore_sdram_bankmachine3_syncfifo3_re);
assign main_litedramcore_sdram_bankmachine3_rdport_adr = main_litedramcore_sdram_bankmachine3_consume;
assign main_litedramcore_sdram_bankmachine3_syncfifo3_dout = main_litedramcore_sdram_bankmachine3_rdport_dat_r;
assign main_litedramcore_sdram_bankmachine3_syncfifo3_writable = (main_litedramcore_sdram_bankmachine3_level != 5'd16);
assign main_litedramcore_sdram_bankmachine3_syncfifo3_readable = (main_litedramcore_sdram_bankmachine3_level != 1'd0);
assign main_litedramcore_sdram_bankmachine3_pipe_valid_sink_ready = ((~main_litedramcore_sdram_bankmachine3_pipe_valid_source_valid) | main_litedramcore_sdram_bankmachine3_pipe_valid_source_ready);
assign main_litedramcore_sdram_bankmachine3_pipe_valid_sink_valid = main_litedramcore_sdram_bankmachine3_sink_sink_valid;
assign main_litedramcore_sdram_bankmachine3_sink_sink_ready = main_litedramcore_sdram_bankmachine3_pipe_valid_sink_ready;
assign main_litedramcore_sdram_bankmachine3_pipe_valid_sink_first = main_litedramcore_sdram_bankmachine3_sink_sink_first;
assign main_litedramcore_sdram_bankmachine3_pipe_valid_sink_last = main_litedramcore_sdram_bankmachine3_sink_sink_last;
assign main_litedramcore_sdram_bankmachine3_pipe_valid_sink_payload_we = main_litedramcore_sdram_bankmachine3_sink_sink_payload_we;
assign main_litedramcore_sdram_bankmachine3_pipe_valid_sink_payload_addr = main_litedramcore_sdram_bankmachine3_sink_sink_payload_addr;
assign main_litedramcore_sdram_bankmachine3_source_source_valid = main_litedramcore_sdram_bankmachine3_pipe_valid_source_valid;
assign main_litedramcore_sdram_bankmachine3_pipe_valid_source_ready = main_litedramcore_sdram_bankmachine3_source_source_ready;
assign main_litedramcore_sdram_bankmachine3_source_source_first = main_litedramcore_sdram_bankmachine3_pipe_valid_source_first;
assign main_litedramcore_sdram_bankmachine3_source_source_last = main_litedramcore_sdram_bankmachine3_pipe_valid_source_last;
assign main_litedramcore_sdram_bankmachine3_source_source_payload_we = main_litedramcore_sdram_bankmachine3_pipe_valid_source_payload_we;
assign main_litedramcore_sdram_bankmachine3_source_source_payload_addr = main_litedramcore_sdram_bankmachine3_pipe_valid_source_payload_addr;
always @(*) begin
    builder_litedramcore_litedramcore_bankmachine3_next_state <= 4'd0;
    builder_litedramcore_litedramcore_bankmachine3_next_state <= builder_litedramcore_litedramcore_bankmachine3_state;
    case (builder_litedramcore_litedramcore_bankmachine3_state)
        1'd1: begin
            if ((main_litedramcore_sdram_bankmachine3_twtpcon_ready & main_litedramcore_sdram_bankmachine3_trascon_ready)) begin
                if (main_litedramcore_sdram_bankmachine3_cmd_ready) begin
                    builder_litedramcore_litedramcore_bankmachine3_next_state <= 3'd5;
                end
            end
        end
        2'd2: begin
            if ((main_litedramcore_sdram_bankmachine3_twtpcon_ready & main_litedramcore_sdram_bankmachine3_trascon_ready)) begin
                builder_litedramcore_litedramcore_bankmachine3_next_state <= 3'd5;
            end
        end
        2'd3: begin
            if (main_litedramcore_sdram_bankmachine3_trccon_ready) begin
                if (main_litedramcore_sdram_bankmachine3_cmd_ready) begin
                    builder_litedramcore_litedramcore_bankmachine3_next_state <= 3'd7;
                end
            end
        end
        3'd4: begin
            if ((~main_litedramcore_sdram_bankmachine3_refresh_req)) begin
                builder_litedramcore_litedramcore_bankmachine3_next_state <= 1'd0;
            end
        end
        3'd5: begin
            builder_litedramcore_litedramcore_bankmachine3_next_state <= 3'd6;
        end
        3'd6: begin
            builder_litedramcore_litedramcore_bankmachine3_next_state <= 2'd3;
        end
        3'd7: begin
            builder_litedramcore_litedramcore_bankmachine3_next_state <= 4'd8;
        end
        4'd8: begin
            builder_litedramcore_litedramcore_bankmachine3_next_state <= 1'd0;
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine3_refresh_req) begin
                builder_litedramcore_litedramcore_bankmachine3_next_state <= 3'd4;
            end else begin
                if (main_litedramcore_sdram_bankmachine3_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine3_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine3_row_hit) begin
                            if ((main_litedramcore_sdram_bankmachine3_cmd_ready & main_litedramcore_sdram_bankmachine3_auto_precharge)) begin
                                builder_litedramcore_litedramcore_bankmachine3_next_state <= 2'd2;
                            end
                        end else begin
                            builder_litedramcore_litedramcore_bankmachine3_next_state <= 1'd1;
                        end
                    end else begin
                        builder_litedramcore_litedramcore_bankmachine3_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine3_cmd_payload_cas <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine3_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine3_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine3_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine3_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine3_row_hit) begin
                            main_litedramcore_sdram_bankmachine3_cmd_payload_cas <= 1'd1;
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine3_cmd_payload_ras <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine3_state)
        1'd1: begin
            if ((main_litedramcore_sdram_bankmachine3_twtpcon_ready & main_litedramcore_sdram_bankmachine3_trascon_ready)) begin
                main_litedramcore_sdram_bankmachine3_cmd_payload_ras <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (main_litedramcore_sdram_bankmachine3_trccon_ready) begin
                main_litedramcore_sdram_bankmachine3_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine3_cmd_payload_we <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine3_state)
        1'd1: begin
            if ((main_litedramcore_sdram_bankmachine3_twtpcon_ready & main_litedramcore_sdram_bankmachine3_trascon_ready)) begin
                main_litedramcore_sdram_bankmachine3_cmd_payload_we <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine3_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine3_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine3_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine3_row_hit) begin
                            if (main_litedramcore_sdram_bankmachine3_source_source_payload_we) begin
                                main_litedramcore_sdram_bankmachine3_cmd_payload_we <= 1'd1;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine3_cmd_payload_is_cmd <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine3_state)
        1'd1: begin
            if ((main_litedramcore_sdram_bankmachine3_twtpcon_ready & main_litedramcore_sdram_bankmachine3_trascon_ready)) begin
                main_litedramcore_sdram_bankmachine3_cmd_payload_is_cmd <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (main_litedramcore_sdram_bankmachine3_trccon_ready) begin
                main_litedramcore_sdram_bankmachine3_cmd_payload_is_cmd <= 1'd1;
            end
        end
        3'd4: begin
            main_litedramcore_sdram_bankmachine3_cmd_payload_is_cmd <= 1'd1;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine3_cmd_payload_is_read <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine3_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine3_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine3_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine3_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine3_row_hit) begin
                            if (main_litedramcore_sdram_bankmachine3_source_source_payload_we) begin
                            end else begin
                                main_litedramcore_sdram_bankmachine3_cmd_payload_is_read <= 1'd1;
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine3_cmd_payload_is_write <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine3_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine3_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine3_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine3_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine3_row_hit) begin
                            if (main_litedramcore_sdram_bankmachine3_source_source_payload_we) begin
                                main_litedramcore_sdram_bankmachine3_cmd_payload_is_write <= 1'd1;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine3_req_wdata_ready <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine3_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine3_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine3_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine3_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine3_row_hit) begin
                            if (main_litedramcore_sdram_bankmachine3_source_source_payload_we) begin
                                main_litedramcore_sdram_bankmachine3_req_wdata_ready <= main_litedramcore_sdram_bankmachine3_cmd_ready;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine3_req_rdata_valid <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine3_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine3_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine3_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine3_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine3_row_hit) begin
                            if (main_litedramcore_sdram_bankmachine3_source_source_payload_we) begin
                            end else begin
                                main_litedramcore_sdram_bankmachine3_req_rdata_valid <= main_litedramcore_sdram_bankmachine3_cmd_ready;
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine3_refresh_gnt <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine3_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_litedramcore_sdram_bankmachine3_twtpcon_ready) begin
                main_litedramcore_sdram_bankmachine3_refresh_gnt <= 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine3_row_open <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine3_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (main_litedramcore_sdram_bankmachine3_trccon_ready) begin
                main_litedramcore_sdram_bankmachine3_row_open <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine3_cmd_valid <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine3_state)
        1'd1: begin
            if ((main_litedramcore_sdram_bankmachine3_twtpcon_ready & main_litedramcore_sdram_bankmachine3_trascon_ready)) begin
                main_litedramcore_sdram_bankmachine3_cmd_valid <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (main_litedramcore_sdram_bankmachine3_trccon_ready) begin
                main_litedramcore_sdram_bankmachine3_cmd_valid <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine3_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine3_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine3_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine3_row_hit) begin
                            main_litedramcore_sdram_bankmachine3_cmd_valid <= 1'd1;
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine3_row_close <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine3_state)
        1'd1: begin
            main_litedramcore_sdram_bankmachine3_row_close <= 1'd1;
        end
        2'd2: begin
            main_litedramcore_sdram_bankmachine3_row_close <= 1'd1;
        end
        2'd3: begin
        end
        3'd4: begin
            main_litedramcore_sdram_bankmachine3_row_close <= 1'd1;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine3_row_col_n_addr_sel <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine3_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (main_litedramcore_sdram_bankmachine3_trccon_ready) begin
                main_litedramcore_sdram_bankmachine3_row_col_n_addr_sel <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
assign main_litedramcore_sdram_bankmachine4_sink_valid = main_litedramcore_sdram_bankmachine4_req_valid;
assign main_litedramcore_sdram_bankmachine4_req_ready = main_litedramcore_sdram_bankmachine4_sink_ready;
assign main_litedramcore_sdram_bankmachine4_sink_payload_we = main_litedramcore_sdram_bankmachine4_req_we;
assign main_litedramcore_sdram_bankmachine4_sink_payload_addr = main_litedramcore_sdram_bankmachine4_req_addr;
assign main_litedramcore_sdram_bankmachine4_sink_sink_valid = main_litedramcore_sdram_bankmachine4_source_valid;
assign main_litedramcore_sdram_bankmachine4_source_ready = main_litedramcore_sdram_bankmachine4_sink_sink_ready;
assign main_litedramcore_sdram_bankmachine4_sink_sink_first = main_litedramcore_sdram_bankmachine4_source_first;
assign main_litedramcore_sdram_bankmachine4_sink_sink_last = main_litedramcore_sdram_bankmachine4_source_last;
assign main_litedramcore_sdram_bankmachine4_sink_sink_payload_we = main_litedramcore_sdram_bankmachine4_source_payload_we;
assign main_litedramcore_sdram_bankmachine4_sink_sink_payload_addr = main_litedramcore_sdram_bankmachine4_source_payload_addr;
assign main_litedramcore_sdram_bankmachine4_source_source_ready = (main_litedramcore_sdram_bankmachine4_req_wdata_ready | main_litedramcore_sdram_bankmachine4_req_rdata_valid);
assign main_litedramcore_sdram_bankmachine4_req_lock = (main_litedramcore_sdram_bankmachine4_source_valid | main_litedramcore_sdram_bankmachine4_source_source_valid);
assign main_litedramcore_sdram_bankmachine4_row_hit = (main_litedramcore_sdram_bankmachine4_row == main_litedramcore_sdram_bankmachine4_source_source_payload_addr[21:7]);
assign main_litedramcore_sdram_bankmachine4_cmd_payload_ba = 3'd4;
always @(*) begin
    main_litedramcore_sdram_bankmachine4_cmd_payload_a <= 15'd0;
    if (main_litedramcore_sdram_bankmachine4_row_col_n_addr_sel) begin
        main_litedramcore_sdram_bankmachine4_cmd_payload_a <= main_litedramcore_sdram_bankmachine4_source_source_payload_addr[21:7];
    end else begin
        main_litedramcore_sdram_bankmachine4_cmd_payload_a <= ((main_litedramcore_sdram_bankmachine4_auto_precharge <<< 4'd10) | {main_litedramcore_sdram_bankmachine4_source_source_payload_addr[6:0], {3{1'd0}}});
    end
end
assign main_litedramcore_sdram_bankmachine4_twtpcon_valid = ((main_litedramcore_sdram_bankmachine4_cmd_valid & main_litedramcore_sdram_bankmachine4_cmd_ready) & main_litedramcore_sdram_bankmachine4_cmd_payload_is_write);
assign main_litedramcore_sdram_bankmachine4_trccon_valid = ((main_litedramcore_sdram_bankmachine4_cmd_valid & main_litedramcore_sdram_bankmachine4_cmd_ready) & main_litedramcore_sdram_bankmachine4_row_open);
assign main_litedramcore_sdram_bankmachine4_trascon_valid = ((main_litedramcore_sdram_bankmachine4_cmd_valid & main_litedramcore_sdram_bankmachine4_cmd_ready) & main_litedramcore_sdram_bankmachine4_row_open);
always @(*) begin
    main_litedramcore_sdram_bankmachine4_auto_precharge <= 1'd0;
    if ((main_litedramcore_sdram_bankmachine4_source_valid & main_litedramcore_sdram_bankmachine4_source_source_valid)) begin
        if ((main_litedramcore_sdram_bankmachine4_source_payload_addr[21:7] != main_litedramcore_sdram_bankmachine4_source_source_payload_addr[21:7])) begin
            main_litedramcore_sdram_bankmachine4_auto_precharge <= (main_litedramcore_sdram_bankmachine4_row_close == 1'd0);
        end
    end
end
assign main_litedramcore_sdram_bankmachine4_syncfifo4_din = {main_litedramcore_sdram_bankmachine4_fifo_in_last, main_litedramcore_sdram_bankmachine4_fifo_in_first, main_litedramcore_sdram_bankmachine4_fifo_in_payload_addr, main_litedramcore_sdram_bankmachine4_fifo_in_payload_we};
assign {main_litedramcore_sdram_bankmachine4_fifo_out_last, main_litedramcore_sdram_bankmachine4_fifo_out_first, main_litedramcore_sdram_bankmachine4_fifo_out_payload_addr, main_litedramcore_sdram_bankmachine4_fifo_out_payload_we} = main_litedramcore_sdram_bankmachine4_syncfifo4_dout;
assign {main_litedramcore_sdram_bankmachine4_fifo_out_last, main_litedramcore_sdram_bankmachine4_fifo_out_first, main_litedramcore_sdram_bankmachine4_fifo_out_payload_addr, main_litedramcore_sdram_bankmachine4_fifo_out_payload_we} = main_litedramcore_sdram_bankmachine4_syncfifo4_dout;
assign {main_litedramcore_sdram_bankmachine4_fifo_out_last, main_litedramcore_sdram_bankmachine4_fifo_out_first, main_litedramcore_sdram_bankmachine4_fifo_out_payload_addr, main_litedramcore_sdram_bankmachine4_fifo_out_payload_we} = main_litedramcore_sdram_bankmachine4_syncfifo4_dout;
assign {main_litedramcore_sdram_bankmachine4_fifo_out_last, main_litedramcore_sdram_bankmachine4_fifo_out_first, main_litedramcore_sdram_bankmachine4_fifo_out_payload_addr, main_litedramcore_sdram_bankmachine4_fifo_out_payload_we} = main_litedramcore_sdram_bankmachine4_syncfifo4_dout;
assign main_litedramcore_sdram_bankmachine4_sink_ready = main_litedramcore_sdram_bankmachine4_syncfifo4_writable;
assign main_litedramcore_sdram_bankmachine4_syncfifo4_we = main_litedramcore_sdram_bankmachine4_sink_valid;
assign main_litedramcore_sdram_bankmachine4_fifo_in_first = main_litedramcore_sdram_bankmachine4_sink_first;
assign main_litedramcore_sdram_bankmachine4_fifo_in_last = main_litedramcore_sdram_bankmachine4_sink_last;
assign main_litedramcore_sdram_bankmachine4_fifo_in_payload_we = main_litedramcore_sdram_bankmachine4_sink_payload_we;
assign main_litedramcore_sdram_bankmachine4_fifo_in_payload_addr = main_litedramcore_sdram_bankmachine4_sink_payload_addr;
assign main_litedramcore_sdram_bankmachine4_source_valid = main_litedramcore_sdram_bankmachine4_syncfifo4_readable;
assign main_litedramcore_sdram_bankmachine4_source_first = main_litedramcore_sdram_bankmachine4_fifo_out_first;
assign main_litedramcore_sdram_bankmachine4_source_last = main_litedramcore_sdram_bankmachine4_fifo_out_last;
assign main_litedramcore_sdram_bankmachine4_source_payload_we = main_litedramcore_sdram_bankmachine4_fifo_out_payload_we;
assign main_litedramcore_sdram_bankmachine4_source_payload_addr = main_litedramcore_sdram_bankmachine4_fifo_out_payload_addr;
assign main_litedramcore_sdram_bankmachine4_syncfifo4_re = main_litedramcore_sdram_bankmachine4_source_ready;
always @(*) begin
    main_litedramcore_sdram_bankmachine4_wrport_adr <= 4'd0;
    if (main_litedramcore_sdram_bankmachine4_replace) begin
        main_litedramcore_sdram_bankmachine4_wrport_adr <= (main_litedramcore_sdram_bankmachine4_produce - 1'd1);
    end else begin
        main_litedramcore_sdram_bankmachine4_wrport_adr <= main_litedramcore_sdram_bankmachine4_produce;
    end
end
assign main_litedramcore_sdram_bankmachine4_wrport_dat_w = main_litedramcore_sdram_bankmachine4_syncfifo4_din;
assign main_litedramcore_sdram_bankmachine4_wrport_we = (main_litedramcore_sdram_bankmachine4_syncfifo4_we & (main_litedramcore_sdram_bankmachine4_syncfifo4_writable | main_litedramcore_sdram_bankmachine4_replace));
assign main_litedramcore_sdram_bankmachine4_do_read = (main_litedramcore_sdram_bankmachine4_syncfifo4_readable & main_litedramcore_sdram_bankmachine4_syncfifo4_re);
assign main_litedramcore_sdram_bankmachine4_rdport_adr = main_litedramcore_sdram_bankmachine4_consume;
assign main_litedramcore_sdram_bankmachine4_syncfifo4_dout = main_litedramcore_sdram_bankmachine4_rdport_dat_r;
assign main_litedramcore_sdram_bankmachine4_syncfifo4_writable = (main_litedramcore_sdram_bankmachine4_level != 5'd16);
assign main_litedramcore_sdram_bankmachine4_syncfifo4_readable = (main_litedramcore_sdram_bankmachine4_level != 1'd0);
assign main_litedramcore_sdram_bankmachine4_pipe_valid_sink_ready = ((~main_litedramcore_sdram_bankmachine4_pipe_valid_source_valid) | main_litedramcore_sdram_bankmachine4_pipe_valid_source_ready);
assign main_litedramcore_sdram_bankmachine4_pipe_valid_sink_valid = main_litedramcore_sdram_bankmachine4_sink_sink_valid;
assign main_litedramcore_sdram_bankmachine4_sink_sink_ready = main_litedramcore_sdram_bankmachine4_pipe_valid_sink_ready;
assign main_litedramcore_sdram_bankmachine4_pipe_valid_sink_first = main_litedramcore_sdram_bankmachine4_sink_sink_first;
assign main_litedramcore_sdram_bankmachine4_pipe_valid_sink_last = main_litedramcore_sdram_bankmachine4_sink_sink_last;
assign main_litedramcore_sdram_bankmachine4_pipe_valid_sink_payload_we = main_litedramcore_sdram_bankmachine4_sink_sink_payload_we;
assign main_litedramcore_sdram_bankmachine4_pipe_valid_sink_payload_addr = main_litedramcore_sdram_bankmachine4_sink_sink_payload_addr;
assign main_litedramcore_sdram_bankmachine4_source_source_valid = main_litedramcore_sdram_bankmachine4_pipe_valid_source_valid;
assign main_litedramcore_sdram_bankmachine4_pipe_valid_source_ready = main_litedramcore_sdram_bankmachine4_source_source_ready;
assign main_litedramcore_sdram_bankmachine4_source_source_first = main_litedramcore_sdram_bankmachine4_pipe_valid_source_first;
assign main_litedramcore_sdram_bankmachine4_source_source_last = main_litedramcore_sdram_bankmachine4_pipe_valid_source_last;
assign main_litedramcore_sdram_bankmachine4_source_source_payload_we = main_litedramcore_sdram_bankmachine4_pipe_valid_source_payload_we;
assign main_litedramcore_sdram_bankmachine4_source_source_payload_addr = main_litedramcore_sdram_bankmachine4_pipe_valid_source_payload_addr;
always @(*) begin
    builder_litedramcore_litedramcore_bankmachine4_next_state <= 4'd0;
    builder_litedramcore_litedramcore_bankmachine4_next_state <= builder_litedramcore_litedramcore_bankmachine4_state;
    case (builder_litedramcore_litedramcore_bankmachine4_state)
        1'd1: begin
            if ((main_litedramcore_sdram_bankmachine4_twtpcon_ready & main_litedramcore_sdram_bankmachine4_trascon_ready)) begin
                if (main_litedramcore_sdram_bankmachine4_cmd_ready) begin
                    builder_litedramcore_litedramcore_bankmachine4_next_state <= 3'd5;
                end
            end
        end
        2'd2: begin
            if ((main_litedramcore_sdram_bankmachine4_twtpcon_ready & main_litedramcore_sdram_bankmachine4_trascon_ready)) begin
                builder_litedramcore_litedramcore_bankmachine4_next_state <= 3'd5;
            end
        end
        2'd3: begin
            if (main_litedramcore_sdram_bankmachine4_trccon_ready) begin
                if (main_litedramcore_sdram_bankmachine4_cmd_ready) begin
                    builder_litedramcore_litedramcore_bankmachine4_next_state <= 3'd7;
                end
            end
        end
        3'd4: begin
            if ((~main_litedramcore_sdram_bankmachine4_refresh_req)) begin
                builder_litedramcore_litedramcore_bankmachine4_next_state <= 1'd0;
            end
        end
        3'd5: begin
            builder_litedramcore_litedramcore_bankmachine4_next_state <= 3'd6;
        end
        3'd6: begin
            builder_litedramcore_litedramcore_bankmachine4_next_state <= 2'd3;
        end
        3'd7: begin
            builder_litedramcore_litedramcore_bankmachine4_next_state <= 4'd8;
        end
        4'd8: begin
            builder_litedramcore_litedramcore_bankmachine4_next_state <= 1'd0;
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine4_refresh_req) begin
                builder_litedramcore_litedramcore_bankmachine4_next_state <= 3'd4;
            end else begin
                if (main_litedramcore_sdram_bankmachine4_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine4_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine4_row_hit) begin
                            if ((main_litedramcore_sdram_bankmachine4_cmd_ready & main_litedramcore_sdram_bankmachine4_auto_precharge)) begin
                                builder_litedramcore_litedramcore_bankmachine4_next_state <= 2'd2;
                            end
                        end else begin
                            builder_litedramcore_litedramcore_bankmachine4_next_state <= 1'd1;
                        end
                    end else begin
                        builder_litedramcore_litedramcore_bankmachine4_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine4_cmd_payload_is_cmd <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine4_state)
        1'd1: begin
            if ((main_litedramcore_sdram_bankmachine4_twtpcon_ready & main_litedramcore_sdram_bankmachine4_trascon_ready)) begin
                main_litedramcore_sdram_bankmachine4_cmd_payload_is_cmd <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (main_litedramcore_sdram_bankmachine4_trccon_ready) begin
                main_litedramcore_sdram_bankmachine4_cmd_payload_is_cmd <= 1'd1;
            end
        end
        3'd4: begin
            main_litedramcore_sdram_bankmachine4_cmd_payload_is_cmd <= 1'd1;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine4_cmd_payload_is_read <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine4_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine4_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine4_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine4_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine4_row_hit) begin
                            if (main_litedramcore_sdram_bankmachine4_source_source_payload_we) begin
                            end else begin
                                main_litedramcore_sdram_bankmachine4_cmd_payload_is_read <= 1'd1;
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine4_cmd_payload_is_write <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine4_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine4_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine4_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine4_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine4_row_hit) begin
                            if (main_litedramcore_sdram_bankmachine4_source_source_payload_we) begin
                                main_litedramcore_sdram_bankmachine4_cmd_payload_is_write <= 1'd1;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine4_req_wdata_ready <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine4_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine4_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine4_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine4_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine4_row_hit) begin
                            if (main_litedramcore_sdram_bankmachine4_source_source_payload_we) begin
                                main_litedramcore_sdram_bankmachine4_req_wdata_ready <= main_litedramcore_sdram_bankmachine4_cmd_ready;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine4_req_rdata_valid <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine4_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine4_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine4_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine4_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine4_row_hit) begin
                            if (main_litedramcore_sdram_bankmachine4_source_source_payload_we) begin
                            end else begin
                                main_litedramcore_sdram_bankmachine4_req_rdata_valid <= main_litedramcore_sdram_bankmachine4_cmd_ready;
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine4_refresh_gnt <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine4_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_litedramcore_sdram_bankmachine4_twtpcon_ready) begin
                main_litedramcore_sdram_bankmachine4_refresh_gnt <= 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine4_row_open <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine4_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (main_litedramcore_sdram_bankmachine4_trccon_ready) begin
                main_litedramcore_sdram_bankmachine4_row_open <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine4_cmd_valid <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine4_state)
        1'd1: begin
            if ((main_litedramcore_sdram_bankmachine4_twtpcon_ready & main_litedramcore_sdram_bankmachine4_trascon_ready)) begin
                main_litedramcore_sdram_bankmachine4_cmd_valid <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (main_litedramcore_sdram_bankmachine4_trccon_ready) begin
                main_litedramcore_sdram_bankmachine4_cmd_valid <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine4_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine4_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine4_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine4_row_hit) begin
                            main_litedramcore_sdram_bankmachine4_cmd_valid <= 1'd1;
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine4_row_close <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine4_state)
        1'd1: begin
            main_litedramcore_sdram_bankmachine4_row_close <= 1'd1;
        end
        2'd2: begin
            main_litedramcore_sdram_bankmachine4_row_close <= 1'd1;
        end
        2'd3: begin
        end
        3'd4: begin
            main_litedramcore_sdram_bankmachine4_row_close <= 1'd1;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine4_row_col_n_addr_sel <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine4_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (main_litedramcore_sdram_bankmachine4_trccon_ready) begin
                main_litedramcore_sdram_bankmachine4_row_col_n_addr_sel <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine4_cmd_payload_cas <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine4_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine4_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine4_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine4_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine4_row_hit) begin
                            main_litedramcore_sdram_bankmachine4_cmd_payload_cas <= 1'd1;
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine4_cmd_payload_ras <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine4_state)
        1'd1: begin
            if ((main_litedramcore_sdram_bankmachine4_twtpcon_ready & main_litedramcore_sdram_bankmachine4_trascon_ready)) begin
                main_litedramcore_sdram_bankmachine4_cmd_payload_ras <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (main_litedramcore_sdram_bankmachine4_trccon_ready) begin
                main_litedramcore_sdram_bankmachine4_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine4_cmd_payload_we <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine4_state)
        1'd1: begin
            if ((main_litedramcore_sdram_bankmachine4_twtpcon_ready & main_litedramcore_sdram_bankmachine4_trascon_ready)) begin
                main_litedramcore_sdram_bankmachine4_cmd_payload_we <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine4_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine4_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine4_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine4_row_hit) begin
                            if (main_litedramcore_sdram_bankmachine4_source_source_payload_we) begin
                                main_litedramcore_sdram_bankmachine4_cmd_payload_we <= 1'd1;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
assign main_litedramcore_sdram_bankmachine5_sink_valid = main_litedramcore_sdram_bankmachine5_req_valid;
assign main_litedramcore_sdram_bankmachine5_req_ready = main_litedramcore_sdram_bankmachine5_sink_ready;
assign main_litedramcore_sdram_bankmachine5_sink_payload_we = main_litedramcore_sdram_bankmachine5_req_we;
assign main_litedramcore_sdram_bankmachine5_sink_payload_addr = main_litedramcore_sdram_bankmachine5_req_addr;
assign main_litedramcore_sdram_bankmachine5_sink_sink_valid = main_litedramcore_sdram_bankmachine5_source_valid;
assign main_litedramcore_sdram_bankmachine5_source_ready = main_litedramcore_sdram_bankmachine5_sink_sink_ready;
assign main_litedramcore_sdram_bankmachine5_sink_sink_first = main_litedramcore_sdram_bankmachine5_source_first;
assign main_litedramcore_sdram_bankmachine5_sink_sink_last = main_litedramcore_sdram_bankmachine5_source_last;
assign main_litedramcore_sdram_bankmachine5_sink_sink_payload_we = main_litedramcore_sdram_bankmachine5_source_payload_we;
assign main_litedramcore_sdram_bankmachine5_sink_sink_payload_addr = main_litedramcore_sdram_bankmachine5_source_payload_addr;
assign main_litedramcore_sdram_bankmachine5_source_source_ready = (main_litedramcore_sdram_bankmachine5_req_wdata_ready | main_litedramcore_sdram_bankmachine5_req_rdata_valid);
assign main_litedramcore_sdram_bankmachine5_req_lock = (main_litedramcore_sdram_bankmachine5_source_valid | main_litedramcore_sdram_bankmachine5_source_source_valid);
assign main_litedramcore_sdram_bankmachine5_row_hit = (main_litedramcore_sdram_bankmachine5_row == main_litedramcore_sdram_bankmachine5_source_source_payload_addr[21:7]);
assign main_litedramcore_sdram_bankmachine5_cmd_payload_ba = 3'd5;
always @(*) begin
    main_litedramcore_sdram_bankmachine5_cmd_payload_a <= 15'd0;
    if (main_litedramcore_sdram_bankmachine5_row_col_n_addr_sel) begin
        main_litedramcore_sdram_bankmachine5_cmd_payload_a <= main_litedramcore_sdram_bankmachine5_source_source_payload_addr[21:7];
    end else begin
        main_litedramcore_sdram_bankmachine5_cmd_payload_a <= ((main_litedramcore_sdram_bankmachine5_auto_precharge <<< 4'd10) | {main_litedramcore_sdram_bankmachine5_source_source_payload_addr[6:0], {3{1'd0}}});
    end
end
assign main_litedramcore_sdram_bankmachine5_twtpcon_valid = ((main_litedramcore_sdram_bankmachine5_cmd_valid & main_litedramcore_sdram_bankmachine5_cmd_ready) & main_litedramcore_sdram_bankmachine5_cmd_payload_is_write);
assign main_litedramcore_sdram_bankmachine5_trccon_valid = ((main_litedramcore_sdram_bankmachine5_cmd_valid & main_litedramcore_sdram_bankmachine5_cmd_ready) & main_litedramcore_sdram_bankmachine5_row_open);
assign main_litedramcore_sdram_bankmachine5_trascon_valid = ((main_litedramcore_sdram_bankmachine5_cmd_valid & main_litedramcore_sdram_bankmachine5_cmd_ready) & main_litedramcore_sdram_bankmachine5_row_open);
always @(*) begin
    main_litedramcore_sdram_bankmachine5_auto_precharge <= 1'd0;
    if ((main_litedramcore_sdram_bankmachine5_source_valid & main_litedramcore_sdram_bankmachine5_source_source_valid)) begin
        if ((main_litedramcore_sdram_bankmachine5_source_payload_addr[21:7] != main_litedramcore_sdram_bankmachine5_source_source_payload_addr[21:7])) begin
            main_litedramcore_sdram_bankmachine5_auto_precharge <= (main_litedramcore_sdram_bankmachine5_row_close == 1'd0);
        end
    end
end
assign main_litedramcore_sdram_bankmachine5_syncfifo5_din = {main_litedramcore_sdram_bankmachine5_fifo_in_last, main_litedramcore_sdram_bankmachine5_fifo_in_first, main_litedramcore_sdram_bankmachine5_fifo_in_payload_addr, main_litedramcore_sdram_bankmachine5_fifo_in_payload_we};
assign {main_litedramcore_sdram_bankmachine5_fifo_out_last, main_litedramcore_sdram_bankmachine5_fifo_out_first, main_litedramcore_sdram_bankmachine5_fifo_out_payload_addr, main_litedramcore_sdram_bankmachine5_fifo_out_payload_we} = main_litedramcore_sdram_bankmachine5_syncfifo5_dout;
assign {main_litedramcore_sdram_bankmachine5_fifo_out_last, main_litedramcore_sdram_bankmachine5_fifo_out_first, main_litedramcore_sdram_bankmachine5_fifo_out_payload_addr, main_litedramcore_sdram_bankmachine5_fifo_out_payload_we} = main_litedramcore_sdram_bankmachine5_syncfifo5_dout;
assign {main_litedramcore_sdram_bankmachine5_fifo_out_last, main_litedramcore_sdram_bankmachine5_fifo_out_first, main_litedramcore_sdram_bankmachine5_fifo_out_payload_addr, main_litedramcore_sdram_bankmachine5_fifo_out_payload_we} = main_litedramcore_sdram_bankmachine5_syncfifo5_dout;
assign {main_litedramcore_sdram_bankmachine5_fifo_out_last, main_litedramcore_sdram_bankmachine5_fifo_out_first, main_litedramcore_sdram_bankmachine5_fifo_out_payload_addr, main_litedramcore_sdram_bankmachine5_fifo_out_payload_we} = main_litedramcore_sdram_bankmachine5_syncfifo5_dout;
assign main_litedramcore_sdram_bankmachine5_sink_ready = main_litedramcore_sdram_bankmachine5_syncfifo5_writable;
assign main_litedramcore_sdram_bankmachine5_syncfifo5_we = main_litedramcore_sdram_bankmachine5_sink_valid;
assign main_litedramcore_sdram_bankmachine5_fifo_in_first = main_litedramcore_sdram_bankmachine5_sink_first;
assign main_litedramcore_sdram_bankmachine5_fifo_in_last = main_litedramcore_sdram_bankmachine5_sink_last;
assign main_litedramcore_sdram_bankmachine5_fifo_in_payload_we = main_litedramcore_sdram_bankmachine5_sink_payload_we;
assign main_litedramcore_sdram_bankmachine5_fifo_in_payload_addr = main_litedramcore_sdram_bankmachine5_sink_payload_addr;
assign main_litedramcore_sdram_bankmachine5_source_valid = main_litedramcore_sdram_bankmachine5_syncfifo5_readable;
assign main_litedramcore_sdram_bankmachine5_source_first = main_litedramcore_sdram_bankmachine5_fifo_out_first;
assign main_litedramcore_sdram_bankmachine5_source_last = main_litedramcore_sdram_bankmachine5_fifo_out_last;
assign main_litedramcore_sdram_bankmachine5_source_payload_we = main_litedramcore_sdram_bankmachine5_fifo_out_payload_we;
assign main_litedramcore_sdram_bankmachine5_source_payload_addr = main_litedramcore_sdram_bankmachine5_fifo_out_payload_addr;
assign main_litedramcore_sdram_bankmachine5_syncfifo5_re = main_litedramcore_sdram_bankmachine5_source_ready;
always @(*) begin
    main_litedramcore_sdram_bankmachine5_wrport_adr <= 4'd0;
    if (main_litedramcore_sdram_bankmachine5_replace) begin
        main_litedramcore_sdram_bankmachine5_wrport_adr <= (main_litedramcore_sdram_bankmachine5_produce - 1'd1);
    end else begin
        main_litedramcore_sdram_bankmachine5_wrport_adr <= main_litedramcore_sdram_bankmachine5_produce;
    end
end
assign main_litedramcore_sdram_bankmachine5_wrport_dat_w = main_litedramcore_sdram_bankmachine5_syncfifo5_din;
assign main_litedramcore_sdram_bankmachine5_wrport_we = (main_litedramcore_sdram_bankmachine5_syncfifo5_we & (main_litedramcore_sdram_bankmachine5_syncfifo5_writable | main_litedramcore_sdram_bankmachine5_replace));
assign main_litedramcore_sdram_bankmachine5_do_read = (main_litedramcore_sdram_bankmachine5_syncfifo5_readable & main_litedramcore_sdram_bankmachine5_syncfifo5_re);
assign main_litedramcore_sdram_bankmachine5_rdport_adr = main_litedramcore_sdram_bankmachine5_consume;
assign main_litedramcore_sdram_bankmachine5_syncfifo5_dout = main_litedramcore_sdram_bankmachine5_rdport_dat_r;
assign main_litedramcore_sdram_bankmachine5_syncfifo5_writable = (main_litedramcore_sdram_bankmachine5_level != 5'd16);
assign main_litedramcore_sdram_bankmachine5_syncfifo5_readable = (main_litedramcore_sdram_bankmachine5_level != 1'd0);
assign main_litedramcore_sdram_bankmachine5_pipe_valid_sink_ready = ((~main_litedramcore_sdram_bankmachine5_pipe_valid_source_valid) | main_litedramcore_sdram_bankmachine5_pipe_valid_source_ready);
assign main_litedramcore_sdram_bankmachine5_pipe_valid_sink_valid = main_litedramcore_sdram_bankmachine5_sink_sink_valid;
assign main_litedramcore_sdram_bankmachine5_sink_sink_ready = main_litedramcore_sdram_bankmachine5_pipe_valid_sink_ready;
assign main_litedramcore_sdram_bankmachine5_pipe_valid_sink_first = main_litedramcore_sdram_bankmachine5_sink_sink_first;
assign main_litedramcore_sdram_bankmachine5_pipe_valid_sink_last = main_litedramcore_sdram_bankmachine5_sink_sink_last;
assign main_litedramcore_sdram_bankmachine5_pipe_valid_sink_payload_we = main_litedramcore_sdram_bankmachine5_sink_sink_payload_we;
assign main_litedramcore_sdram_bankmachine5_pipe_valid_sink_payload_addr = main_litedramcore_sdram_bankmachine5_sink_sink_payload_addr;
assign main_litedramcore_sdram_bankmachine5_source_source_valid = main_litedramcore_sdram_bankmachine5_pipe_valid_source_valid;
assign main_litedramcore_sdram_bankmachine5_pipe_valid_source_ready = main_litedramcore_sdram_bankmachine5_source_source_ready;
assign main_litedramcore_sdram_bankmachine5_source_source_first = main_litedramcore_sdram_bankmachine5_pipe_valid_source_first;
assign main_litedramcore_sdram_bankmachine5_source_source_last = main_litedramcore_sdram_bankmachine5_pipe_valid_source_last;
assign main_litedramcore_sdram_bankmachine5_source_source_payload_we = main_litedramcore_sdram_bankmachine5_pipe_valid_source_payload_we;
assign main_litedramcore_sdram_bankmachine5_source_source_payload_addr = main_litedramcore_sdram_bankmachine5_pipe_valid_source_payload_addr;
always @(*) begin
    builder_litedramcore_litedramcore_bankmachine5_next_state <= 4'd0;
    builder_litedramcore_litedramcore_bankmachine5_next_state <= builder_litedramcore_litedramcore_bankmachine5_state;
    case (builder_litedramcore_litedramcore_bankmachine5_state)
        1'd1: begin
            if ((main_litedramcore_sdram_bankmachine5_twtpcon_ready & main_litedramcore_sdram_bankmachine5_trascon_ready)) begin
                if (main_litedramcore_sdram_bankmachine5_cmd_ready) begin
                    builder_litedramcore_litedramcore_bankmachine5_next_state <= 3'd5;
                end
            end
        end
        2'd2: begin
            if ((main_litedramcore_sdram_bankmachine5_twtpcon_ready & main_litedramcore_sdram_bankmachine5_trascon_ready)) begin
                builder_litedramcore_litedramcore_bankmachine5_next_state <= 3'd5;
            end
        end
        2'd3: begin
            if (main_litedramcore_sdram_bankmachine5_trccon_ready) begin
                if (main_litedramcore_sdram_bankmachine5_cmd_ready) begin
                    builder_litedramcore_litedramcore_bankmachine5_next_state <= 3'd7;
                end
            end
        end
        3'd4: begin
            if ((~main_litedramcore_sdram_bankmachine5_refresh_req)) begin
                builder_litedramcore_litedramcore_bankmachine5_next_state <= 1'd0;
            end
        end
        3'd5: begin
            builder_litedramcore_litedramcore_bankmachine5_next_state <= 3'd6;
        end
        3'd6: begin
            builder_litedramcore_litedramcore_bankmachine5_next_state <= 2'd3;
        end
        3'd7: begin
            builder_litedramcore_litedramcore_bankmachine5_next_state <= 4'd8;
        end
        4'd8: begin
            builder_litedramcore_litedramcore_bankmachine5_next_state <= 1'd0;
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine5_refresh_req) begin
                builder_litedramcore_litedramcore_bankmachine5_next_state <= 3'd4;
            end else begin
                if (main_litedramcore_sdram_bankmachine5_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine5_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine5_row_hit) begin
                            if ((main_litedramcore_sdram_bankmachine5_cmd_ready & main_litedramcore_sdram_bankmachine5_auto_precharge)) begin
                                builder_litedramcore_litedramcore_bankmachine5_next_state <= 2'd2;
                            end
                        end else begin
                            builder_litedramcore_litedramcore_bankmachine5_next_state <= 1'd1;
                        end
                    end else begin
                        builder_litedramcore_litedramcore_bankmachine5_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine5_req_rdata_valid <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine5_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine5_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine5_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine5_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine5_row_hit) begin
                            if (main_litedramcore_sdram_bankmachine5_source_source_payload_we) begin
                            end else begin
                                main_litedramcore_sdram_bankmachine5_req_rdata_valid <= main_litedramcore_sdram_bankmachine5_cmd_ready;
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine5_refresh_gnt <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine5_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_litedramcore_sdram_bankmachine5_twtpcon_ready) begin
                main_litedramcore_sdram_bankmachine5_refresh_gnt <= 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine5_row_open <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine5_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (main_litedramcore_sdram_bankmachine5_trccon_ready) begin
                main_litedramcore_sdram_bankmachine5_row_open <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine5_cmd_valid <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine5_state)
        1'd1: begin
            if ((main_litedramcore_sdram_bankmachine5_twtpcon_ready & main_litedramcore_sdram_bankmachine5_trascon_ready)) begin
                main_litedramcore_sdram_bankmachine5_cmd_valid <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (main_litedramcore_sdram_bankmachine5_trccon_ready) begin
                main_litedramcore_sdram_bankmachine5_cmd_valid <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine5_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine5_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine5_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine5_row_hit) begin
                            main_litedramcore_sdram_bankmachine5_cmd_valid <= 1'd1;
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine5_row_close <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine5_state)
        1'd1: begin
            main_litedramcore_sdram_bankmachine5_row_close <= 1'd1;
        end
        2'd2: begin
            main_litedramcore_sdram_bankmachine5_row_close <= 1'd1;
        end
        2'd3: begin
        end
        3'd4: begin
            main_litedramcore_sdram_bankmachine5_row_close <= 1'd1;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine5_row_col_n_addr_sel <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine5_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (main_litedramcore_sdram_bankmachine5_trccon_ready) begin
                main_litedramcore_sdram_bankmachine5_row_col_n_addr_sel <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine5_cmd_payload_cas <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine5_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine5_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine5_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine5_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine5_row_hit) begin
                            main_litedramcore_sdram_bankmachine5_cmd_payload_cas <= 1'd1;
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine5_cmd_payload_ras <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine5_state)
        1'd1: begin
            if ((main_litedramcore_sdram_bankmachine5_twtpcon_ready & main_litedramcore_sdram_bankmachine5_trascon_ready)) begin
                main_litedramcore_sdram_bankmachine5_cmd_payload_ras <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (main_litedramcore_sdram_bankmachine5_trccon_ready) begin
                main_litedramcore_sdram_bankmachine5_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine5_cmd_payload_we <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine5_state)
        1'd1: begin
            if ((main_litedramcore_sdram_bankmachine5_twtpcon_ready & main_litedramcore_sdram_bankmachine5_trascon_ready)) begin
                main_litedramcore_sdram_bankmachine5_cmd_payload_we <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine5_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine5_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine5_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine5_row_hit) begin
                            if (main_litedramcore_sdram_bankmachine5_source_source_payload_we) begin
                                main_litedramcore_sdram_bankmachine5_cmd_payload_we <= 1'd1;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine5_cmd_payload_is_cmd <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine5_state)
        1'd1: begin
            if ((main_litedramcore_sdram_bankmachine5_twtpcon_ready & main_litedramcore_sdram_bankmachine5_trascon_ready)) begin
                main_litedramcore_sdram_bankmachine5_cmd_payload_is_cmd <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (main_litedramcore_sdram_bankmachine5_trccon_ready) begin
                main_litedramcore_sdram_bankmachine5_cmd_payload_is_cmd <= 1'd1;
            end
        end
        3'd4: begin
            main_litedramcore_sdram_bankmachine5_cmd_payload_is_cmd <= 1'd1;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine5_cmd_payload_is_read <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine5_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine5_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine5_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine5_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine5_row_hit) begin
                            if (main_litedramcore_sdram_bankmachine5_source_source_payload_we) begin
                            end else begin
                                main_litedramcore_sdram_bankmachine5_cmd_payload_is_read <= 1'd1;
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine5_cmd_payload_is_write <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine5_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine5_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine5_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine5_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine5_row_hit) begin
                            if (main_litedramcore_sdram_bankmachine5_source_source_payload_we) begin
                                main_litedramcore_sdram_bankmachine5_cmd_payload_is_write <= 1'd1;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine5_req_wdata_ready <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine5_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine5_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine5_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine5_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine5_row_hit) begin
                            if (main_litedramcore_sdram_bankmachine5_source_source_payload_we) begin
                                main_litedramcore_sdram_bankmachine5_req_wdata_ready <= main_litedramcore_sdram_bankmachine5_cmd_ready;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
assign main_litedramcore_sdram_bankmachine6_sink_valid = main_litedramcore_sdram_bankmachine6_req_valid;
assign main_litedramcore_sdram_bankmachine6_req_ready = main_litedramcore_sdram_bankmachine6_sink_ready;
assign main_litedramcore_sdram_bankmachine6_sink_payload_we = main_litedramcore_sdram_bankmachine6_req_we;
assign main_litedramcore_sdram_bankmachine6_sink_payload_addr = main_litedramcore_sdram_bankmachine6_req_addr;
assign main_litedramcore_sdram_bankmachine6_sink_sink_valid = main_litedramcore_sdram_bankmachine6_source_valid;
assign main_litedramcore_sdram_bankmachine6_source_ready = main_litedramcore_sdram_bankmachine6_sink_sink_ready;
assign main_litedramcore_sdram_bankmachine6_sink_sink_first = main_litedramcore_sdram_bankmachine6_source_first;
assign main_litedramcore_sdram_bankmachine6_sink_sink_last = main_litedramcore_sdram_bankmachine6_source_last;
assign main_litedramcore_sdram_bankmachine6_sink_sink_payload_we = main_litedramcore_sdram_bankmachine6_source_payload_we;
assign main_litedramcore_sdram_bankmachine6_sink_sink_payload_addr = main_litedramcore_sdram_bankmachine6_source_payload_addr;
assign main_litedramcore_sdram_bankmachine6_source_source_ready = (main_litedramcore_sdram_bankmachine6_req_wdata_ready | main_litedramcore_sdram_bankmachine6_req_rdata_valid);
assign main_litedramcore_sdram_bankmachine6_req_lock = (main_litedramcore_sdram_bankmachine6_source_valid | main_litedramcore_sdram_bankmachine6_source_source_valid);
assign main_litedramcore_sdram_bankmachine6_row_hit = (main_litedramcore_sdram_bankmachine6_row == main_litedramcore_sdram_bankmachine6_source_source_payload_addr[21:7]);
assign main_litedramcore_sdram_bankmachine6_cmd_payload_ba = 3'd6;
always @(*) begin
    main_litedramcore_sdram_bankmachine6_cmd_payload_a <= 15'd0;
    if (main_litedramcore_sdram_bankmachine6_row_col_n_addr_sel) begin
        main_litedramcore_sdram_bankmachine6_cmd_payload_a <= main_litedramcore_sdram_bankmachine6_source_source_payload_addr[21:7];
    end else begin
        main_litedramcore_sdram_bankmachine6_cmd_payload_a <= ((main_litedramcore_sdram_bankmachine6_auto_precharge <<< 4'd10) | {main_litedramcore_sdram_bankmachine6_source_source_payload_addr[6:0], {3{1'd0}}});
    end
end
assign main_litedramcore_sdram_bankmachine6_twtpcon_valid = ((main_litedramcore_sdram_bankmachine6_cmd_valid & main_litedramcore_sdram_bankmachine6_cmd_ready) & main_litedramcore_sdram_bankmachine6_cmd_payload_is_write);
assign main_litedramcore_sdram_bankmachine6_trccon_valid = ((main_litedramcore_sdram_bankmachine6_cmd_valid & main_litedramcore_sdram_bankmachine6_cmd_ready) & main_litedramcore_sdram_bankmachine6_row_open);
assign main_litedramcore_sdram_bankmachine6_trascon_valid = ((main_litedramcore_sdram_bankmachine6_cmd_valid & main_litedramcore_sdram_bankmachine6_cmd_ready) & main_litedramcore_sdram_bankmachine6_row_open);
always @(*) begin
    main_litedramcore_sdram_bankmachine6_auto_precharge <= 1'd0;
    if ((main_litedramcore_sdram_bankmachine6_source_valid & main_litedramcore_sdram_bankmachine6_source_source_valid)) begin
        if ((main_litedramcore_sdram_bankmachine6_source_payload_addr[21:7] != main_litedramcore_sdram_bankmachine6_source_source_payload_addr[21:7])) begin
            main_litedramcore_sdram_bankmachine6_auto_precharge <= (main_litedramcore_sdram_bankmachine6_row_close == 1'd0);
        end
    end
end
assign main_litedramcore_sdram_bankmachine6_syncfifo6_din = {main_litedramcore_sdram_bankmachine6_fifo_in_last, main_litedramcore_sdram_bankmachine6_fifo_in_first, main_litedramcore_sdram_bankmachine6_fifo_in_payload_addr, main_litedramcore_sdram_bankmachine6_fifo_in_payload_we};
assign {main_litedramcore_sdram_bankmachine6_fifo_out_last, main_litedramcore_sdram_bankmachine6_fifo_out_first, main_litedramcore_sdram_bankmachine6_fifo_out_payload_addr, main_litedramcore_sdram_bankmachine6_fifo_out_payload_we} = main_litedramcore_sdram_bankmachine6_syncfifo6_dout;
assign {main_litedramcore_sdram_bankmachine6_fifo_out_last, main_litedramcore_sdram_bankmachine6_fifo_out_first, main_litedramcore_sdram_bankmachine6_fifo_out_payload_addr, main_litedramcore_sdram_bankmachine6_fifo_out_payload_we} = main_litedramcore_sdram_bankmachine6_syncfifo6_dout;
assign {main_litedramcore_sdram_bankmachine6_fifo_out_last, main_litedramcore_sdram_bankmachine6_fifo_out_first, main_litedramcore_sdram_bankmachine6_fifo_out_payload_addr, main_litedramcore_sdram_bankmachine6_fifo_out_payload_we} = main_litedramcore_sdram_bankmachine6_syncfifo6_dout;
assign {main_litedramcore_sdram_bankmachine6_fifo_out_last, main_litedramcore_sdram_bankmachine6_fifo_out_first, main_litedramcore_sdram_bankmachine6_fifo_out_payload_addr, main_litedramcore_sdram_bankmachine6_fifo_out_payload_we} = main_litedramcore_sdram_bankmachine6_syncfifo6_dout;
assign main_litedramcore_sdram_bankmachine6_sink_ready = main_litedramcore_sdram_bankmachine6_syncfifo6_writable;
assign main_litedramcore_sdram_bankmachine6_syncfifo6_we = main_litedramcore_sdram_bankmachine6_sink_valid;
assign main_litedramcore_sdram_bankmachine6_fifo_in_first = main_litedramcore_sdram_bankmachine6_sink_first;
assign main_litedramcore_sdram_bankmachine6_fifo_in_last = main_litedramcore_sdram_bankmachine6_sink_last;
assign main_litedramcore_sdram_bankmachine6_fifo_in_payload_we = main_litedramcore_sdram_bankmachine6_sink_payload_we;
assign main_litedramcore_sdram_bankmachine6_fifo_in_payload_addr = main_litedramcore_sdram_bankmachine6_sink_payload_addr;
assign main_litedramcore_sdram_bankmachine6_source_valid = main_litedramcore_sdram_bankmachine6_syncfifo6_readable;
assign main_litedramcore_sdram_bankmachine6_source_first = main_litedramcore_sdram_bankmachine6_fifo_out_first;
assign main_litedramcore_sdram_bankmachine6_source_last = main_litedramcore_sdram_bankmachine6_fifo_out_last;
assign main_litedramcore_sdram_bankmachine6_source_payload_we = main_litedramcore_sdram_bankmachine6_fifo_out_payload_we;
assign main_litedramcore_sdram_bankmachine6_source_payload_addr = main_litedramcore_sdram_bankmachine6_fifo_out_payload_addr;
assign main_litedramcore_sdram_bankmachine6_syncfifo6_re = main_litedramcore_sdram_bankmachine6_source_ready;
always @(*) begin
    main_litedramcore_sdram_bankmachine6_wrport_adr <= 4'd0;
    if (main_litedramcore_sdram_bankmachine6_replace) begin
        main_litedramcore_sdram_bankmachine6_wrport_adr <= (main_litedramcore_sdram_bankmachine6_produce - 1'd1);
    end else begin
        main_litedramcore_sdram_bankmachine6_wrport_adr <= main_litedramcore_sdram_bankmachine6_produce;
    end
end
assign main_litedramcore_sdram_bankmachine6_wrport_dat_w = main_litedramcore_sdram_bankmachine6_syncfifo6_din;
assign main_litedramcore_sdram_bankmachine6_wrport_we = (main_litedramcore_sdram_bankmachine6_syncfifo6_we & (main_litedramcore_sdram_bankmachine6_syncfifo6_writable | main_litedramcore_sdram_bankmachine6_replace));
assign main_litedramcore_sdram_bankmachine6_do_read = (main_litedramcore_sdram_bankmachine6_syncfifo6_readable & main_litedramcore_sdram_bankmachine6_syncfifo6_re);
assign main_litedramcore_sdram_bankmachine6_rdport_adr = main_litedramcore_sdram_bankmachine6_consume;
assign main_litedramcore_sdram_bankmachine6_syncfifo6_dout = main_litedramcore_sdram_bankmachine6_rdport_dat_r;
assign main_litedramcore_sdram_bankmachine6_syncfifo6_writable = (main_litedramcore_sdram_bankmachine6_level != 5'd16);
assign main_litedramcore_sdram_bankmachine6_syncfifo6_readable = (main_litedramcore_sdram_bankmachine6_level != 1'd0);
assign main_litedramcore_sdram_bankmachine6_pipe_valid_sink_ready = ((~main_litedramcore_sdram_bankmachine6_pipe_valid_source_valid) | main_litedramcore_sdram_bankmachine6_pipe_valid_source_ready);
assign main_litedramcore_sdram_bankmachine6_pipe_valid_sink_valid = main_litedramcore_sdram_bankmachine6_sink_sink_valid;
assign main_litedramcore_sdram_bankmachine6_sink_sink_ready = main_litedramcore_sdram_bankmachine6_pipe_valid_sink_ready;
assign main_litedramcore_sdram_bankmachine6_pipe_valid_sink_first = main_litedramcore_sdram_bankmachine6_sink_sink_first;
assign main_litedramcore_sdram_bankmachine6_pipe_valid_sink_last = main_litedramcore_sdram_bankmachine6_sink_sink_last;
assign main_litedramcore_sdram_bankmachine6_pipe_valid_sink_payload_we = main_litedramcore_sdram_bankmachine6_sink_sink_payload_we;
assign main_litedramcore_sdram_bankmachine6_pipe_valid_sink_payload_addr = main_litedramcore_sdram_bankmachine6_sink_sink_payload_addr;
assign main_litedramcore_sdram_bankmachine6_source_source_valid = main_litedramcore_sdram_bankmachine6_pipe_valid_source_valid;
assign main_litedramcore_sdram_bankmachine6_pipe_valid_source_ready = main_litedramcore_sdram_bankmachine6_source_source_ready;
assign main_litedramcore_sdram_bankmachine6_source_source_first = main_litedramcore_sdram_bankmachine6_pipe_valid_source_first;
assign main_litedramcore_sdram_bankmachine6_source_source_last = main_litedramcore_sdram_bankmachine6_pipe_valid_source_last;
assign main_litedramcore_sdram_bankmachine6_source_source_payload_we = main_litedramcore_sdram_bankmachine6_pipe_valid_source_payload_we;
assign main_litedramcore_sdram_bankmachine6_source_source_payload_addr = main_litedramcore_sdram_bankmachine6_pipe_valid_source_payload_addr;
always @(*) begin
    builder_litedramcore_litedramcore_bankmachine6_next_state <= 4'd0;
    builder_litedramcore_litedramcore_bankmachine6_next_state <= builder_litedramcore_litedramcore_bankmachine6_state;
    case (builder_litedramcore_litedramcore_bankmachine6_state)
        1'd1: begin
            if ((main_litedramcore_sdram_bankmachine6_twtpcon_ready & main_litedramcore_sdram_bankmachine6_trascon_ready)) begin
                if (main_litedramcore_sdram_bankmachine6_cmd_ready) begin
                    builder_litedramcore_litedramcore_bankmachine6_next_state <= 3'd5;
                end
            end
        end
        2'd2: begin
            if ((main_litedramcore_sdram_bankmachine6_twtpcon_ready & main_litedramcore_sdram_bankmachine6_trascon_ready)) begin
                builder_litedramcore_litedramcore_bankmachine6_next_state <= 3'd5;
            end
        end
        2'd3: begin
            if (main_litedramcore_sdram_bankmachine6_trccon_ready) begin
                if (main_litedramcore_sdram_bankmachine6_cmd_ready) begin
                    builder_litedramcore_litedramcore_bankmachine6_next_state <= 3'd7;
                end
            end
        end
        3'd4: begin
            if ((~main_litedramcore_sdram_bankmachine6_refresh_req)) begin
                builder_litedramcore_litedramcore_bankmachine6_next_state <= 1'd0;
            end
        end
        3'd5: begin
            builder_litedramcore_litedramcore_bankmachine6_next_state <= 3'd6;
        end
        3'd6: begin
            builder_litedramcore_litedramcore_bankmachine6_next_state <= 2'd3;
        end
        3'd7: begin
            builder_litedramcore_litedramcore_bankmachine6_next_state <= 4'd8;
        end
        4'd8: begin
            builder_litedramcore_litedramcore_bankmachine6_next_state <= 1'd0;
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine6_refresh_req) begin
                builder_litedramcore_litedramcore_bankmachine6_next_state <= 3'd4;
            end else begin
                if (main_litedramcore_sdram_bankmachine6_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine6_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine6_row_hit) begin
                            if ((main_litedramcore_sdram_bankmachine6_cmd_ready & main_litedramcore_sdram_bankmachine6_auto_precharge)) begin
                                builder_litedramcore_litedramcore_bankmachine6_next_state <= 2'd2;
                            end
                        end else begin
                            builder_litedramcore_litedramcore_bankmachine6_next_state <= 1'd1;
                        end
                    end else begin
                        builder_litedramcore_litedramcore_bankmachine6_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine6_row_col_n_addr_sel <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine6_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (main_litedramcore_sdram_bankmachine6_trccon_ready) begin
                main_litedramcore_sdram_bankmachine6_row_col_n_addr_sel <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine6_cmd_payload_cas <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine6_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine6_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine6_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine6_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine6_row_hit) begin
                            main_litedramcore_sdram_bankmachine6_cmd_payload_cas <= 1'd1;
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine6_cmd_payload_ras <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine6_state)
        1'd1: begin
            if ((main_litedramcore_sdram_bankmachine6_twtpcon_ready & main_litedramcore_sdram_bankmachine6_trascon_ready)) begin
                main_litedramcore_sdram_bankmachine6_cmd_payload_ras <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (main_litedramcore_sdram_bankmachine6_trccon_ready) begin
                main_litedramcore_sdram_bankmachine6_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine6_cmd_payload_we <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine6_state)
        1'd1: begin
            if ((main_litedramcore_sdram_bankmachine6_twtpcon_ready & main_litedramcore_sdram_bankmachine6_trascon_ready)) begin
                main_litedramcore_sdram_bankmachine6_cmd_payload_we <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine6_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine6_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine6_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine6_row_hit) begin
                            if (main_litedramcore_sdram_bankmachine6_source_source_payload_we) begin
                                main_litedramcore_sdram_bankmachine6_cmd_payload_we <= 1'd1;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine6_cmd_payload_is_cmd <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine6_state)
        1'd1: begin
            if ((main_litedramcore_sdram_bankmachine6_twtpcon_ready & main_litedramcore_sdram_bankmachine6_trascon_ready)) begin
                main_litedramcore_sdram_bankmachine6_cmd_payload_is_cmd <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (main_litedramcore_sdram_bankmachine6_trccon_ready) begin
                main_litedramcore_sdram_bankmachine6_cmd_payload_is_cmd <= 1'd1;
            end
        end
        3'd4: begin
            main_litedramcore_sdram_bankmachine6_cmd_payload_is_cmd <= 1'd1;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine6_cmd_payload_is_read <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine6_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine6_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine6_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine6_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine6_row_hit) begin
                            if (main_litedramcore_sdram_bankmachine6_source_source_payload_we) begin
                            end else begin
                                main_litedramcore_sdram_bankmachine6_cmd_payload_is_read <= 1'd1;
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine6_cmd_payload_is_write <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine6_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine6_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine6_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine6_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine6_row_hit) begin
                            if (main_litedramcore_sdram_bankmachine6_source_source_payload_we) begin
                                main_litedramcore_sdram_bankmachine6_cmd_payload_is_write <= 1'd1;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine6_req_wdata_ready <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine6_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine6_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine6_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine6_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine6_row_hit) begin
                            if (main_litedramcore_sdram_bankmachine6_source_source_payload_we) begin
                                main_litedramcore_sdram_bankmachine6_req_wdata_ready <= main_litedramcore_sdram_bankmachine6_cmd_ready;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine6_req_rdata_valid <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine6_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine6_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine6_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine6_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine6_row_hit) begin
                            if (main_litedramcore_sdram_bankmachine6_source_source_payload_we) begin
                            end else begin
                                main_litedramcore_sdram_bankmachine6_req_rdata_valid <= main_litedramcore_sdram_bankmachine6_cmd_ready;
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine6_refresh_gnt <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine6_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_litedramcore_sdram_bankmachine6_twtpcon_ready) begin
                main_litedramcore_sdram_bankmachine6_refresh_gnt <= 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine6_row_open <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine6_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (main_litedramcore_sdram_bankmachine6_trccon_ready) begin
                main_litedramcore_sdram_bankmachine6_row_open <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine6_cmd_valid <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine6_state)
        1'd1: begin
            if ((main_litedramcore_sdram_bankmachine6_twtpcon_ready & main_litedramcore_sdram_bankmachine6_trascon_ready)) begin
                main_litedramcore_sdram_bankmachine6_cmd_valid <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (main_litedramcore_sdram_bankmachine6_trccon_ready) begin
                main_litedramcore_sdram_bankmachine6_cmd_valid <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine6_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine6_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine6_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine6_row_hit) begin
                            main_litedramcore_sdram_bankmachine6_cmd_valid <= 1'd1;
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine6_row_close <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine6_state)
        1'd1: begin
            main_litedramcore_sdram_bankmachine6_row_close <= 1'd1;
        end
        2'd2: begin
            main_litedramcore_sdram_bankmachine6_row_close <= 1'd1;
        end
        2'd3: begin
        end
        3'd4: begin
            main_litedramcore_sdram_bankmachine6_row_close <= 1'd1;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
assign main_litedramcore_sdram_bankmachine7_sink_valid = main_litedramcore_sdram_bankmachine7_req_valid;
assign main_litedramcore_sdram_bankmachine7_req_ready = main_litedramcore_sdram_bankmachine7_sink_ready;
assign main_litedramcore_sdram_bankmachine7_sink_payload_we = main_litedramcore_sdram_bankmachine7_req_we;
assign main_litedramcore_sdram_bankmachine7_sink_payload_addr = main_litedramcore_sdram_bankmachine7_req_addr;
assign main_litedramcore_sdram_bankmachine7_sink_sink_valid = main_litedramcore_sdram_bankmachine7_source_valid;
assign main_litedramcore_sdram_bankmachine7_source_ready = main_litedramcore_sdram_bankmachine7_sink_sink_ready;
assign main_litedramcore_sdram_bankmachine7_sink_sink_first = main_litedramcore_sdram_bankmachine7_source_first;
assign main_litedramcore_sdram_bankmachine7_sink_sink_last = main_litedramcore_sdram_bankmachine7_source_last;
assign main_litedramcore_sdram_bankmachine7_sink_sink_payload_we = main_litedramcore_sdram_bankmachine7_source_payload_we;
assign main_litedramcore_sdram_bankmachine7_sink_sink_payload_addr = main_litedramcore_sdram_bankmachine7_source_payload_addr;
assign main_litedramcore_sdram_bankmachine7_source_source_ready = (main_litedramcore_sdram_bankmachine7_req_wdata_ready | main_litedramcore_sdram_bankmachine7_req_rdata_valid);
assign main_litedramcore_sdram_bankmachine7_req_lock = (main_litedramcore_sdram_bankmachine7_source_valid | main_litedramcore_sdram_bankmachine7_source_source_valid);
assign main_litedramcore_sdram_bankmachine7_row_hit = (main_litedramcore_sdram_bankmachine7_row == main_litedramcore_sdram_bankmachine7_source_source_payload_addr[21:7]);
assign main_litedramcore_sdram_bankmachine7_cmd_payload_ba = 3'd7;
always @(*) begin
    main_litedramcore_sdram_bankmachine7_cmd_payload_a <= 15'd0;
    if (main_litedramcore_sdram_bankmachine7_row_col_n_addr_sel) begin
        main_litedramcore_sdram_bankmachine7_cmd_payload_a <= main_litedramcore_sdram_bankmachine7_source_source_payload_addr[21:7];
    end else begin
        main_litedramcore_sdram_bankmachine7_cmd_payload_a <= ((main_litedramcore_sdram_bankmachine7_auto_precharge <<< 4'd10) | {main_litedramcore_sdram_bankmachine7_source_source_payload_addr[6:0], {3{1'd0}}});
    end
end
assign main_litedramcore_sdram_bankmachine7_twtpcon_valid = ((main_litedramcore_sdram_bankmachine7_cmd_valid & main_litedramcore_sdram_bankmachine7_cmd_ready) & main_litedramcore_sdram_bankmachine7_cmd_payload_is_write);
assign main_litedramcore_sdram_bankmachine7_trccon_valid = ((main_litedramcore_sdram_bankmachine7_cmd_valid & main_litedramcore_sdram_bankmachine7_cmd_ready) & main_litedramcore_sdram_bankmachine7_row_open);
assign main_litedramcore_sdram_bankmachine7_trascon_valid = ((main_litedramcore_sdram_bankmachine7_cmd_valid & main_litedramcore_sdram_bankmachine7_cmd_ready) & main_litedramcore_sdram_bankmachine7_row_open);
always @(*) begin
    main_litedramcore_sdram_bankmachine7_auto_precharge <= 1'd0;
    if ((main_litedramcore_sdram_bankmachine7_source_valid & main_litedramcore_sdram_bankmachine7_source_source_valid)) begin
        if ((main_litedramcore_sdram_bankmachine7_source_payload_addr[21:7] != main_litedramcore_sdram_bankmachine7_source_source_payload_addr[21:7])) begin
            main_litedramcore_sdram_bankmachine7_auto_precharge <= (main_litedramcore_sdram_bankmachine7_row_close == 1'd0);
        end
    end
end
assign main_litedramcore_sdram_bankmachine7_syncfifo7_din = {main_litedramcore_sdram_bankmachine7_fifo_in_last, main_litedramcore_sdram_bankmachine7_fifo_in_first, main_litedramcore_sdram_bankmachine7_fifo_in_payload_addr, main_litedramcore_sdram_bankmachine7_fifo_in_payload_we};
assign {main_litedramcore_sdram_bankmachine7_fifo_out_last, main_litedramcore_sdram_bankmachine7_fifo_out_first, main_litedramcore_sdram_bankmachine7_fifo_out_payload_addr, main_litedramcore_sdram_bankmachine7_fifo_out_payload_we} = main_litedramcore_sdram_bankmachine7_syncfifo7_dout;
assign {main_litedramcore_sdram_bankmachine7_fifo_out_last, main_litedramcore_sdram_bankmachine7_fifo_out_first, main_litedramcore_sdram_bankmachine7_fifo_out_payload_addr, main_litedramcore_sdram_bankmachine7_fifo_out_payload_we} = main_litedramcore_sdram_bankmachine7_syncfifo7_dout;
assign {main_litedramcore_sdram_bankmachine7_fifo_out_last, main_litedramcore_sdram_bankmachine7_fifo_out_first, main_litedramcore_sdram_bankmachine7_fifo_out_payload_addr, main_litedramcore_sdram_bankmachine7_fifo_out_payload_we} = main_litedramcore_sdram_bankmachine7_syncfifo7_dout;
assign {main_litedramcore_sdram_bankmachine7_fifo_out_last, main_litedramcore_sdram_bankmachine7_fifo_out_first, main_litedramcore_sdram_bankmachine7_fifo_out_payload_addr, main_litedramcore_sdram_bankmachine7_fifo_out_payload_we} = main_litedramcore_sdram_bankmachine7_syncfifo7_dout;
assign main_litedramcore_sdram_bankmachine7_sink_ready = main_litedramcore_sdram_bankmachine7_syncfifo7_writable;
assign main_litedramcore_sdram_bankmachine7_syncfifo7_we = main_litedramcore_sdram_bankmachine7_sink_valid;
assign main_litedramcore_sdram_bankmachine7_fifo_in_first = main_litedramcore_sdram_bankmachine7_sink_first;
assign main_litedramcore_sdram_bankmachine7_fifo_in_last = main_litedramcore_sdram_bankmachine7_sink_last;
assign main_litedramcore_sdram_bankmachine7_fifo_in_payload_we = main_litedramcore_sdram_bankmachine7_sink_payload_we;
assign main_litedramcore_sdram_bankmachine7_fifo_in_payload_addr = main_litedramcore_sdram_bankmachine7_sink_payload_addr;
assign main_litedramcore_sdram_bankmachine7_source_valid = main_litedramcore_sdram_bankmachine7_syncfifo7_readable;
assign main_litedramcore_sdram_bankmachine7_source_first = main_litedramcore_sdram_bankmachine7_fifo_out_first;
assign main_litedramcore_sdram_bankmachine7_source_last = main_litedramcore_sdram_bankmachine7_fifo_out_last;
assign main_litedramcore_sdram_bankmachine7_source_payload_we = main_litedramcore_sdram_bankmachine7_fifo_out_payload_we;
assign main_litedramcore_sdram_bankmachine7_source_payload_addr = main_litedramcore_sdram_bankmachine7_fifo_out_payload_addr;
assign main_litedramcore_sdram_bankmachine7_syncfifo7_re = main_litedramcore_sdram_bankmachine7_source_ready;
always @(*) begin
    main_litedramcore_sdram_bankmachine7_wrport_adr <= 4'd0;
    if (main_litedramcore_sdram_bankmachine7_replace) begin
        main_litedramcore_sdram_bankmachine7_wrport_adr <= (main_litedramcore_sdram_bankmachine7_produce - 1'd1);
    end else begin
        main_litedramcore_sdram_bankmachine7_wrport_adr <= main_litedramcore_sdram_bankmachine7_produce;
    end
end
assign main_litedramcore_sdram_bankmachine7_wrport_dat_w = main_litedramcore_sdram_bankmachine7_syncfifo7_din;
assign main_litedramcore_sdram_bankmachine7_wrport_we = (main_litedramcore_sdram_bankmachine7_syncfifo7_we & (main_litedramcore_sdram_bankmachine7_syncfifo7_writable | main_litedramcore_sdram_bankmachine7_replace));
assign main_litedramcore_sdram_bankmachine7_do_read = (main_litedramcore_sdram_bankmachine7_syncfifo7_readable & main_litedramcore_sdram_bankmachine7_syncfifo7_re);
assign main_litedramcore_sdram_bankmachine7_rdport_adr = main_litedramcore_sdram_bankmachine7_consume;
assign main_litedramcore_sdram_bankmachine7_syncfifo7_dout = main_litedramcore_sdram_bankmachine7_rdport_dat_r;
assign main_litedramcore_sdram_bankmachine7_syncfifo7_writable = (main_litedramcore_sdram_bankmachine7_level != 5'd16);
assign main_litedramcore_sdram_bankmachine7_syncfifo7_readable = (main_litedramcore_sdram_bankmachine7_level != 1'd0);
assign main_litedramcore_sdram_bankmachine7_pipe_valid_sink_ready = ((~main_litedramcore_sdram_bankmachine7_pipe_valid_source_valid) | main_litedramcore_sdram_bankmachine7_pipe_valid_source_ready);
assign main_litedramcore_sdram_bankmachine7_pipe_valid_sink_valid = main_litedramcore_sdram_bankmachine7_sink_sink_valid;
assign main_litedramcore_sdram_bankmachine7_sink_sink_ready = main_litedramcore_sdram_bankmachine7_pipe_valid_sink_ready;
assign main_litedramcore_sdram_bankmachine7_pipe_valid_sink_first = main_litedramcore_sdram_bankmachine7_sink_sink_first;
assign main_litedramcore_sdram_bankmachine7_pipe_valid_sink_last = main_litedramcore_sdram_bankmachine7_sink_sink_last;
assign main_litedramcore_sdram_bankmachine7_pipe_valid_sink_payload_we = main_litedramcore_sdram_bankmachine7_sink_sink_payload_we;
assign main_litedramcore_sdram_bankmachine7_pipe_valid_sink_payload_addr = main_litedramcore_sdram_bankmachine7_sink_sink_payload_addr;
assign main_litedramcore_sdram_bankmachine7_source_source_valid = main_litedramcore_sdram_bankmachine7_pipe_valid_source_valid;
assign main_litedramcore_sdram_bankmachine7_pipe_valid_source_ready = main_litedramcore_sdram_bankmachine7_source_source_ready;
assign main_litedramcore_sdram_bankmachine7_source_source_first = main_litedramcore_sdram_bankmachine7_pipe_valid_source_first;
assign main_litedramcore_sdram_bankmachine7_source_source_last = main_litedramcore_sdram_bankmachine7_pipe_valid_source_last;
assign main_litedramcore_sdram_bankmachine7_source_source_payload_we = main_litedramcore_sdram_bankmachine7_pipe_valid_source_payload_we;
assign main_litedramcore_sdram_bankmachine7_source_source_payload_addr = main_litedramcore_sdram_bankmachine7_pipe_valid_source_payload_addr;
always @(*) begin
    builder_litedramcore_litedramcore_bankmachine7_next_state <= 4'd0;
    builder_litedramcore_litedramcore_bankmachine7_next_state <= builder_litedramcore_litedramcore_bankmachine7_state;
    case (builder_litedramcore_litedramcore_bankmachine7_state)
        1'd1: begin
            if ((main_litedramcore_sdram_bankmachine7_twtpcon_ready & main_litedramcore_sdram_bankmachine7_trascon_ready)) begin
                if (main_litedramcore_sdram_bankmachine7_cmd_ready) begin
                    builder_litedramcore_litedramcore_bankmachine7_next_state <= 3'd5;
                end
            end
        end
        2'd2: begin
            if ((main_litedramcore_sdram_bankmachine7_twtpcon_ready & main_litedramcore_sdram_bankmachine7_trascon_ready)) begin
                builder_litedramcore_litedramcore_bankmachine7_next_state <= 3'd5;
            end
        end
        2'd3: begin
            if (main_litedramcore_sdram_bankmachine7_trccon_ready) begin
                if (main_litedramcore_sdram_bankmachine7_cmd_ready) begin
                    builder_litedramcore_litedramcore_bankmachine7_next_state <= 3'd7;
                end
            end
        end
        3'd4: begin
            if ((~main_litedramcore_sdram_bankmachine7_refresh_req)) begin
                builder_litedramcore_litedramcore_bankmachine7_next_state <= 1'd0;
            end
        end
        3'd5: begin
            builder_litedramcore_litedramcore_bankmachine7_next_state <= 3'd6;
        end
        3'd6: begin
            builder_litedramcore_litedramcore_bankmachine7_next_state <= 2'd3;
        end
        3'd7: begin
            builder_litedramcore_litedramcore_bankmachine7_next_state <= 4'd8;
        end
        4'd8: begin
            builder_litedramcore_litedramcore_bankmachine7_next_state <= 1'd0;
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine7_refresh_req) begin
                builder_litedramcore_litedramcore_bankmachine7_next_state <= 3'd4;
            end else begin
                if (main_litedramcore_sdram_bankmachine7_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine7_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine7_row_hit) begin
                            if ((main_litedramcore_sdram_bankmachine7_cmd_ready & main_litedramcore_sdram_bankmachine7_auto_precharge)) begin
                                builder_litedramcore_litedramcore_bankmachine7_next_state <= 2'd2;
                            end
                        end else begin
                            builder_litedramcore_litedramcore_bankmachine7_next_state <= 1'd1;
                        end
                    end else begin
                        builder_litedramcore_litedramcore_bankmachine7_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine7_cmd_payload_cas <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine7_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine7_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine7_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine7_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine7_row_hit) begin
                            main_litedramcore_sdram_bankmachine7_cmd_payload_cas <= 1'd1;
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine7_cmd_payload_ras <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine7_state)
        1'd1: begin
            if ((main_litedramcore_sdram_bankmachine7_twtpcon_ready & main_litedramcore_sdram_bankmachine7_trascon_ready)) begin
                main_litedramcore_sdram_bankmachine7_cmd_payload_ras <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (main_litedramcore_sdram_bankmachine7_trccon_ready) begin
                main_litedramcore_sdram_bankmachine7_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine7_cmd_payload_we <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine7_state)
        1'd1: begin
            if ((main_litedramcore_sdram_bankmachine7_twtpcon_ready & main_litedramcore_sdram_bankmachine7_trascon_ready)) begin
                main_litedramcore_sdram_bankmachine7_cmd_payload_we <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine7_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine7_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine7_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine7_row_hit) begin
                            if (main_litedramcore_sdram_bankmachine7_source_source_payload_we) begin
                                main_litedramcore_sdram_bankmachine7_cmd_payload_we <= 1'd1;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine7_cmd_payload_is_cmd <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine7_state)
        1'd1: begin
            if ((main_litedramcore_sdram_bankmachine7_twtpcon_ready & main_litedramcore_sdram_bankmachine7_trascon_ready)) begin
                main_litedramcore_sdram_bankmachine7_cmd_payload_is_cmd <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (main_litedramcore_sdram_bankmachine7_trccon_ready) begin
                main_litedramcore_sdram_bankmachine7_cmd_payload_is_cmd <= 1'd1;
            end
        end
        3'd4: begin
            main_litedramcore_sdram_bankmachine7_cmd_payload_is_cmd <= 1'd1;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine7_cmd_payload_is_read <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine7_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine7_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine7_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine7_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine7_row_hit) begin
                            if (main_litedramcore_sdram_bankmachine7_source_source_payload_we) begin
                            end else begin
                                main_litedramcore_sdram_bankmachine7_cmd_payload_is_read <= 1'd1;
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine7_cmd_payload_is_write <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine7_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine7_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine7_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine7_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine7_row_hit) begin
                            if (main_litedramcore_sdram_bankmachine7_source_source_payload_we) begin
                                main_litedramcore_sdram_bankmachine7_cmd_payload_is_write <= 1'd1;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine7_req_wdata_ready <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine7_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine7_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine7_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine7_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine7_row_hit) begin
                            if (main_litedramcore_sdram_bankmachine7_source_source_payload_we) begin
                                main_litedramcore_sdram_bankmachine7_req_wdata_ready <= main_litedramcore_sdram_bankmachine7_cmd_ready;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine7_req_rdata_valid <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine7_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine7_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine7_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine7_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine7_row_hit) begin
                            if (main_litedramcore_sdram_bankmachine7_source_source_payload_we) begin
                            end else begin
                                main_litedramcore_sdram_bankmachine7_req_rdata_valid <= main_litedramcore_sdram_bankmachine7_cmd_ready;
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine7_refresh_gnt <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine7_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_litedramcore_sdram_bankmachine7_twtpcon_ready) begin
                main_litedramcore_sdram_bankmachine7_refresh_gnt <= 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine7_row_open <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine7_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (main_litedramcore_sdram_bankmachine7_trccon_ready) begin
                main_litedramcore_sdram_bankmachine7_row_open <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine7_cmd_valid <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine7_state)
        1'd1: begin
            if ((main_litedramcore_sdram_bankmachine7_twtpcon_ready & main_litedramcore_sdram_bankmachine7_trascon_ready)) begin
                main_litedramcore_sdram_bankmachine7_cmd_valid <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (main_litedramcore_sdram_bankmachine7_trccon_ready) begin
                main_litedramcore_sdram_bankmachine7_cmd_valid <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
            if (main_litedramcore_sdram_bankmachine7_refresh_req) begin
            end else begin
                if (main_litedramcore_sdram_bankmachine7_source_source_valid) begin
                    if (main_litedramcore_sdram_bankmachine7_row_opened) begin
                        if (main_litedramcore_sdram_bankmachine7_row_hit) begin
                            main_litedramcore_sdram_bankmachine7_cmd_valid <= 1'd1;
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine7_row_close <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine7_state)
        1'd1: begin
            main_litedramcore_sdram_bankmachine7_row_close <= 1'd1;
        end
        2'd2: begin
            main_litedramcore_sdram_bankmachine7_row_close <= 1'd1;
        end
        2'd3: begin
        end
        3'd4: begin
            main_litedramcore_sdram_bankmachine7_row_close <= 1'd1;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_bankmachine7_row_col_n_addr_sel <= 1'd0;
    case (builder_litedramcore_litedramcore_bankmachine7_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (main_litedramcore_sdram_bankmachine7_trccon_ready) begin
                main_litedramcore_sdram_bankmachine7_row_col_n_addr_sel <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        default: begin
        end
    endcase
end
assign main_litedramcore_sdram_rdcmdphase = (main_a7ddrphy_rdphase_storage - 1'd1);
assign main_litedramcore_sdram_wrcmdphase = (main_a7ddrphy_wrphase_storage - 1'd1);
assign main_litedramcore_sdram_trrdcon_valid = ((main_litedramcore_sdram_choose_cmd_cmd_valid & main_litedramcore_sdram_choose_cmd_cmd_ready) & ((main_litedramcore_sdram_choose_cmd_cmd_payload_ras & (~main_litedramcore_sdram_choose_cmd_cmd_payload_cas)) & (~main_litedramcore_sdram_choose_cmd_cmd_payload_we)));
assign main_litedramcore_sdram_tfawcon_valid = ((main_litedramcore_sdram_choose_cmd_cmd_valid & main_litedramcore_sdram_choose_cmd_cmd_ready) & ((main_litedramcore_sdram_choose_cmd_cmd_payload_ras & (~main_litedramcore_sdram_choose_cmd_cmd_payload_cas)) & (~main_litedramcore_sdram_choose_cmd_cmd_payload_we)));
assign main_litedramcore_sdram_ras_allowed = (main_litedramcore_sdram_trrdcon_ready & main_litedramcore_sdram_tfawcon_ready);
assign main_litedramcore_sdram_tccdcon_valid = ((main_litedramcore_sdram_choose_req_cmd_valid & main_litedramcore_sdram_choose_req_cmd_ready) & (main_litedramcore_sdram_choose_req_cmd_payload_is_write | main_litedramcore_sdram_choose_req_cmd_payload_is_read));
assign main_litedramcore_sdram_cas_allowed = main_litedramcore_sdram_tccdcon_ready;
assign main_litedramcore_sdram_twtrcon_valid = ((main_litedramcore_sdram_choose_req_cmd_valid & main_litedramcore_sdram_choose_req_cmd_ready) & main_litedramcore_sdram_choose_req_cmd_payload_is_write);
assign main_litedramcore_sdram_read_available = ((((((((main_litedramcore_sdram_bankmachine0_cmd_valid & main_litedramcore_sdram_bankmachine0_cmd_payload_is_read) | (main_litedramcore_sdram_bankmachine1_cmd_valid & main_litedramcore_sdram_bankmachine1_cmd_payload_is_read)) | (main_litedramcore_sdram_bankmachine2_cmd_valid & main_litedramcore_sdram_bankmachine2_cmd_payload_is_read)) | (main_litedramcore_sdram_bankmachine3_cmd_valid & main_litedramcore_sdram_bankmachine3_cmd_payload_is_read)) | (main_litedramcore_sdram_bankmachine4_cmd_valid & main_litedramcore_sdram_bankmachine4_cmd_payload_is_read)) | (main_litedramcore_sdram_bankmachine5_cmd_valid & main_litedramcore_sdram_bankmachine5_cmd_payload_is_read)) | (main_litedramcore_sdram_bankmachine6_cmd_valid & main_litedramcore_sdram_bankmachine6_cmd_payload_is_read)) | (main_litedramcore_sdram_bankmachine7_cmd_valid & main_litedramcore_sdram_bankmachine7_cmd_payload_is_read));
assign main_litedramcore_sdram_write_available = ((((((((main_litedramcore_sdram_bankmachine0_cmd_valid & main_litedramcore_sdram_bankmachine0_cmd_payload_is_write) | (main_litedramcore_sdram_bankmachine1_cmd_valid & main_litedramcore_sdram_bankmachine1_cmd_payload_is_write)) | (main_litedramcore_sdram_bankmachine2_cmd_valid & main_litedramcore_sdram_bankmachine2_cmd_payload_is_write)) | (main_litedramcore_sdram_bankmachine3_cmd_valid & main_litedramcore_sdram_bankmachine3_cmd_payload_is_write)) | (main_litedramcore_sdram_bankmachine4_cmd_valid & main_litedramcore_sdram_bankmachine4_cmd_payload_is_write)) | (main_litedramcore_sdram_bankmachine5_cmd_valid & main_litedramcore_sdram_bankmachine5_cmd_payload_is_write)) | (main_litedramcore_sdram_bankmachine6_cmd_valid & main_litedramcore_sdram_bankmachine6_cmd_payload_is_write)) | (main_litedramcore_sdram_bankmachine7_cmd_valid & main_litedramcore_sdram_bankmachine7_cmd_payload_is_write));
assign main_litedramcore_sdram_max_time0 = (main_litedramcore_sdram_time0 == 1'd0);
assign main_litedramcore_sdram_max_time1 = (main_litedramcore_sdram_time1 == 1'd0);
assign main_litedramcore_sdram_bankmachine0_refresh_req = main_litedramcore_sdram_cmd_valid;
assign main_litedramcore_sdram_bankmachine1_refresh_req = main_litedramcore_sdram_cmd_valid;
assign main_litedramcore_sdram_bankmachine2_refresh_req = main_litedramcore_sdram_cmd_valid;
assign main_litedramcore_sdram_bankmachine3_refresh_req = main_litedramcore_sdram_cmd_valid;
assign main_litedramcore_sdram_bankmachine4_refresh_req = main_litedramcore_sdram_cmd_valid;
assign main_litedramcore_sdram_bankmachine5_refresh_req = main_litedramcore_sdram_cmd_valid;
assign main_litedramcore_sdram_bankmachine6_refresh_req = main_litedramcore_sdram_cmd_valid;
assign main_litedramcore_sdram_bankmachine7_refresh_req = main_litedramcore_sdram_cmd_valid;
assign main_litedramcore_sdram_go_to_refresh = (((((((main_litedramcore_sdram_bankmachine0_refresh_gnt & main_litedramcore_sdram_bankmachine1_refresh_gnt) & main_litedramcore_sdram_bankmachine2_refresh_gnt) & main_litedramcore_sdram_bankmachine3_refresh_gnt) & main_litedramcore_sdram_bankmachine4_refresh_gnt) & main_litedramcore_sdram_bankmachine5_refresh_gnt) & main_litedramcore_sdram_bankmachine6_refresh_gnt) & main_litedramcore_sdram_bankmachine7_refresh_gnt);
assign main_litedramcore_sdram_interface_rdata = {main_litedramcore_sdram_dfi_p3_rddata, main_litedramcore_sdram_dfi_p2_rddata, main_litedramcore_sdram_dfi_p1_rddata, main_litedramcore_sdram_dfi_p0_rddata};
assign {main_litedramcore_sdram_dfi_p3_wrdata, main_litedramcore_sdram_dfi_p2_wrdata, main_litedramcore_sdram_dfi_p1_wrdata, main_litedramcore_sdram_dfi_p0_wrdata} = main_litedramcore_sdram_interface_wdata;
assign {main_litedramcore_sdram_dfi_p3_wrdata, main_litedramcore_sdram_dfi_p2_wrdata, main_litedramcore_sdram_dfi_p1_wrdata, main_litedramcore_sdram_dfi_p0_wrdata} = main_litedramcore_sdram_interface_wdata;
assign {main_litedramcore_sdram_dfi_p3_wrdata, main_litedramcore_sdram_dfi_p2_wrdata, main_litedramcore_sdram_dfi_p1_wrdata, main_litedramcore_sdram_dfi_p0_wrdata} = main_litedramcore_sdram_interface_wdata;
assign {main_litedramcore_sdram_dfi_p3_wrdata, main_litedramcore_sdram_dfi_p2_wrdata, main_litedramcore_sdram_dfi_p1_wrdata, main_litedramcore_sdram_dfi_p0_wrdata} = main_litedramcore_sdram_interface_wdata;
assign {main_litedramcore_sdram_dfi_p3_wrdata_mask, main_litedramcore_sdram_dfi_p2_wrdata_mask, main_litedramcore_sdram_dfi_p1_wrdata_mask, main_litedramcore_sdram_dfi_p0_wrdata_mask} = (~main_litedramcore_sdram_interface_wdata_we);
assign {main_litedramcore_sdram_dfi_p3_wrdata_mask, main_litedramcore_sdram_dfi_p2_wrdata_mask, main_litedramcore_sdram_dfi_p1_wrdata_mask, main_litedramcore_sdram_dfi_p0_wrdata_mask} = (~main_litedramcore_sdram_interface_wdata_we);
assign {main_litedramcore_sdram_dfi_p3_wrdata_mask, main_litedramcore_sdram_dfi_p2_wrdata_mask, main_litedramcore_sdram_dfi_p1_wrdata_mask, main_litedramcore_sdram_dfi_p0_wrdata_mask} = (~main_litedramcore_sdram_interface_wdata_we);
assign {main_litedramcore_sdram_dfi_p3_wrdata_mask, main_litedramcore_sdram_dfi_p2_wrdata_mask, main_litedramcore_sdram_dfi_p1_wrdata_mask, main_litedramcore_sdram_dfi_p0_wrdata_mask} = (~main_litedramcore_sdram_interface_wdata_we);
always @(*) begin
    main_litedramcore_sdram_choose_cmd_valids <= 8'd0;
    main_litedramcore_sdram_choose_cmd_valids[0] <= (main_litedramcore_sdram_bankmachine0_cmd_valid & (((main_litedramcore_sdram_bankmachine0_cmd_payload_is_cmd & main_litedramcore_sdram_choose_cmd_want_cmds) & ((~((main_litedramcore_sdram_bankmachine0_cmd_payload_ras & (~main_litedramcore_sdram_bankmachine0_cmd_payload_cas)) & (~main_litedramcore_sdram_bankmachine0_cmd_payload_we))) | main_litedramcore_sdram_choose_cmd_want_activates)) | ((main_litedramcore_sdram_bankmachine0_cmd_payload_is_read == main_litedramcore_sdram_choose_cmd_want_reads) & (main_litedramcore_sdram_bankmachine0_cmd_payload_is_write == main_litedramcore_sdram_choose_cmd_want_writes))));
    main_litedramcore_sdram_choose_cmd_valids[1] <= (main_litedramcore_sdram_bankmachine1_cmd_valid & (((main_litedramcore_sdram_bankmachine1_cmd_payload_is_cmd & main_litedramcore_sdram_choose_cmd_want_cmds) & ((~((main_litedramcore_sdram_bankmachine1_cmd_payload_ras & (~main_litedramcore_sdram_bankmachine1_cmd_payload_cas)) & (~main_litedramcore_sdram_bankmachine1_cmd_payload_we))) | main_litedramcore_sdram_choose_cmd_want_activates)) | ((main_litedramcore_sdram_bankmachine1_cmd_payload_is_read == main_litedramcore_sdram_choose_cmd_want_reads) & (main_litedramcore_sdram_bankmachine1_cmd_payload_is_write == main_litedramcore_sdram_choose_cmd_want_writes))));
    main_litedramcore_sdram_choose_cmd_valids[2] <= (main_litedramcore_sdram_bankmachine2_cmd_valid & (((main_litedramcore_sdram_bankmachine2_cmd_payload_is_cmd & main_litedramcore_sdram_choose_cmd_want_cmds) & ((~((main_litedramcore_sdram_bankmachine2_cmd_payload_ras & (~main_litedramcore_sdram_bankmachine2_cmd_payload_cas)) & (~main_litedramcore_sdram_bankmachine2_cmd_payload_we))) | main_litedramcore_sdram_choose_cmd_want_activates)) | ((main_litedramcore_sdram_bankmachine2_cmd_payload_is_read == main_litedramcore_sdram_choose_cmd_want_reads) & (main_litedramcore_sdram_bankmachine2_cmd_payload_is_write == main_litedramcore_sdram_choose_cmd_want_writes))));
    main_litedramcore_sdram_choose_cmd_valids[3] <= (main_litedramcore_sdram_bankmachine3_cmd_valid & (((main_litedramcore_sdram_bankmachine3_cmd_payload_is_cmd & main_litedramcore_sdram_choose_cmd_want_cmds) & ((~((main_litedramcore_sdram_bankmachine3_cmd_payload_ras & (~main_litedramcore_sdram_bankmachine3_cmd_payload_cas)) & (~main_litedramcore_sdram_bankmachine3_cmd_payload_we))) | main_litedramcore_sdram_choose_cmd_want_activates)) | ((main_litedramcore_sdram_bankmachine3_cmd_payload_is_read == main_litedramcore_sdram_choose_cmd_want_reads) & (main_litedramcore_sdram_bankmachine3_cmd_payload_is_write == main_litedramcore_sdram_choose_cmd_want_writes))));
    main_litedramcore_sdram_choose_cmd_valids[4] <= (main_litedramcore_sdram_bankmachine4_cmd_valid & (((main_litedramcore_sdram_bankmachine4_cmd_payload_is_cmd & main_litedramcore_sdram_choose_cmd_want_cmds) & ((~((main_litedramcore_sdram_bankmachine4_cmd_payload_ras & (~main_litedramcore_sdram_bankmachine4_cmd_payload_cas)) & (~main_litedramcore_sdram_bankmachine4_cmd_payload_we))) | main_litedramcore_sdram_choose_cmd_want_activates)) | ((main_litedramcore_sdram_bankmachine4_cmd_payload_is_read == main_litedramcore_sdram_choose_cmd_want_reads) & (main_litedramcore_sdram_bankmachine4_cmd_payload_is_write == main_litedramcore_sdram_choose_cmd_want_writes))));
    main_litedramcore_sdram_choose_cmd_valids[5] <= (main_litedramcore_sdram_bankmachine5_cmd_valid & (((main_litedramcore_sdram_bankmachine5_cmd_payload_is_cmd & main_litedramcore_sdram_choose_cmd_want_cmds) & ((~((main_litedramcore_sdram_bankmachine5_cmd_payload_ras & (~main_litedramcore_sdram_bankmachine5_cmd_payload_cas)) & (~main_litedramcore_sdram_bankmachine5_cmd_payload_we))) | main_litedramcore_sdram_choose_cmd_want_activates)) | ((main_litedramcore_sdram_bankmachine5_cmd_payload_is_read == main_litedramcore_sdram_choose_cmd_want_reads) & (main_litedramcore_sdram_bankmachine5_cmd_payload_is_write == main_litedramcore_sdram_choose_cmd_want_writes))));
    main_litedramcore_sdram_choose_cmd_valids[6] <= (main_litedramcore_sdram_bankmachine6_cmd_valid & (((main_litedramcore_sdram_bankmachine6_cmd_payload_is_cmd & main_litedramcore_sdram_choose_cmd_want_cmds) & ((~((main_litedramcore_sdram_bankmachine6_cmd_payload_ras & (~main_litedramcore_sdram_bankmachine6_cmd_payload_cas)) & (~main_litedramcore_sdram_bankmachine6_cmd_payload_we))) | main_litedramcore_sdram_choose_cmd_want_activates)) | ((main_litedramcore_sdram_bankmachine6_cmd_payload_is_read == main_litedramcore_sdram_choose_cmd_want_reads) & (main_litedramcore_sdram_bankmachine6_cmd_payload_is_write == main_litedramcore_sdram_choose_cmd_want_writes))));
    main_litedramcore_sdram_choose_cmd_valids[7] <= (main_litedramcore_sdram_bankmachine7_cmd_valid & (((main_litedramcore_sdram_bankmachine7_cmd_payload_is_cmd & main_litedramcore_sdram_choose_cmd_want_cmds) & ((~((main_litedramcore_sdram_bankmachine7_cmd_payload_ras & (~main_litedramcore_sdram_bankmachine7_cmd_payload_cas)) & (~main_litedramcore_sdram_bankmachine7_cmd_payload_we))) | main_litedramcore_sdram_choose_cmd_want_activates)) | ((main_litedramcore_sdram_bankmachine7_cmd_payload_is_read == main_litedramcore_sdram_choose_cmd_want_reads) & (main_litedramcore_sdram_bankmachine7_cmd_payload_is_write == main_litedramcore_sdram_choose_cmd_want_writes))));
end
assign main_litedramcore_sdram_choose_cmd_request = main_litedramcore_sdram_choose_cmd_valids;
assign main_litedramcore_sdram_choose_cmd_cmd_valid = builder_rhs_array_muxed8;
assign main_litedramcore_sdram_choose_cmd_cmd_payload_a = builder_rhs_array_muxed9;
assign main_litedramcore_sdram_choose_cmd_cmd_payload_ba = builder_rhs_array_muxed10;
assign main_litedramcore_sdram_choose_cmd_cmd_payload_is_read = builder_rhs_array_muxed11;
assign main_litedramcore_sdram_choose_cmd_cmd_payload_is_write = builder_rhs_array_muxed12;
assign main_litedramcore_sdram_choose_cmd_cmd_payload_is_cmd = builder_rhs_array_muxed13;
always @(*) begin
    main_litedramcore_sdram_choose_cmd_cmd_payload_cas <= 1'd0;
    if (main_litedramcore_sdram_choose_cmd_cmd_valid) begin
        main_litedramcore_sdram_choose_cmd_cmd_payload_cas <= builder_t_array_muxed0;
    end
end
always @(*) begin
    main_litedramcore_sdram_choose_cmd_cmd_payload_ras <= 1'd0;
    if (main_litedramcore_sdram_choose_cmd_cmd_valid) begin
        main_litedramcore_sdram_choose_cmd_cmd_payload_ras <= builder_t_array_muxed1;
    end
end
always @(*) begin
    main_litedramcore_sdram_choose_cmd_cmd_payload_we <= 1'd0;
    if (main_litedramcore_sdram_choose_cmd_cmd_valid) begin
        main_litedramcore_sdram_choose_cmd_cmd_payload_we <= builder_t_array_muxed2;
    end
end
always @(*) begin
    main_litedramcore_sdram_bankmachine0_cmd_ready <= 1'd0;
    if (((main_litedramcore_sdram_choose_cmd_cmd_valid & main_litedramcore_sdram_choose_cmd_cmd_ready) & (main_litedramcore_sdram_choose_cmd_grant == 1'd0))) begin
        main_litedramcore_sdram_bankmachine0_cmd_ready <= 1'd1;
    end
    if (((main_litedramcore_sdram_choose_req_cmd_valid & main_litedramcore_sdram_choose_req_cmd_ready) & (main_litedramcore_sdram_choose_req_grant == 1'd0))) begin
        main_litedramcore_sdram_bankmachine0_cmd_ready <= 1'd1;
    end
end
always @(*) begin
    main_litedramcore_sdram_bankmachine1_cmd_ready <= 1'd0;
    if (((main_litedramcore_sdram_choose_cmd_cmd_valid & main_litedramcore_sdram_choose_cmd_cmd_ready) & (main_litedramcore_sdram_choose_cmd_grant == 1'd1))) begin
        main_litedramcore_sdram_bankmachine1_cmd_ready <= 1'd1;
    end
    if (((main_litedramcore_sdram_choose_req_cmd_valid & main_litedramcore_sdram_choose_req_cmd_ready) & (main_litedramcore_sdram_choose_req_grant == 1'd1))) begin
        main_litedramcore_sdram_bankmachine1_cmd_ready <= 1'd1;
    end
end
always @(*) begin
    main_litedramcore_sdram_bankmachine2_cmd_ready <= 1'd0;
    if (((main_litedramcore_sdram_choose_cmd_cmd_valid & main_litedramcore_sdram_choose_cmd_cmd_ready) & (main_litedramcore_sdram_choose_cmd_grant == 2'd2))) begin
        main_litedramcore_sdram_bankmachine2_cmd_ready <= 1'd1;
    end
    if (((main_litedramcore_sdram_choose_req_cmd_valid & main_litedramcore_sdram_choose_req_cmd_ready) & (main_litedramcore_sdram_choose_req_grant == 2'd2))) begin
        main_litedramcore_sdram_bankmachine2_cmd_ready <= 1'd1;
    end
end
always @(*) begin
    main_litedramcore_sdram_bankmachine3_cmd_ready <= 1'd0;
    if (((main_litedramcore_sdram_choose_cmd_cmd_valid & main_litedramcore_sdram_choose_cmd_cmd_ready) & (main_litedramcore_sdram_choose_cmd_grant == 2'd3))) begin
        main_litedramcore_sdram_bankmachine3_cmd_ready <= 1'd1;
    end
    if (((main_litedramcore_sdram_choose_req_cmd_valid & main_litedramcore_sdram_choose_req_cmd_ready) & (main_litedramcore_sdram_choose_req_grant == 2'd3))) begin
        main_litedramcore_sdram_bankmachine3_cmd_ready <= 1'd1;
    end
end
always @(*) begin
    main_litedramcore_sdram_bankmachine4_cmd_ready <= 1'd0;
    if (((main_litedramcore_sdram_choose_cmd_cmd_valid & main_litedramcore_sdram_choose_cmd_cmd_ready) & (main_litedramcore_sdram_choose_cmd_grant == 3'd4))) begin
        main_litedramcore_sdram_bankmachine4_cmd_ready <= 1'd1;
    end
    if (((main_litedramcore_sdram_choose_req_cmd_valid & main_litedramcore_sdram_choose_req_cmd_ready) & (main_litedramcore_sdram_choose_req_grant == 3'd4))) begin
        main_litedramcore_sdram_bankmachine4_cmd_ready <= 1'd1;
    end
end
always @(*) begin
    main_litedramcore_sdram_bankmachine5_cmd_ready <= 1'd0;
    if (((main_litedramcore_sdram_choose_cmd_cmd_valid & main_litedramcore_sdram_choose_cmd_cmd_ready) & (main_litedramcore_sdram_choose_cmd_grant == 3'd5))) begin
        main_litedramcore_sdram_bankmachine5_cmd_ready <= 1'd1;
    end
    if (((main_litedramcore_sdram_choose_req_cmd_valid & main_litedramcore_sdram_choose_req_cmd_ready) & (main_litedramcore_sdram_choose_req_grant == 3'd5))) begin
        main_litedramcore_sdram_bankmachine5_cmd_ready <= 1'd1;
    end
end
always @(*) begin
    main_litedramcore_sdram_bankmachine6_cmd_ready <= 1'd0;
    if (((main_litedramcore_sdram_choose_cmd_cmd_valid & main_litedramcore_sdram_choose_cmd_cmd_ready) & (main_litedramcore_sdram_choose_cmd_grant == 3'd6))) begin
        main_litedramcore_sdram_bankmachine6_cmd_ready <= 1'd1;
    end
    if (((main_litedramcore_sdram_choose_req_cmd_valid & main_litedramcore_sdram_choose_req_cmd_ready) & (main_litedramcore_sdram_choose_req_grant == 3'd6))) begin
        main_litedramcore_sdram_bankmachine6_cmd_ready <= 1'd1;
    end
end
always @(*) begin
    main_litedramcore_sdram_bankmachine7_cmd_ready <= 1'd0;
    if (((main_litedramcore_sdram_choose_cmd_cmd_valid & main_litedramcore_sdram_choose_cmd_cmd_ready) & (main_litedramcore_sdram_choose_cmd_grant == 3'd7))) begin
        main_litedramcore_sdram_bankmachine7_cmd_ready <= 1'd1;
    end
    if (((main_litedramcore_sdram_choose_req_cmd_valid & main_litedramcore_sdram_choose_req_cmd_ready) & (main_litedramcore_sdram_choose_req_grant == 3'd7))) begin
        main_litedramcore_sdram_bankmachine7_cmd_ready <= 1'd1;
    end
end
assign main_litedramcore_sdram_choose_cmd_ce = (main_litedramcore_sdram_choose_cmd_cmd_ready | (~main_litedramcore_sdram_choose_cmd_cmd_valid));
always @(*) begin
    main_litedramcore_sdram_choose_req_valids <= 8'd0;
    main_litedramcore_sdram_choose_req_valids[0] <= (main_litedramcore_sdram_bankmachine0_cmd_valid & (((main_litedramcore_sdram_bankmachine0_cmd_payload_is_cmd & main_litedramcore_sdram_choose_req_want_cmds) & ((~((main_litedramcore_sdram_bankmachine0_cmd_payload_ras & (~main_litedramcore_sdram_bankmachine0_cmd_payload_cas)) & (~main_litedramcore_sdram_bankmachine0_cmd_payload_we))) | main_litedramcore_sdram_choose_req_want_activates)) | ((main_litedramcore_sdram_bankmachine0_cmd_payload_is_read == main_litedramcore_sdram_choose_req_want_reads) & (main_litedramcore_sdram_bankmachine0_cmd_payload_is_write == main_litedramcore_sdram_choose_req_want_writes))));
    main_litedramcore_sdram_choose_req_valids[1] <= (main_litedramcore_sdram_bankmachine1_cmd_valid & (((main_litedramcore_sdram_bankmachine1_cmd_payload_is_cmd & main_litedramcore_sdram_choose_req_want_cmds) & ((~((main_litedramcore_sdram_bankmachine1_cmd_payload_ras & (~main_litedramcore_sdram_bankmachine1_cmd_payload_cas)) & (~main_litedramcore_sdram_bankmachine1_cmd_payload_we))) | main_litedramcore_sdram_choose_req_want_activates)) | ((main_litedramcore_sdram_bankmachine1_cmd_payload_is_read == main_litedramcore_sdram_choose_req_want_reads) & (main_litedramcore_sdram_bankmachine1_cmd_payload_is_write == main_litedramcore_sdram_choose_req_want_writes))));
    main_litedramcore_sdram_choose_req_valids[2] <= (main_litedramcore_sdram_bankmachine2_cmd_valid & (((main_litedramcore_sdram_bankmachine2_cmd_payload_is_cmd & main_litedramcore_sdram_choose_req_want_cmds) & ((~((main_litedramcore_sdram_bankmachine2_cmd_payload_ras & (~main_litedramcore_sdram_bankmachine2_cmd_payload_cas)) & (~main_litedramcore_sdram_bankmachine2_cmd_payload_we))) | main_litedramcore_sdram_choose_req_want_activates)) | ((main_litedramcore_sdram_bankmachine2_cmd_payload_is_read == main_litedramcore_sdram_choose_req_want_reads) & (main_litedramcore_sdram_bankmachine2_cmd_payload_is_write == main_litedramcore_sdram_choose_req_want_writes))));
    main_litedramcore_sdram_choose_req_valids[3] <= (main_litedramcore_sdram_bankmachine3_cmd_valid & (((main_litedramcore_sdram_bankmachine3_cmd_payload_is_cmd & main_litedramcore_sdram_choose_req_want_cmds) & ((~((main_litedramcore_sdram_bankmachine3_cmd_payload_ras & (~main_litedramcore_sdram_bankmachine3_cmd_payload_cas)) & (~main_litedramcore_sdram_bankmachine3_cmd_payload_we))) | main_litedramcore_sdram_choose_req_want_activates)) | ((main_litedramcore_sdram_bankmachine3_cmd_payload_is_read == main_litedramcore_sdram_choose_req_want_reads) & (main_litedramcore_sdram_bankmachine3_cmd_payload_is_write == main_litedramcore_sdram_choose_req_want_writes))));
    main_litedramcore_sdram_choose_req_valids[4] <= (main_litedramcore_sdram_bankmachine4_cmd_valid & (((main_litedramcore_sdram_bankmachine4_cmd_payload_is_cmd & main_litedramcore_sdram_choose_req_want_cmds) & ((~((main_litedramcore_sdram_bankmachine4_cmd_payload_ras & (~main_litedramcore_sdram_bankmachine4_cmd_payload_cas)) & (~main_litedramcore_sdram_bankmachine4_cmd_payload_we))) | main_litedramcore_sdram_choose_req_want_activates)) | ((main_litedramcore_sdram_bankmachine4_cmd_payload_is_read == main_litedramcore_sdram_choose_req_want_reads) & (main_litedramcore_sdram_bankmachine4_cmd_payload_is_write == main_litedramcore_sdram_choose_req_want_writes))));
    main_litedramcore_sdram_choose_req_valids[5] <= (main_litedramcore_sdram_bankmachine5_cmd_valid & (((main_litedramcore_sdram_bankmachine5_cmd_payload_is_cmd & main_litedramcore_sdram_choose_req_want_cmds) & ((~((main_litedramcore_sdram_bankmachine5_cmd_payload_ras & (~main_litedramcore_sdram_bankmachine5_cmd_payload_cas)) & (~main_litedramcore_sdram_bankmachine5_cmd_payload_we))) | main_litedramcore_sdram_choose_req_want_activates)) | ((main_litedramcore_sdram_bankmachine5_cmd_payload_is_read == main_litedramcore_sdram_choose_req_want_reads) & (main_litedramcore_sdram_bankmachine5_cmd_payload_is_write == main_litedramcore_sdram_choose_req_want_writes))));
    main_litedramcore_sdram_choose_req_valids[6] <= (main_litedramcore_sdram_bankmachine6_cmd_valid & (((main_litedramcore_sdram_bankmachine6_cmd_payload_is_cmd & main_litedramcore_sdram_choose_req_want_cmds) & ((~((main_litedramcore_sdram_bankmachine6_cmd_payload_ras & (~main_litedramcore_sdram_bankmachine6_cmd_payload_cas)) & (~main_litedramcore_sdram_bankmachine6_cmd_payload_we))) | main_litedramcore_sdram_choose_req_want_activates)) | ((main_litedramcore_sdram_bankmachine6_cmd_payload_is_read == main_litedramcore_sdram_choose_req_want_reads) & (main_litedramcore_sdram_bankmachine6_cmd_payload_is_write == main_litedramcore_sdram_choose_req_want_writes))));
    main_litedramcore_sdram_choose_req_valids[7] <= (main_litedramcore_sdram_bankmachine7_cmd_valid & (((main_litedramcore_sdram_bankmachine7_cmd_payload_is_cmd & main_litedramcore_sdram_choose_req_want_cmds) & ((~((main_litedramcore_sdram_bankmachine7_cmd_payload_ras & (~main_litedramcore_sdram_bankmachine7_cmd_payload_cas)) & (~main_litedramcore_sdram_bankmachine7_cmd_payload_we))) | main_litedramcore_sdram_choose_req_want_activates)) | ((main_litedramcore_sdram_bankmachine7_cmd_payload_is_read == main_litedramcore_sdram_choose_req_want_reads) & (main_litedramcore_sdram_bankmachine7_cmd_payload_is_write == main_litedramcore_sdram_choose_req_want_writes))));
end
assign main_litedramcore_sdram_choose_req_request = main_litedramcore_sdram_choose_req_valids;
assign main_litedramcore_sdram_choose_req_cmd_valid = builder_rhs_array_muxed14;
assign main_litedramcore_sdram_choose_req_cmd_payload_a = builder_rhs_array_muxed15;
assign main_litedramcore_sdram_choose_req_cmd_payload_ba = builder_rhs_array_muxed16;
assign main_litedramcore_sdram_choose_req_cmd_payload_is_read = builder_rhs_array_muxed17;
assign main_litedramcore_sdram_choose_req_cmd_payload_is_write = builder_rhs_array_muxed18;
assign main_litedramcore_sdram_choose_req_cmd_payload_is_cmd = builder_rhs_array_muxed19;
always @(*) begin
    main_litedramcore_sdram_choose_req_cmd_payload_cas <= 1'd0;
    if (main_litedramcore_sdram_choose_req_cmd_valid) begin
        main_litedramcore_sdram_choose_req_cmd_payload_cas <= builder_t_array_muxed3;
    end
end
always @(*) begin
    main_litedramcore_sdram_choose_req_cmd_payload_ras <= 1'd0;
    if (main_litedramcore_sdram_choose_req_cmd_valid) begin
        main_litedramcore_sdram_choose_req_cmd_payload_ras <= builder_t_array_muxed4;
    end
end
always @(*) begin
    main_litedramcore_sdram_choose_req_cmd_payload_we <= 1'd0;
    if (main_litedramcore_sdram_choose_req_cmd_valid) begin
        main_litedramcore_sdram_choose_req_cmd_payload_we <= builder_t_array_muxed5;
    end
end
assign main_litedramcore_sdram_choose_req_ce = (main_litedramcore_sdram_choose_req_cmd_ready | (~main_litedramcore_sdram_choose_req_cmd_valid));
assign main_litedramcore_sdram_dfi_p0_reset_n = 1'd1;
assign main_litedramcore_sdram_dfi_p0_cke = {1{main_litedramcore_sdram_steerer0}};
assign main_litedramcore_sdram_dfi_p0_odt = {1{main_litedramcore_sdram_steerer1}};
assign main_litedramcore_sdram_dfi_p1_reset_n = 1'd1;
assign main_litedramcore_sdram_dfi_p1_cke = {1{main_litedramcore_sdram_steerer2}};
assign main_litedramcore_sdram_dfi_p1_odt = {1{main_litedramcore_sdram_steerer3}};
assign main_litedramcore_sdram_dfi_p2_reset_n = 1'd1;
assign main_litedramcore_sdram_dfi_p2_cke = {1{main_litedramcore_sdram_steerer4}};
assign main_litedramcore_sdram_dfi_p2_odt = {1{main_litedramcore_sdram_steerer5}};
assign main_litedramcore_sdram_dfi_p3_reset_n = 1'd1;
assign main_litedramcore_sdram_dfi_p3_cke = {1{main_litedramcore_sdram_steerer6}};
assign main_litedramcore_sdram_dfi_p3_odt = {1{main_litedramcore_sdram_steerer7}};
assign main_litedramcore_sdram_tfawcon_count = ((((main_litedramcore_sdram_tfawcon_window[0] + main_litedramcore_sdram_tfawcon_window[1]) + main_litedramcore_sdram_tfawcon_window[2]) + main_litedramcore_sdram_tfawcon_window[3]) + main_litedramcore_sdram_tfawcon_window[4]);
always @(*) begin
    builder_litedramcore_litedramcore_multiplexer_next_state <= 4'd0;
    builder_litedramcore_litedramcore_multiplexer_next_state <= builder_litedramcore_litedramcore_multiplexer_state;
    case (builder_litedramcore_litedramcore_multiplexer_state)
        1'd1: begin
            if (main_litedramcore_sdram_read_available) begin
                if (((~main_litedramcore_sdram_write_available) | main_litedramcore_sdram_max_time1)) begin
                    builder_litedramcore_litedramcore_multiplexer_next_state <= 2'd3;
                end
            end
            if (main_litedramcore_sdram_go_to_refresh) begin
                builder_litedramcore_litedramcore_multiplexer_next_state <= 2'd2;
            end
        end
        2'd2: begin
            if (main_litedramcore_sdram_cmd_last) begin
                builder_litedramcore_litedramcore_multiplexer_next_state <= 1'd0;
            end
        end
        2'd3: begin
            if (main_litedramcore_sdram_twtrcon_ready) begin
                builder_litedramcore_litedramcore_multiplexer_next_state <= 1'd0;
            end
        end
        3'd4: begin
            builder_litedramcore_litedramcore_multiplexer_next_state <= 3'd5;
        end
        3'd5: begin
            builder_litedramcore_litedramcore_multiplexer_next_state <= 3'd6;
        end
        3'd6: begin
            builder_litedramcore_litedramcore_multiplexer_next_state <= 3'd7;
        end
        3'd7: begin
            builder_litedramcore_litedramcore_multiplexer_next_state <= 4'd8;
        end
        4'd8: begin
            builder_litedramcore_litedramcore_multiplexer_next_state <= 4'd9;
        end
        4'd9: begin
            builder_litedramcore_litedramcore_multiplexer_next_state <= 4'd10;
        end
        4'd10: begin
            builder_litedramcore_litedramcore_multiplexer_next_state <= 1'd1;
        end
        default: begin
            if (main_litedramcore_sdram_write_available) begin
                if (((~main_litedramcore_sdram_read_available) | main_litedramcore_sdram_max_time0)) begin
                    builder_litedramcore_litedramcore_multiplexer_next_state <= 3'd4;
                end
            end
            if (main_litedramcore_sdram_go_to_refresh) begin
                builder_litedramcore_litedramcore_multiplexer_next_state <= 2'd2;
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_steerer_sel0 <= 2'd0;
    case (builder_litedramcore_litedramcore_multiplexer_state)
        1'd1: begin
            main_litedramcore_sdram_steerer_sel0 <= 1'd0;
            if ((main_a7ddrphy_wrphase_storage == 1'd0)) begin
                main_litedramcore_sdram_steerer_sel0 <= 2'd2;
            end
            if ((main_litedramcore_sdram_wrcmdphase == 1'd0)) begin
                main_litedramcore_sdram_steerer_sel0 <= 1'd1;
            end
        end
        2'd2: begin
            main_litedramcore_sdram_steerer_sel0 <= 2'd3;
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        4'd9: begin
        end
        4'd10: begin
        end
        default: begin
            main_litedramcore_sdram_steerer_sel0 <= 1'd0;
            if ((main_a7ddrphy_rdphase_storage == 1'd0)) begin
                main_litedramcore_sdram_steerer_sel0 <= 2'd2;
            end
            if ((main_litedramcore_sdram_rdcmdphase == 1'd0)) begin
                main_litedramcore_sdram_steerer_sel0 <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_cmd_ready <= 1'd0;
    case (builder_litedramcore_litedramcore_multiplexer_state)
        1'd1: begin
        end
        2'd2: begin
            main_litedramcore_sdram_cmd_ready <= 1'd1;
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        4'd9: begin
        end
        4'd10: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_steerer_sel1 <= 2'd0;
    case (builder_litedramcore_litedramcore_multiplexer_state)
        1'd1: begin
            main_litedramcore_sdram_steerer_sel1 <= 1'd0;
            if ((main_a7ddrphy_wrphase_storage == 1'd1)) begin
                main_litedramcore_sdram_steerer_sel1 <= 2'd2;
            end
            if ((main_litedramcore_sdram_wrcmdphase == 1'd1)) begin
                main_litedramcore_sdram_steerer_sel1 <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        4'd9: begin
        end
        4'd10: begin
        end
        default: begin
            main_litedramcore_sdram_steerer_sel1 <= 1'd0;
            if ((main_a7ddrphy_rdphase_storage == 1'd1)) begin
                main_litedramcore_sdram_steerer_sel1 <= 2'd2;
            end
            if ((main_litedramcore_sdram_rdcmdphase == 1'd1)) begin
                main_litedramcore_sdram_steerer_sel1 <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_steerer_sel2 <= 2'd0;
    case (builder_litedramcore_litedramcore_multiplexer_state)
        1'd1: begin
            main_litedramcore_sdram_steerer_sel2 <= 1'd0;
            if ((main_a7ddrphy_wrphase_storage == 2'd2)) begin
                main_litedramcore_sdram_steerer_sel2 <= 2'd2;
            end
            if ((main_litedramcore_sdram_wrcmdphase == 2'd2)) begin
                main_litedramcore_sdram_steerer_sel2 <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        4'd9: begin
        end
        4'd10: begin
        end
        default: begin
            main_litedramcore_sdram_steerer_sel2 <= 1'd0;
            if ((main_a7ddrphy_rdphase_storage == 2'd2)) begin
                main_litedramcore_sdram_steerer_sel2 <= 2'd2;
            end
            if ((main_litedramcore_sdram_rdcmdphase == 2'd2)) begin
                main_litedramcore_sdram_steerer_sel2 <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_choose_cmd_want_activates <= 1'd0;
    case (builder_litedramcore_litedramcore_multiplexer_state)
        1'd1: begin
            if (1'd0) begin
            end else begin
                main_litedramcore_sdram_choose_cmd_want_activates <= main_litedramcore_sdram_ras_allowed;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        4'd9: begin
        end
        4'd10: begin
        end
        default: begin
            if (1'd0) begin
            end else begin
                main_litedramcore_sdram_choose_cmd_want_activates <= main_litedramcore_sdram_ras_allowed;
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_steerer_sel3 <= 2'd0;
    case (builder_litedramcore_litedramcore_multiplexer_state)
        1'd1: begin
            main_litedramcore_sdram_steerer_sel3 <= 1'd0;
            if ((main_a7ddrphy_wrphase_storage == 2'd3)) begin
                main_litedramcore_sdram_steerer_sel3 <= 2'd2;
            end
            if ((main_litedramcore_sdram_wrcmdphase == 2'd3)) begin
                main_litedramcore_sdram_steerer_sel3 <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        4'd9: begin
        end
        4'd10: begin
        end
        default: begin
            main_litedramcore_sdram_steerer_sel3 <= 1'd0;
            if ((main_a7ddrphy_rdphase_storage == 2'd3)) begin
                main_litedramcore_sdram_steerer_sel3 <= 2'd2;
            end
            if ((main_litedramcore_sdram_rdcmdphase == 2'd3)) begin
                main_litedramcore_sdram_steerer_sel3 <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_en0 <= 1'd0;
    case (builder_litedramcore_litedramcore_multiplexer_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        4'd9: begin
        end
        4'd10: begin
        end
        default: begin
            main_litedramcore_sdram_en0 <= 1'd1;
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_choose_cmd_cmd_ready <= 1'd0;
    case (builder_litedramcore_litedramcore_multiplexer_state)
        1'd1: begin
            if (1'd0) begin
            end else begin
                main_litedramcore_sdram_choose_cmd_cmd_ready <= ((~((main_litedramcore_sdram_choose_cmd_cmd_payload_ras & (~main_litedramcore_sdram_choose_cmd_cmd_payload_cas)) & (~main_litedramcore_sdram_choose_cmd_cmd_payload_we))) | main_litedramcore_sdram_ras_allowed);
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        4'd9: begin
        end
        4'd10: begin
        end
        default: begin
            if (1'd0) begin
            end else begin
                main_litedramcore_sdram_choose_cmd_cmd_ready <= ((~((main_litedramcore_sdram_choose_cmd_cmd_payload_ras & (~main_litedramcore_sdram_choose_cmd_cmd_payload_cas)) & (~main_litedramcore_sdram_choose_cmd_cmd_payload_we))) | main_litedramcore_sdram_ras_allowed);
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_choose_req_want_reads <= 1'd0;
    case (builder_litedramcore_litedramcore_multiplexer_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        4'd9: begin
        end
        4'd10: begin
        end
        default: begin
            main_litedramcore_sdram_choose_req_want_reads <= 1'd1;
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_choose_req_want_writes <= 1'd0;
    case (builder_litedramcore_litedramcore_multiplexer_state)
        1'd1: begin
            main_litedramcore_sdram_choose_req_want_writes <= 1'd1;
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        4'd9: begin
        end
        4'd10: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_en1 <= 1'd0;
    case (builder_litedramcore_litedramcore_multiplexer_state)
        1'd1: begin
            main_litedramcore_sdram_en1 <= 1'd1;
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        4'd9: begin
        end
        4'd10: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_choose_req_cmd_ready <= 1'd0;
    case (builder_litedramcore_litedramcore_multiplexer_state)
        1'd1: begin
            if (1'd0) begin
                main_litedramcore_sdram_choose_req_cmd_ready <= (main_litedramcore_sdram_cas_allowed & ((~((main_litedramcore_sdram_choose_req_cmd_payload_ras & (~main_litedramcore_sdram_choose_req_cmd_payload_cas)) & (~main_litedramcore_sdram_choose_req_cmd_payload_we))) | main_litedramcore_sdram_ras_allowed));
            end else begin
                main_litedramcore_sdram_choose_req_cmd_ready <= main_litedramcore_sdram_cas_allowed;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        4'd9: begin
        end
        4'd10: begin
        end
        default: begin
            if (1'd0) begin
                main_litedramcore_sdram_choose_req_cmd_ready <= (main_litedramcore_sdram_cas_allowed & ((~((main_litedramcore_sdram_choose_req_cmd_payload_ras & (~main_litedramcore_sdram_choose_req_cmd_payload_cas)) & (~main_litedramcore_sdram_choose_req_cmd_payload_we))) | main_litedramcore_sdram_ras_allowed));
            end else begin
                main_litedramcore_sdram_choose_req_cmd_ready <= main_litedramcore_sdram_cas_allowed;
            end
        end
    endcase
end
assign builder_litedramcore_litedramcore_roundrobin0_request = {(((main_user_port_port_cmd_payload_addr[9:7] == 1'd0) & (~(((((((builder_litedramcore_litedramcore_locked1 | (main_litedramcore_sdram_interface_bank1_lock & (builder_litedramcore_litedramcore_roundrobin1_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank2_lock & (builder_litedramcore_litedramcore_roundrobin2_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank3_lock & (builder_litedramcore_litedramcore_roundrobin3_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank4_lock & (builder_litedramcore_litedramcore_roundrobin4_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank5_lock & (builder_litedramcore_litedramcore_roundrobin5_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank6_lock & (builder_litedramcore_litedramcore_roundrobin6_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank7_lock & (builder_litedramcore_litedramcore_roundrobin7_grant == 1'd1))))) & main_user_port_port_cmd_valid), (((main_litedramcore_port_cmd_payload_addr[9:7] == 1'd0) & (~(((((((builder_litedramcore_litedramcore_locked0 | (main_litedramcore_sdram_interface_bank1_lock & (builder_litedramcore_litedramcore_roundrobin1_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank2_lock & (builder_litedramcore_litedramcore_roundrobin2_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank3_lock & (builder_litedramcore_litedramcore_roundrobin3_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank4_lock & (builder_litedramcore_litedramcore_roundrobin4_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank5_lock & (builder_litedramcore_litedramcore_roundrobin5_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank6_lock & (builder_litedramcore_litedramcore_roundrobin6_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank7_lock & (builder_litedramcore_litedramcore_roundrobin7_grant == 1'd0))))) & main_litedramcore_port_cmd_valid)};
assign builder_litedramcore_litedramcore_roundrobin0_ce = ((~main_litedramcore_sdram_interface_bank0_valid) & (~main_litedramcore_sdram_interface_bank0_lock));
assign main_litedramcore_sdram_interface_bank0_addr = builder_rhs_array_muxed20;
assign main_litedramcore_sdram_interface_bank0_we = builder_rhs_array_muxed21;
assign main_litedramcore_sdram_interface_bank0_valid = builder_rhs_array_muxed22;
assign builder_litedramcore_litedramcore_roundrobin1_request = {(((main_user_port_port_cmd_payload_addr[9:7] == 1'd1) & (~(((((((builder_litedramcore_litedramcore_locked3 | (main_litedramcore_sdram_interface_bank0_lock & (builder_litedramcore_litedramcore_roundrobin0_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank2_lock & (builder_litedramcore_litedramcore_roundrobin2_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank3_lock & (builder_litedramcore_litedramcore_roundrobin3_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank4_lock & (builder_litedramcore_litedramcore_roundrobin4_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank5_lock & (builder_litedramcore_litedramcore_roundrobin5_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank6_lock & (builder_litedramcore_litedramcore_roundrobin6_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank7_lock & (builder_litedramcore_litedramcore_roundrobin7_grant == 1'd1))))) & main_user_port_port_cmd_valid), (((main_litedramcore_port_cmd_payload_addr[9:7] == 1'd1) & (~(((((((builder_litedramcore_litedramcore_locked2 | (main_litedramcore_sdram_interface_bank0_lock & (builder_litedramcore_litedramcore_roundrobin0_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank2_lock & (builder_litedramcore_litedramcore_roundrobin2_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank3_lock & (builder_litedramcore_litedramcore_roundrobin3_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank4_lock & (builder_litedramcore_litedramcore_roundrobin4_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank5_lock & (builder_litedramcore_litedramcore_roundrobin5_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank6_lock & (builder_litedramcore_litedramcore_roundrobin6_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank7_lock & (builder_litedramcore_litedramcore_roundrobin7_grant == 1'd0))))) & main_litedramcore_port_cmd_valid)};
assign builder_litedramcore_litedramcore_roundrobin1_ce = ((~main_litedramcore_sdram_interface_bank1_valid) & (~main_litedramcore_sdram_interface_bank1_lock));
assign main_litedramcore_sdram_interface_bank1_addr = builder_rhs_array_muxed23;
assign main_litedramcore_sdram_interface_bank1_we = builder_rhs_array_muxed24;
assign main_litedramcore_sdram_interface_bank1_valid = builder_rhs_array_muxed25;
assign builder_litedramcore_litedramcore_roundrobin2_request = {(((main_user_port_port_cmd_payload_addr[9:7] == 2'd2) & (~(((((((builder_litedramcore_litedramcore_locked5 | (main_litedramcore_sdram_interface_bank0_lock & (builder_litedramcore_litedramcore_roundrobin0_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank1_lock & (builder_litedramcore_litedramcore_roundrobin1_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank3_lock & (builder_litedramcore_litedramcore_roundrobin3_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank4_lock & (builder_litedramcore_litedramcore_roundrobin4_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank5_lock & (builder_litedramcore_litedramcore_roundrobin5_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank6_lock & (builder_litedramcore_litedramcore_roundrobin6_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank7_lock & (builder_litedramcore_litedramcore_roundrobin7_grant == 1'd1))))) & main_user_port_port_cmd_valid), (((main_litedramcore_port_cmd_payload_addr[9:7] == 2'd2) & (~(((((((builder_litedramcore_litedramcore_locked4 | (main_litedramcore_sdram_interface_bank0_lock & (builder_litedramcore_litedramcore_roundrobin0_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank1_lock & (builder_litedramcore_litedramcore_roundrobin1_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank3_lock & (builder_litedramcore_litedramcore_roundrobin3_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank4_lock & (builder_litedramcore_litedramcore_roundrobin4_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank5_lock & (builder_litedramcore_litedramcore_roundrobin5_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank6_lock & (builder_litedramcore_litedramcore_roundrobin6_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank7_lock & (builder_litedramcore_litedramcore_roundrobin7_grant == 1'd0))))) & main_litedramcore_port_cmd_valid)};
assign builder_litedramcore_litedramcore_roundrobin2_ce = ((~main_litedramcore_sdram_interface_bank2_valid) & (~main_litedramcore_sdram_interface_bank2_lock));
assign main_litedramcore_sdram_interface_bank2_addr = builder_rhs_array_muxed26;
assign main_litedramcore_sdram_interface_bank2_we = builder_rhs_array_muxed27;
assign main_litedramcore_sdram_interface_bank2_valid = builder_rhs_array_muxed28;
assign builder_litedramcore_litedramcore_roundrobin3_request = {(((main_user_port_port_cmd_payload_addr[9:7] == 2'd3) & (~(((((((builder_litedramcore_litedramcore_locked7 | (main_litedramcore_sdram_interface_bank0_lock & (builder_litedramcore_litedramcore_roundrobin0_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank1_lock & (builder_litedramcore_litedramcore_roundrobin1_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank2_lock & (builder_litedramcore_litedramcore_roundrobin2_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank4_lock & (builder_litedramcore_litedramcore_roundrobin4_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank5_lock & (builder_litedramcore_litedramcore_roundrobin5_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank6_lock & (builder_litedramcore_litedramcore_roundrobin6_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank7_lock & (builder_litedramcore_litedramcore_roundrobin7_grant == 1'd1))))) & main_user_port_port_cmd_valid), (((main_litedramcore_port_cmd_payload_addr[9:7] == 2'd3) & (~(((((((builder_litedramcore_litedramcore_locked6 | (main_litedramcore_sdram_interface_bank0_lock & (builder_litedramcore_litedramcore_roundrobin0_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank1_lock & (builder_litedramcore_litedramcore_roundrobin1_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank2_lock & (builder_litedramcore_litedramcore_roundrobin2_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank4_lock & (builder_litedramcore_litedramcore_roundrobin4_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank5_lock & (builder_litedramcore_litedramcore_roundrobin5_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank6_lock & (builder_litedramcore_litedramcore_roundrobin6_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank7_lock & (builder_litedramcore_litedramcore_roundrobin7_grant == 1'd0))))) & main_litedramcore_port_cmd_valid)};
assign builder_litedramcore_litedramcore_roundrobin3_ce = ((~main_litedramcore_sdram_interface_bank3_valid) & (~main_litedramcore_sdram_interface_bank3_lock));
assign main_litedramcore_sdram_interface_bank3_addr = builder_rhs_array_muxed29;
assign main_litedramcore_sdram_interface_bank3_we = builder_rhs_array_muxed30;
assign main_litedramcore_sdram_interface_bank3_valid = builder_rhs_array_muxed31;
assign builder_litedramcore_litedramcore_roundrobin4_request = {(((main_user_port_port_cmd_payload_addr[9:7] == 3'd4) & (~(((((((builder_litedramcore_litedramcore_locked9 | (main_litedramcore_sdram_interface_bank0_lock & (builder_litedramcore_litedramcore_roundrobin0_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank1_lock & (builder_litedramcore_litedramcore_roundrobin1_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank2_lock & (builder_litedramcore_litedramcore_roundrobin2_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank3_lock & (builder_litedramcore_litedramcore_roundrobin3_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank5_lock & (builder_litedramcore_litedramcore_roundrobin5_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank6_lock & (builder_litedramcore_litedramcore_roundrobin6_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank7_lock & (builder_litedramcore_litedramcore_roundrobin7_grant == 1'd1))))) & main_user_port_port_cmd_valid), (((main_litedramcore_port_cmd_payload_addr[9:7] == 3'd4) & (~(((((((builder_litedramcore_litedramcore_locked8 | (main_litedramcore_sdram_interface_bank0_lock & (builder_litedramcore_litedramcore_roundrobin0_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank1_lock & (builder_litedramcore_litedramcore_roundrobin1_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank2_lock & (builder_litedramcore_litedramcore_roundrobin2_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank3_lock & (builder_litedramcore_litedramcore_roundrobin3_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank5_lock & (builder_litedramcore_litedramcore_roundrobin5_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank6_lock & (builder_litedramcore_litedramcore_roundrobin6_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank7_lock & (builder_litedramcore_litedramcore_roundrobin7_grant == 1'd0))))) & main_litedramcore_port_cmd_valid)};
assign builder_litedramcore_litedramcore_roundrobin4_ce = ((~main_litedramcore_sdram_interface_bank4_valid) & (~main_litedramcore_sdram_interface_bank4_lock));
assign main_litedramcore_sdram_interface_bank4_addr = builder_rhs_array_muxed32;
assign main_litedramcore_sdram_interface_bank4_we = builder_rhs_array_muxed33;
assign main_litedramcore_sdram_interface_bank4_valid = builder_rhs_array_muxed34;
assign builder_litedramcore_litedramcore_roundrobin5_request = {(((main_user_port_port_cmd_payload_addr[9:7] == 3'd5) & (~(((((((builder_litedramcore_litedramcore_locked11 | (main_litedramcore_sdram_interface_bank0_lock & (builder_litedramcore_litedramcore_roundrobin0_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank1_lock & (builder_litedramcore_litedramcore_roundrobin1_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank2_lock & (builder_litedramcore_litedramcore_roundrobin2_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank3_lock & (builder_litedramcore_litedramcore_roundrobin3_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank4_lock & (builder_litedramcore_litedramcore_roundrobin4_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank6_lock & (builder_litedramcore_litedramcore_roundrobin6_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank7_lock & (builder_litedramcore_litedramcore_roundrobin7_grant == 1'd1))))) & main_user_port_port_cmd_valid), (((main_litedramcore_port_cmd_payload_addr[9:7] == 3'd5) & (~(((((((builder_litedramcore_litedramcore_locked10 | (main_litedramcore_sdram_interface_bank0_lock & (builder_litedramcore_litedramcore_roundrobin0_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank1_lock & (builder_litedramcore_litedramcore_roundrobin1_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank2_lock & (builder_litedramcore_litedramcore_roundrobin2_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank3_lock & (builder_litedramcore_litedramcore_roundrobin3_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank4_lock & (builder_litedramcore_litedramcore_roundrobin4_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank6_lock & (builder_litedramcore_litedramcore_roundrobin6_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank7_lock & (builder_litedramcore_litedramcore_roundrobin7_grant == 1'd0))))) & main_litedramcore_port_cmd_valid)};
assign builder_litedramcore_litedramcore_roundrobin5_ce = ((~main_litedramcore_sdram_interface_bank5_valid) & (~main_litedramcore_sdram_interface_bank5_lock));
assign main_litedramcore_sdram_interface_bank5_addr = builder_rhs_array_muxed35;
assign main_litedramcore_sdram_interface_bank5_we = builder_rhs_array_muxed36;
assign main_litedramcore_sdram_interface_bank5_valid = builder_rhs_array_muxed37;
assign builder_litedramcore_litedramcore_roundrobin6_request = {(((main_user_port_port_cmd_payload_addr[9:7] == 3'd6) & (~(((((((builder_litedramcore_litedramcore_locked13 | (main_litedramcore_sdram_interface_bank0_lock & (builder_litedramcore_litedramcore_roundrobin0_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank1_lock & (builder_litedramcore_litedramcore_roundrobin1_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank2_lock & (builder_litedramcore_litedramcore_roundrobin2_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank3_lock & (builder_litedramcore_litedramcore_roundrobin3_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank4_lock & (builder_litedramcore_litedramcore_roundrobin4_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank5_lock & (builder_litedramcore_litedramcore_roundrobin5_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank7_lock & (builder_litedramcore_litedramcore_roundrobin7_grant == 1'd1))))) & main_user_port_port_cmd_valid), (((main_litedramcore_port_cmd_payload_addr[9:7] == 3'd6) & (~(((((((builder_litedramcore_litedramcore_locked12 | (main_litedramcore_sdram_interface_bank0_lock & (builder_litedramcore_litedramcore_roundrobin0_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank1_lock & (builder_litedramcore_litedramcore_roundrobin1_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank2_lock & (builder_litedramcore_litedramcore_roundrobin2_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank3_lock & (builder_litedramcore_litedramcore_roundrobin3_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank4_lock & (builder_litedramcore_litedramcore_roundrobin4_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank5_lock & (builder_litedramcore_litedramcore_roundrobin5_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank7_lock & (builder_litedramcore_litedramcore_roundrobin7_grant == 1'd0))))) & main_litedramcore_port_cmd_valid)};
assign builder_litedramcore_litedramcore_roundrobin6_ce = ((~main_litedramcore_sdram_interface_bank6_valid) & (~main_litedramcore_sdram_interface_bank6_lock));
assign main_litedramcore_sdram_interface_bank6_addr = builder_rhs_array_muxed38;
assign main_litedramcore_sdram_interface_bank6_we = builder_rhs_array_muxed39;
assign main_litedramcore_sdram_interface_bank6_valid = builder_rhs_array_muxed40;
assign builder_litedramcore_litedramcore_roundrobin7_request = {(((main_user_port_port_cmd_payload_addr[9:7] == 3'd7) & (~(((((((builder_litedramcore_litedramcore_locked15 | (main_litedramcore_sdram_interface_bank0_lock & (builder_litedramcore_litedramcore_roundrobin0_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank1_lock & (builder_litedramcore_litedramcore_roundrobin1_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank2_lock & (builder_litedramcore_litedramcore_roundrobin2_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank3_lock & (builder_litedramcore_litedramcore_roundrobin3_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank4_lock & (builder_litedramcore_litedramcore_roundrobin4_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank5_lock & (builder_litedramcore_litedramcore_roundrobin5_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank6_lock & (builder_litedramcore_litedramcore_roundrobin6_grant == 1'd1))))) & main_user_port_port_cmd_valid), (((main_litedramcore_port_cmd_payload_addr[9:7] == 3'd7) & (~(((((((builder_litedramcore_litedramcore_locked14 | (main_litedramcore_sdram_interface_bank0_lock & (builder_litedramcore_litedramcore_roundrobin0_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank1_lock & (builder_litedramcore_litedramcore_roundrobin1_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank2_lock & (builder_litedramcore_litedramcore_roundrobin2_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank3_lock & (builder_litedramcore_litedramcore_roundrobin3_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank4_lock & (builder_litedramcore_litedramcore_roundrobin4_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank5_lock & (builder_litedramcore_litedramcore_roundrobin5_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank6_lock & (builder_litedramcore_litedramcore_roundrobin6_grant == 1'd0))))) & main_litedramcore_port_cmd_valid)};
assign builder_litedramcore_litedramcore_roundrobin7_ce = ((~main_litedramcore_sdram_interface_bank7_valid) & (~main_litedramcore_sdram_interface_bank7_lock));
assign main_litedramcore_sdram_interface_bank7_addr = builder_rhs_array_muxed41;
assign main_litedramcore_sdram_interface_bank7_we = builder_rhs_array_muxed42;
assign main_litedramcore_sdram_interface_bank7_valid = builder_rhs_array_muxed43;
assign main_litedramcore_port_cmd_ready = ((((((((1'd0 | (((builder_litedramcore_litedramcore_roundrobin0_grant == 1'd0) & ((main_litedramcore_port_cmd_payload_addr[9:7] == 1'd0) & (~(((((((builder_litedramcore_litedramcore_locked0 | (main_litedramcore_sdram_interface_bank1_lock & (builder_litedramcore_litedramcore_roundrobin1_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank2_lock & (builder_litedramcore_litedramcore_roundrobin2_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank3_lock & (builder_litedramcore_litedramcore_roundrobin3_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank4_lock & (builder_litedramcore_litedramcore_roundrobin4_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank5_lock & (builder_litedramcore_litedramcore_roundrobin5_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank6_lock & (builder_litedramcore_litedramcore_roundrobin6_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank7_lock & (builder_litedramcore_litedramcore_roundrobin7_grant == 1'd0)))))) & main_litedramcore_sdram_interface_bank0_ready)) | (((builder_litedramcore_litedramcore_roundrobin1_grant == 1'd0) & ((main_litedramcore_port_cmd_payload_addr[9:7] == 1'd1) & (~(((((((builder_litedramcore_litedramcore_locked2 | (main_litedramcore_sdram_interface_bank0_lock & (builder_litedramcore_litedramcore_roundrobin0_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank2_lock & (builder_litedramcore_litedramcore_roundrobin2_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank3_lock & (builder_litedramcore_litedramcore_roundrobin3_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank4_lock & (builder_litedramcore_litedramcore_roundrobin4_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank5_lock & (builder_litedramcore_litedramcore_roundrobin5_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank6_lock & (builder_litedramcore_litedramcore_roundrobin6_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank7_lock & (builder_litedramcore_litedramcore_roundrobin7_grant == 1'd0)))))) & main_litedramcore_sdram_interface_bank1_ready)) | (((builder_litedramcore_litedramcore_roundrobin2_grant == 1'd0) & ((main_litedramcore_port_cmd_payload_addr[9:7] == 2'd2) & (~(((((((builder_litedramcore_litedramcore_locked4 | (main_litedramcore_sdram_interface_bank0_lock & (builder_litedramcore_litedramcore_roundrobin0_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank1_lock & (builder_litedramcore_litedramcore_roundrobin1_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank3_lock & (builder_litedramcore_litedramcore_roundrobin3_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank4_lock & (builder_litedramcore_litedramcore_roundrobin4_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank5_lock & (builder_litedramcore_litedramcore_roundrobin5_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank6_lock & (builder_litedramcore_litedramcore_roundrobin6_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank7_lock & (builder_litedramcore_litedramcore_roundrobin7_grant == 1'd0)))))) & main_litedramcore_sdram_interface_bank2_ready)) | (((builder_litedramcore_litedramcore_roundrobin3_grant == 1'd0) & ((main_litedramcore_port_cmd_payload_addr[9:7] == 2'd3) & (~(((((((builder_litedramcore_litedramcore_locked6 | (main_litedramcore_sdram_interface_bank0_lock & (builder_litedramcore_litedramcore_roundrobin0_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank1_lock & (builder_litedramcore_litedramcore_roundrobin1_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank2_lock & (builder_litedramcore_litedramcore_roundrobin2_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank4_lock & (builder_litedramcore_litedramcore_roundrobin4_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank5_lock & (builder_litedramcore_litedramcore_roundrobin5_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank6_lock & (builder_litedramcore_litedramcore_roundrobin6_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank7_lock & (builder_litedramcore_litedramcore_roundrobin7_grant == 1'd0)))))) & main_litedramcore_sdram_interface_bank3_ready)) | (((builder_litedramcore_litedramcore_roundrobin4_grant == 1'd0) & ((main_litedramcore_port_cmd_payload_addr[9:7] == 3'd4) & (~(((((((builder_litedramcore_litedramcore_locked8 | (main_litedramcore_sdram_interface_bank0_lock & (builder_litedramcore_litedramcore_roundrobin0_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank1_lock & (builder_litedramcore_litedramcore_roundrobin1_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank2_lock & (builder_litedramcore_litedramcore_roundrobin2_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank3_lock & (builder_litedramcore_litedramcore_roundrobin3_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank5_lock & (builder_litedramcore_litedramcore_roundrobin5_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank6_lock & (builder_litedramcore_litedramcore_roundrobin6_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank7_lock & (builder_litedramcore_litedramcore_roundrobin7_grant == 1'd0)))))) & main_litedramcore_sdram_interface_bank4_ready)) | (((builder_litedramcore_litedramcore_roundrobin5_grant == 1'd0) & ((main_litedramcore_port_cmd_payload_addr[9:7] == 3'd5) & (~(((((((builder_litedramcore_litedramcore_locked10 | (main_litedramcore_sdram_interface_bank0_lock & (builder_litedramcore_litedramcore_roundrobin0_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank1_lock & (builder_litedramcore_litedramcore_roundrobin1_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank2_lock & (builder_litedramcore_litedramcore_roundrobin2_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank3_lock & (builder_litedramcore_litedramcore_roundrobin3_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank4_lock & (builder_litedramcore_litedramcore_roundrobin4_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank6_lock & (builder_litedramcore_litedramcore_roundrobin6_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank7_lock & (builder_litedramcore_litedramcore_roundrobin7_grant == 1'd0)))))) & main_litedramcore_sdram_interface_bank5_ready)) | (((builder_litedramcore_litedramcore_roundrobin6_grant == 1'd0) & ((main_litedramcore_port_cmd_payload_addr[9:7] == 3'd6) & (~(((((((builder_litedramcore_litedramcore_locked12 | (main_litedramcore_sdram_interface_bank0_lock & (builder_litedramcore_litedramcore_roundrobin0_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank1_lock & (builder_litedramcore_litedramcore_roundrobin1_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank2_lock & (builder_litedramcore_litedramcore_roundrobin2_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank3_lock & (builder_litedramcore_litedramcore_roundrobin3_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank4_lock & (builder_litedramcore_litedramcore_roundrobin4_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank5_lock & (builder_litedramcore_litedramcore_roundrobin5_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank7_lock & (builder_litedramcore_litedramcore_roundrobin7_grant == 1'd0)))))) & main_litedramcore_sdram_interface_bank6_ready)) | (((builder_litedramcore_litedramcore_roundrobin7_grant == 1'd0) & ((main_litedramcore_port_cmd_payload_addr[9:7] == 3'd7) & (~(((((((builder_litedramcore_litedramcore_locked14 | (main_litedramcore_sdram_interface_bank0_lock & (builder_litedramcore_litedramcore_roundrobin0_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank1_lock & (builder_litedramcore_litedramcore_roundrobin1_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank2_lock & (builder_litedramcore_litedramcore_roundrobin2_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank3_lock & (builder_litedramcore_litedramcore_roundrobin3_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank4_lock & (builder_litedramcore_litedramcore_roundrobin4_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank5_lock & (builder_litedramcore_litedramcore_roundrobin5_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank6_lock & (builder_litedramcore_litedramcore_roundrobin6_grant == 1'd0)))))) & main_litedramcore_sdram_interface_bank7_ready));
assign main_user_port_port_cmd_ready = ((((((((1'd0 | (((builder_litedramcore_litedramcore_roundrobin0_grant == 1'd1) & ((main_user_port_port_cmd_payload_addr[9:7] == 1'd0) & (~(((((((builder_litedramcore_litedramcore_locked1 | (main_litedramcore_sdram_interface_bank1_lock & (builder_litedramcore_litedramcore_roundrobin1_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank2_lock & (builder_litedramcore_litedramcore_roundrobin2_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank3_lock & (builder_litedramcore_litedramcore_roundrobin3_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank4_lock & (builder_litedramcore_litedramcore_roundrobin4_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank5_lock & (builder_litedramcore_litedramcore_roundrobin5_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank6_lock & (builder_litedramcore_litedramcore_roundrobin6_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank7_lock & (builder_litedramcore_litedramcore_roundrobin7_grant == 1'd1)))))) & main_litedramcore_sdram_interface_bank0_ready)) | (((builder_litedramcore_litedramcore_roundrobin1_grant == 1'd1) & ((main_user_port_port_cmd_payload_addr[9:7] == 1'd1) & (~(((((((builder_litedramcore_litedramcore_locked3 | (main_litedramcore_sdram_interface_bank0_lock & (builder_litedramcore_litedramcore_roundrobin0_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank2_lock & (builder_litedramcore_litedramcore_roundrobin2_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank3_lock & (builder_litedramcore_litedramcore_roundrobin3_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank4_lock & (builder_litedramcore_litedramcore_roundrobin4_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank5_lock & (builder_litedramcore_litedramcore_roundrobin5_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank6_lock & (builder_litedramcore_litedramcore_roundrobin6_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank7_lock & (builder_litedramcore_litedramcore_roundrobin7_grant == 1'd1)))))) & main_litedramcore_sdram_interface_bank1_ready)) | (((builder_litedramcore_litedramcore_roundrobin2_grant == 1'd1) & ((main_user_port_port_cmd_payload_addr[9:7] == 2'd2) & (~(((((((builder_litedramcore_litedramcore_locked5 | (main_litedramcore_sdram_interface_bank0_lock & (builder_litedramcore_litedramcore_roundrobin0_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank1_lock & (builder_litedramcore_litedramcore_roundrobin1_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank3_lock & (builder_litedramcore_litedramcore_roundrobin3_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank4_lock & (builder_litedramcore_litedramcore_roundrobin4_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank5_lock & (builder_litedramcore_litedramcore_roundrobin5_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank6_lock & (builder_litedramcore_litedramcore_roundrobin6_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank7_lock & (builder_litedramcore_litedramcore_roundrobin7_grant == 1'd1)))))) & main_litedramcore_sdram_interface_bank2_ready)) | (((builder_litedramcore_litedramcore_roundrobin3_grant == 1'd1) & ((main_user_port_port_cmd_payload_addr[9:7] == 2'd3) & (~(((((((builder_litedramcore_litedramcore_locked7 | (main_litedramcore_sdram_interface_bank0_lock & (builder_litedramcore_litedramcore_roundrobin0_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank1_lock & (builder_litedramcore_litedramcore_roundrobin1_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank2_lock & (builder_litedramcore_litedramcore_roundrobin2_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank4_lock & (builder_litedramcore_litedramcore_roundrobin4_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank5_lock & (builder_litedramcore_litedramcore_roundrobin5_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank6_lock & (builder_litedramcore_litedramcore_roundrobin6_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank7_lock & (builder_litedramcore_litedramcore_roundrobin7_grant == 1'd1)))))) & main_litedramcore_sdram_interface_bank3_ready)) | (((builder_litedramcore_litedramcore_roundrobin4_grant == 1'd1) & ((main_user_port_port_cmd_payload_addr[9:7] == 3'd4) & (~(((((((builder_litedramcore_litedramcore_locked9 | (main_litedramcore_sdram_interface_bank0_lock & (builder_litedramcore_litedramcore_roundrobin0_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank1_lock & (builder_litedramcore_litedramcore_roundrobin1_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank2_lock & (builder_litedramcore_litedramcore_roundrobin2_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank3_lock & (builder_litedramcore_litedramcore_roundrobin3_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank5_lock & (builder_litedramcore_litedramcore_roundrobin5_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank6_lock & (builder_litedramcore_litedramcore_roundrobin6_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank7_lock & (builder_litedramcore_litedramcore_roundrobin7_grant == 1'd1)))))) & main_litedramcore_sdram_interface_bank4_ready)) | (((builder_litedramcore_litedramcore_roundrobin5_grant == 1'd1) & ((main_user_port_port_cmd_payload_addr[9:7] == 3'd5) & (~(((((((builder_litedramcore_litedramcore_locked11 | (main_litedramcore_sdram_interface_bank0_lock & (builder_litedramcore_litedramcore_roundrobin0_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank1_lock & (builder_litedramcore_litedramcore_roundrobin1_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank2_lock & (builder_litedramcore_litedramcore_roundrobin2_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank3_lock & (builder_litedramcore_litedramcore_roundrobin3_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank4_lock & (builder_litedramcore_litedramcore_roundrobin4_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank6_lock & (builder_litedramcore_litedramcore_roundrobin6_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank7_lock & (builder_litedramcore_litedramcore_roundrobin7_grant == 1'd1)))))) & main_litedramcore_sdram_interface_bank5_ready)) | (((builder_litedramcore_litedramcore_roundrobin6_grant == 1'd1) & ((main_user_port_port_cmd_payload_addr[9:7] == 3'd6) & (~(((((((builder_litedramcore_litedramcore_locked13 | (main_litedramcore_sdram_interface_bank0_lock & (builder_litedramcore_litedramcore_roundrobin0_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank1_lock & (builder_litedramcore_litedramcore_roundrobin1_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank2_lock & (builder_litedramcore_litedramcore_roundrobin2_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank3_lock & (builder_litedramcore_litedramcore_roundrobin3_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank4_lock & (builder_litedramcore_litedramcore_roundrobin4_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank5_lock & (builder_litedramcore_litedramcore_roundrobin5_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank7_lock & (builder_litedramcore_litedramcore_roundrobin7_grant == 1'd1)))))) & main_litedramcore_sdram_interface_bank6_ready)) | (((builder_litedramcore_litedramcore_roundrobin7_grant == 1'd1) & ((main_user_port_port_cmd_payload_addr[9:7] == 3'd7) & (~(((((((builder_litedramcore_litedramcore_locked15 | (main_litedramcore_sdram_interface_bank0_lock & (builder_litedramcore_litedramcore_roundrobin0_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank1_lock & (builder_litedramcore_litedramcore_roundrobin1_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank2_lock & (builder_litedramcore_litedramcore_roundrobin2_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank3_lock & (builder_litedramcore_litedramcore_roundrobin3_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank4_lock & (builder_litedramcore_litedramcore_roundrobin4_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank5_lock & (builder_litedramcore_litedramcore_roundrobin5_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank6_lock & (builder_litedramcore_litedramcore_roundrobin6_grant == 1'd1)))))) & main_litedramcore_sdram_interface_bank7_ready));
assign main_litedramcore_port_wdata_ready = builder_litedramcore_litedramcore_new_master_wdata_ready1;
assign main_user_port_port_wdata_ready = builder_litedramcore_litedramcore_new_master_wdata_ready3;
assign main_litedramcore_port_rdata_valid = builder_litedramcore_litedramcore_new_master_rdata_valid8;
assign main_user_port_port_rdata_valid = builder_litedramcore_litedramcore_new_master_rdata_valid17;
always @(*) begin
    main_litedramcore_sdram_interface_wdata <= 128'd0;
    case ({builder_litedramcore_litedramcore_new_master_wdata_ready3, builder_litedramcore_litedramcore_new_master_wdata_ready1})
        1'd1: begin
            main_litedramcore_sdram_interface_wdata <= main_litedramcore_port_wdata_payload_data;
        end
        2'd2: begin
            main_litedramcore_sdram_interface_wdata <= main_user_port_port_wdata_payload_data;
        end
        default: begin
            main_litedramcore_sdram_interface_wdata <= 1'd0;
        end
    endcase
end
always @(*) begin
    main_litedramcore_sdram_interface_wdata_we <= 16'd0;
    case ({builder_litedramcore_litedramcore_new_master_wdata_ready3, builder_litedramcore_litedramcore_new_master_wdata_ready1})
        1'd1: begin
            main_litedramcore_sdram_interface_wdata_we <= main_litedramcore_port_wdata_payload_we;
        end
        2'd2: begin
            main_litedramcore_sdram_interface_wdata_we <= main_user_port_port_wdata_payload_we;
        end
        default: begin
            main_litedramcore_sdram_interface_wdata_we <= 1'd0;
        end
    endcase
end
assign main_litedramcore_port_rdata_payload_data = main_litedramcore_sdram_interface_rdata;
assign main_user_port_port_rdata_payload_data = main_litedramcore_sdram_interface_rdata;
assign main_user_port_litedramnativeportconverter_cmd_buffer_source_ready = (main_user_port_litedramnativeportconverter_wdata_finished | main_user_port_litedramnativeportconverter_rdata_finished);
assign main_user_port_litedramnativeportconverter_addr_changed = (main_user_port_litedramnativeportconverter_cmd_addr[25:1] != main_user_port_new_port_cmd_payload_addr[25:1]);
assign main_user_port_litedramnativeportconverter_rw_collision = ((main_user_port_litedramnativeportconverter_cmd_we & (main_user_port_new_port_cmd_valid & (~main_user_port_new_port_cmd_payload_we))) & (~main_user_port_litedramnativeportconverter_addr_changed));
assign main_user_port_litedramnativeportconverter_next_cmd = ((((main_user_port_litedramnativeportconverter_addr_changed | (main_user_port_litedramnativeportconverter_cmd_we != main_user_port_new_port_cmd_payload_we)) | (main_user_port_litedramnativeportconverter_sel == 2'd3)) | main_user_port_litedramnativeportconverter_cmd_last) | main_user_port_new_port_flush);
assign main_user_port_litedramnativeportconverter_rdata_fifo_sink_sink_valid = main_user_port_port_rdata_valid;
assign main_user_port_port_rdata_ready = main_user_port_litedramnativeportconverter_rdata_fifo_sink_sink_ready;
assign main_user_port_litedramnativeportconverter_rdata_fifo_sink_sink_first = main_user_port_port_rdata_first;
assign main_user_port_litedramnativeportconverter_rdata_fifo_sink_sink_last = main_user_port_port_rdata_last;
assign main_user_port_litedramnativeportconverter_rdata_fifo_sink_sink_payload_data = main_user_port_port_rdata_payload_data;
assign main_user_port_litedramnativeportconverter_rdata_converter_sink_valid = main_user_port_litedramnativeportconverter_rdata_fifo_source_source_valid;
assign main_user_port_litedramnativeportconverter_rdata_fifo_source_source_ready = main_user_port_litedramnativeportconverter_rdata_converter_sink_ready;
assign main_user_port_litedramnativeportconverter_rdata_converter_sink_first = main_user_port_litedramnativeportconverter_rdata_fifo_source_source_first;
assign main_user_port_litedramnativeportconverter_rdata_converter_sink_last = main_user_port_litedramnativeportconverter_rdata_fifo_source_source_last;
assign main_user_port_litedramnativeportconverter_rdata_converter_sink_payload_data = main_user_port_litedramnativeportconverter_rdata_fifo_source_source_payload_data;
assign main_user_port_litedramnativeportconverter_rdata_chunk_valid = ((main_user_port_litedramnativeportconverter_cmd_buffer_source_payload_sel & main_user_port_litedramnativeportconverter_rdata_chunk) != 1'd0);
always @(*) begin
    main_user_port_litedramnativeportconverter_rdata_converter_source_ready <= 1'd0;
    if ((main_user_port_litedramnativeportconverter_cmd_buffer_source_valid & (~main_user_port_litedramnativeportconverter_cmd_buffer_source_payload_we))) begin
        if (main_user_port_litedramnativeportconverter_rdata_chunk_valid) begin
            main_user_port_litedramnativeportconverter_rdata_converter_source_ready <= main_user_port_new_port_rdata_ready;
        end else begin
            main_user_port_litedramnativeportconverter_rdata_converter_source_ready <= 1'd1;
        end
    end
end
always @(*) begin
    main_user_port_litedramnativeportconverter_rdata_finished <= 1'd0;
    if ((main_user_port_litedramnativeportconverter_cmd_buffer_source_valid & (~main_user_port_litedramnativeportconverter_cmd_buffer_source_payload_we))) begin
        main_user_port_litedramnativeportconverter_rdata_finished <= ((main_user_port_litedramnativeportconverter_rdata_converter_source_valid & main_user_port_litedramnativeportconverter_rdata_converter_source_ready) & main_user_port_litedramnativeportconverter_rdata_chunk[1]);
    end
end
always @(*) begin
    main_user_port_new_port_rdata_payload_data <= 64'd0;
    if ((main_user_port_litedramnativeportconverter_cmd_buffer_source_valid & (~main_user_port_litedramnativeportconverter_cmd_buffer_source_payload_we))) begin
        if (main_user_port_litedramnativeportconverter_rdata_chunk_valid) begin
            main_user_port_new_port_rdata_payload_data <= main_user_port_litedramnativeportconverter_rdata_converter_source_payload_data;
        end else begin
        end
    end
end
always @(*) begin
    main_user_port_new_port_rdata_valid <= 1'd0;
    if ((main_user_port_litedramnativeportconverter_cmd_buffer_source_valid & (~main_user_port_litedramnativeportconverter_cmd_buffer_source_payload_we))) begin
        if (main_user_port_litedramnativeportconverter_rdata_chunk_valid) begin
            main_user_port_new_port_rdata_valid <= main_user_port_litedramnativeportconverter_rdata_converter_source_valid;
        end else begin
        end
    end
end
assign main_user_port_litedramnativeportconverter_wdata_fifo_sink_sink_valid = main_user_port_new_port_wdata_valid;
assign main_user_port_new_port_wdata_ready = main_user_port_litedramnativeportconverter_wdata_fifo_sink_sink_ready;
assign main_user_port_litedramnativeportconverter_wdata_fifo_sink_sink_first = main_user_port_new_port_wdata_first;
assign main_user_port_litedramnativeportconverter_wdata_fifo_sink_sink_last = main_user_port_new_port_wdata_last;
assign main_user_port_litedramnativeportconverter_wdata_fifo_sink_sink_payload_data = main_user_port_new_port_wdata_payload_data;
assign main_user_port_litedramnativeportconverter_wdata_fifo_sink_sink_payload_we = main_user_port_new_port_wdata_payload_we;
assign main_user_port_port_wdata_valid = main_user_port_litedramnativeportconverter_wdata_buffer_source_source_valid;
assign main_user_port_litedramnativeportconverter_wdata_buffer_source_source_ready = main_user_port_port_wdata_ready;
assign main_user_port_port_wdata_first = main_user_port_litedramnativeportconverter_wdata_buffer_source_source_first;
assign main_user_port_port_wdata_last = main_user_port_litedramnativeportconverter_wdata_buffer_source_source_last;
assign main_user_port_port_wdata_payload_data = main_user_port_litedramnativeportconverter_wdata_buffer_source_source_payload_data;
assign main_user_port_port_wdata_payload_we = main_user_port_litedramnativeportconverter_wdata_buffer_source_source_payload_we;
assign main_user_port_litedramnativeportconverter_wdata_chunk_valid = ((main_user_port_litedramnativeportconverter_cmd_buffer_source_payload_sel & main_user_port_litedramnativeportconverter_wdata_chunk) != 1'd0);
always @(*) begin
    main_user_port_litedramnativeportconverter_wdata_converter_sink_valid <= 1'd0;
    if ((main_user_port_litedramnativeportconverter_cmd_buffer_source_valid & main_user_port_litedramnativeportconverter_cmd_buffer_source_payload_we)) begin
        if (main_user_port_litedramnativeportconverter_wdata_chunk_valid) begin
            main_user_port_litedramnativeportconverter_wdata_converter_sink_valid <= main_user_port_litedramnativeportconverter_wdata_fifo_source_source_valid;
        end else begin
            main_user_port_litedramnativeportconverter_wdata_converter_sink_valid <= 1'd1;
        end
    end
end
always @(*) begin
    main_user_port_litedramnativeportconverter_wdata_converter_sink_payload_we <= 8'd0;
    if ((main_user_port_litedramnativeportconverter_cmd_buffer_source_valid & main_user_port_litedramnativeportconverter_cmd_buffer_source_payload_we)) begin
        if (main_user_port_litedramnativeportconverter_wdata_chunk_valid) begin
            main_user_port_litedramnativeportconverter_wdata_converter_sink_payload_we <= main_user_port_litedramnativeportconverter_wdata_fifo_source_source_payload_we;
        end else begin
        end
    end
end
always @(*) begin
    main_user_port_litedramnativeportconverter_wdata_fifo_source_source_ready <= 1'd0;
    if ((main_user_port_litedramnativeportconverter_cmd_buffer_source_valid & main_user_port_litedramnativeportconverter_cmd_buffer_source_payload_we)) begin
        if (main_user_port_litedramnativeportconverter_wdata_chunk_valid) begin
            main_user_port_litedramnativeportconverter_wdata_fifo_source_source_ready <= main_user_port_litedramnativeportconverter_wdata_converter_sink_ready;
        end else begin
        end
    end
end
always @(*) begin
    main_user_port_litedramnativeportconverter_wdata_converter_sink_payload_data <= 64'd0;
    if ((main_user_port_litedramnativeportconverter_cmd_buffer_source_valid & main_user_port_litedramnativeportconverter_cmd_buffer_source_payload_we)) begin
        if (main_user_port_litedramnativeportconverter_wdata_chunk_valid) begin
            main_user_port_litedramnativeportconverter_wdata_converter_sink_payload_data <= main_user_port_litedramnativeportconverter_wdata_fifo_source_source_payload_data;
        end else begin
        end
    end
end
assign main_user_port_litedramnativeportconverter_wdata_buffer_sink_sink_valid = main_user_port_litedramnativeportconverter_wdata_converter_source_valid;
assign main_user_port_litedramnativeportconverter_wdata_buffer_sink_sink_payload_data = main_user_port_litedramnativeportconverter_wdata_converter_source_payload_data;
assign main_user_port_litedramnativeportconverter_wdata_buffer_sink_sink_payload_we = (main_user_port_litedramnativeportconverter_wdata_converter_source_payload_we & main_user_port_litedramnativeportconverter_wdata_sel);
assign main_user_port_litedramnativeportconverter_wdata_converter_source_ready = main_user_port_litedramnativeportconverter_wdata_buffer_sink_sink_ready;
assign main_user_port_litedramnativeportconverter_wdata_finished = ((main_user_port_litedramnativeportconverter_wdata_converter_sink_valid & main_user_port_litedramnativeportconverter_wdata_converter_sink_ready) & main_user_port_litedramnativeportconverter_wdata_chunk[1]);
assign main_user_port_litedramnativeportconverter_cmd_buffer_source_valid = main_user_port_litedramnativeportconverter_cmd_buffer_sink_valid;
assign main_user_port_litedramnativeportconverter_cmd_buffer_sink_ready = main_user_port_litedramnativeportconverter_cmd_buffer_source_ready;
assign main_user_port_litedramnativeportconverter_cmd_buffer_source_first = main_user_port_litedramnativeportconverter_cmd_buffer_sink_first;
assign main_user_port_litedramnativeportconverter_cmd_buffer_source_last = main_user_port_litedramnativeportconverter_cmd_buffer_sink_last;
assign main_user_port_litedramnativeportconverter_cmd_buffer_source_payload_sel = main_user_port_litedramnativeportconverter_cmd_buffer_sink_payload_sel;
assign main_user_port_litedramnativeportconverter_cmd_buffer_source_payload_we = main_user_port_litedramnativeportconverter_cmd_buffer_sink_payload_we;
always @(*) begin
    builder_litedramcore_litedramcore_next_state <= 2'd0;
    builder_litedramcore_litedramcore_next_state <= builder_litedramcore_litedramcore_state;
    case (builder_litedramcore_litedramcore_state)
        1'd1: begin
            if (main_user_port_port_cmd_ready) begin
                if (main_user_port_litedramnativeportconverter_cmd_we) begin
                    builder_litedramcore_litedramcore_next_state <= 1'd0;
                end else begin
                    builder_litedramcore_litedramcore_next_state <= 2'd2;
                end
            end
        end
        2'd2: begin
            if (main_user_port_litedramnativeportconverter_next_cmd) begin
                builder_litedramcore_litedramcore_next_state <= 2'd3;
            end else begin
            end
        end
        2'd3: begin
            if (main_user_port_litedramnativeportconverter_cmd_buffer_sink_ready) begin
                if (main_user_port_litedramnativeportconverter_cmd_we) begin
                    builder_litedramcore_litedramcore_next_state <= 1'd1;
                end else begin
                    builder_litedramcore_litedramcore_next_state <= 1'd0;
                end
            end
        end
        default: begin
            if (main_user_port_new_port_cmd_ready) begin
                if (main_user_port_new_port_cmd_payload_we) begin
                    builder_litedramcore_litedramcore_next_state <= 2'd2;
                end else begin
                    builder_litedramcore_litedramcore_next_state <= 1'd1;
                end
            end
        end
    endcase
end
always @(*) begin
    main_user_port_litedramnativeportconverter_sel_litedramcore_next_value3 <= 2'd0;
    case (builder_litedramcore_litedramcore_state)
        1'd1: begin
        end
        2'd2: begin
            if (main_user_port_litedramnativeportconverter_next_cmd) begin
            end else begin
                if (main_user_port_new_port_cmd_valid) begin
                    main_user_port_litedramnativeportconverter_sel_litedramcore_next_value3 <= (main_user_port_litedramnativeportconverter_sel | (1'd1 <<< main_user_port_new_port_cmd_payload_addr[0]));
                end
            end
        end
        2'd3: begin
        end
        default: begin
            if (main_user_port_new_port_cmd_ready) begin
                main_user_port_litedramnativeportconverter_sel_litedramcore_next_value3 <= (1'd1 <<< main_user_port_new_port_cmd_payload_addr[0]);
            end
        end
    endcase
end
always @(*) begin
    main_user_port_port_cmd_valid <= 1'd0;
    case (builder_litedramcore_litedramcore_state)
        1'd1: begin
            main_user_port_port_cmd_valid <= 1'd1;
        end
        2'd2: begin
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_user_port_litedramnativeportconverter_sel_litedramcore_next_value_ce3 <= 1'd0;
    case (builder_litedramcore_litedramcore_state)
        1'd1: begin
        end
        2'd2: begin
            if (main_user_port_litedramnativeportconverter_next_cmd) begin
            end else begin
                if (main_user_port_new_port_cmd_valid) begin
                    main_user_port_litedramnativeportconverter_sel_litedramcore_next_value_ce3 <= 1'd1;
                end
            end
        end
        2'd3: begin
        end
        default: begin
            if (main_user_port_new_port_cmd_ready) begin
                main_user_port_litedramnativeportconverter_sel_litedramcore_next_value_ce3 <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    main_user_port_new_port_cmd_ready <= 1'd0;
    case (builder_litedramcore_litedramcore_state)
        1'd1: begin
        end
        2'd2: begin
            if (main_user_port_litedramnativeportconverter_next_cmd) begin
            end else begin
                main_user_port_new_port_cmd_ready <= main_user_port_new_port_cmd_valid;
            end
        end
        2'd3: begin
        end
        default: begin
            main_user_port_new_port_cmd_ready <= (main_user_port_new_port_cmd_valid & (~main_user_port_litedramnativeportconverter_read_lock));
        end
    endcase
end
always @(*) begin
    main_user_port_port_cmd_payload_we <= 1'd0;
    case (builder_litedramcore_litedramcore_state)
        1'd1: begin
            main_user_port_port_cmd_payload_we <= main_user_port_litedramnativeportconverter_cmd_we;
        end
        2'd2: begin
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_user_port_port_cmd_payload_addr <= 25'd0;
    case (builder_litedramcore_litedramcore_state)
        1'd1: begin
            main_user_port_port_cmd_payload_addr <= main_user_port_litedramnativeportconverter_cmd_addr[25:1];
        end
        2'd2: begin
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_user_port_litedramnativeportconverter_cmd_buffer_sink_valid <= 1'd0;
    case (builder_litedramcore_litedramcore_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            main_user_port_litedramnativeportconverter_cmd_buffer_sink_valid <= 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_user_port_litedramnativeportconverter_cmd_addr_litedramcore_next_value0 <= 26'd0;
    case (builder_litedramcore_litedramcore_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        default: begin
            if (main_user_port_new_port_cmd_ready) begin
                main_user_port_litedramnativeportconverter_cmd_addr_litedramcore_next_value0 <= main_user_port_new_port_cmd_payload_addr;
            end
        end
    endcase
end
always @(*) begin
    main_user_port_litedramnativeportconverter_cmd_buffer_sink_payload_sel <= 2'd0;
    case (builder_litedramcore_litedramcore_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            main_user_port_litedramnativeportconverter_cmd_buffer_sink_payload_sel <= main_user_port_litedramnativeportconverter_sel;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_user_port_litedramnativeportconverter_cmd_addr_litedramcore_next_value_ce0 <= 1'd0;
    case (builder_litedramcore_litedramcore_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        default: begin
            if (main_user_port_new_port_cmd_ready) begin
                main_user_port_litedramnativeportconverter_cmd_addr_litedramcore_next_value_ce0 <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    main_user_port_litedramnativeportconverter_cmd_buffer_sink_payload_we <= 1'd0;
    case (builder_litedramcore_litedramcore_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            main_user_port_litedramnativeportconverter_cmd_buffer_sink_payload_we <= main_user_port_litedramnativeportconverter_cmd_we;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_user_port_litedramnativeportconverter_cmd_we_litedramcore_next_value1 <= 1'd0;
    case (builder_litedramcore_litedramcore_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        default: begin
            if (main_user_port_new_port_cmd_ready) begin
                main_user_port_litedramnativeportconverter_cmd_we_litedramcore_next_value1 <= main_user_port_new_port_cmd_payload_we;
            end
        end
    endcase
end
always @(*) begin
    main_user_port_litedramnativeportconverter_cmd_we_litedramcore_next_value_ce1 <= 1'd0;
    case (builder_litedramcore_litedramcore_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        default: begin
            if (main_user_port_new_port_cmd_ready) begin
                main_user_port_litedramnativeportconverter_cmd_we_litedramcore_next_value_ce1 <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    main_user_port_litedramnativeportconverter_cmd_last_litedramcore_next_value2 <= 1'd0;
    case (builder_litedramcore_litedramcore_state)
        1'd1: begin
        end
        2'd2: begin
            if (main_user_port_litedramnativeportconverter_next_cmd) begin
            end else begin
                main_user_port_litedramnativeportconverter_cmd_last_litedramcore_next_value2 <= main_user_port_new_port_cmd_last;
            end
        end
        2'd3: begin
        end
        default: begin
            if (main_user_port_new_port_cmd_ready) begin
                main_user_port_litedramnativeportconverter_cmd_last_litedramcore_next_value2 <= main_user_port_new_port_cmd_last;
            end
        end
    endcase
end
always @(*) begin
    main_user_port_litedramnativeportconverter_cmd_last_litedramcore_next_value_ce2 <= 1'd0;
    case (builder_litedramcore_litedramcore_state)
        1'd1: begin
        end
        2'd2: begin
            if (main_user_port_litedramnativeportconverter_next_cmd) begin
            end else begin
                main_user_port_litedramnativeportconverter_cmd_last_litedramcore_next_value_ce2 <= 1'd1;
            end
        end
        2'd3: begin
        end
        default: begin
            if (main_user_port_new_port_cmd_ready) begin
                main_user_port_litedramnativeportconverter_cmd_last_litedramcore_next_value_ce2 <= 1'd1;
            end
        end
    endcase
end
assign main_user_port_litedramnativeportconverter_rdata_fifo_pipe_valid_sink_ready = ((~main_user_port_litedramnativeportconverter_rdata_fifo_pipe_valid_source_valid) | main_user_port_litedramnativeportconverter_rdata_fifo_pipe_valid_source_ready);
assign main_user_port_litedramnativeportconverter_rdata_fifo_pipe_valid_sink_valid = main_user_port_litedramnativeportconverter_rdata_fifo_sink_sink_valid;
assign main_user_port_litedramnativeportconverter_rdata_fifo_sink_sink_ready = main_user_port_litedramnativeportconverter_rdata_fifo_pipe_valid_sink_ready;
assign main_user_port_litedramnativeportconverter_rdata_fifo_pipe_valid_sink_first = main_user_port_litedramnativeportconverter_rdata_fifo_sink_sink_first;
assign main_user_port_litedramnativeportconverter_rdata_fifo_pipe_valid_sink_last = main_user_port_litedramnativeportconverter_rdata_fifo_sink_sink_last;
assign main_user_port_litedramnativeportconverter_rdata_fifo_pipe_valid_sink_payload_data = main_user_port_litedramnativeportconverter_rdata_fifo_sink_sink_payload_data;
assign main_user_port_litedramnativeportconverter_rdata_fifo_source_source_valid = main_user_port_litedramnativeportconverter_rdata_fifo_pipe_valid_source_valid;
assign main_user_port_litedramnativeportconverter_rdata_fifo_pipe_valid_source_ready = main_user_port_litedramnativeportconverter_rdata_fifo_source_source_ready;
assign main_user_port_litedramnativeportconverter_rdata_fifo_source_source_first = main_user_port_litedramnativeportconverter_rdata_fifo_pipe_valid_source_first;
assign main_user_port_litedramnativeportconverter_rdata_fifo_source_source_last = main_user_port_litedramnativeportconverter_rdata_fifo_pipe_valid_source_last;
assign main_user_port_litedramnativeportconverter_rdata_fifo_source_source_payload_data = main_user_port_litedramnativeportconverter_rdata_fifo_pipe_valid_source_payload_data;
assign main_user_port_litedramnativeportconverter_rdata_converter_converter_sink_valid = main_user_port_litedramnativeportconverter_rdata_converter_sink_valid;
assign main_user_port_litedramnativeportconverter_rdata_converter_converter_sink_first = main_user_port_litedramnativeportconverter_rdata_converter_sink_first;
assign main_user_port_litedramnativeportconverter_rdata_converter_converter_sink_last = main_user_port_litedramnativeportconverter_rdata_converter_sink_last;
assign main_user_port_litedramnativeportconverter_rdata_converter_sink_ready = main_user_port_litedramnativeportconverter_rdata_converter_converter_sink_ready;
always @(*) begin
    main_user_port_litedramnativeportconverter_rdata_converter_converter_sink_payload_data <= 128'd0;
    main_user_port_litedramnativeportconverter_rdata_converter_converter_sink_payload_data[63:0] <= main_user_port_litedramnativeportconverter_rdata_converter_sink_payload_data[63:0];
    main_user_port_litedramnativeportconverter_rdata_converter_converter_sink_payload_data[127:64] <= main_user_port_litedramnativeportconverter_rdata_converter_sink_payload_data[127:64];
end
assign main_user_port_litedramnativeportconverter_rdata_converter_source_valid = main_user_port_litedramnativeportconverter_rdata_converter_source_source_valid;
assign main_user_port_litedramnativeportconverter_rdata_converter_source_first = main_user_port_litedramnativeportconverter_rdata_converter_source_source_first;
assign main_user_port_litedramnativeportconverter_rdata_converter_source_last = main_user_port_litedramnativeportconverter_rdata_converter_source_source_last;
assign main_user_port_litedramnativeportconverter_rdata_converter_source_source_ready = main_user_port_litedramnativeportconverter_rdata_converter_source_ready;
assign {main_user_port_litedramnativeportconverter_rdata_converter_source_payload_data} = main_user_port_litedramnativeportconverter_rdata_converter_source_source_payload_data;
assign main_user_port_litedramnativeportconverter_rdata_converter_source_source_valid = main_user_port_litedramnativeportconverter_rdata_converter_converter_source_valid;
assign main_user_port_litedramnativeportconverter_rdata_converter_converter_source_ready = main_user_port_litedramnativeportconverter_rdata_converter_source_source_ready;
assign main_user_port_litedramnativeportconverter_rdata_converter_source_source_first = main_user_port_litedramnativeportconverter_rdata_converter_converter_source_first;
assign main_user_port_litedramnativeportconverter_rdata_converter_source_source_last = main_user_port_litedramnativeportconverter_rdata_converter_converter_source_last;
assign main_user_port_litedramnativeportconverter_rdata_converter_source_source_payload_data = main_user_port_litedramnativeportconverter_rdata_converter_converter_source_payload_data;
assign main_user_port_litedramnativeportconverter_rdata_converter_converter_first = (main_user_port_litedramnativeportconverter_rdata_converter_converter_mux == 1'd0);
assign main_user_port_litedramnativeportconverter_rdata_converter_converter_last = (main_user_port_litedramnativeportconverter_rdata_converter_converter_mux == 1'd1);
assign main_user_port_litedramnativeportconverter_rdata_converter_converter_source_valid = main_user_port_litedramnativeportconverter_rdata_converter_converter_sink_valid;
assign main_user_port_litedramnativeportconverter_rdata_converter_converter_source_first = (main_user_port_litedramnativeportconverter_rdata_converter_converter_sink_first & main_user_port_litedramnativeportconverter_rdata_converter_converter_first);
assign main_user_port_litedramnativeportconverter_rdata_converter_converter_source_last = (main_user_port_litedramnativeportconverter_rdata_converter_converter_sink_last & main_user_port_litedramnativeportconverter_rdata_converter_converter_last);
assign main_user_port_litedramnativeportconverter_rdata_converter_converter_sink_ready = (main_user_port_litedramnativeportconverter_rdata_converter_converter_last & main_user_port_litedramnativeportconverter_rdata_converter_converter_source_ready);
always @(*) begin
    main_user_port_litedramnativeportconverter_rdata_converter_converter_source_payload_data <= 64'd0;
    case (main_user_port_litedramnativeportconverter_rdata_converter_converter_mux)
        1'd0: begin
            main_user_port_litedramnativeportconverter_rdata_converter_converter_source_payload_data <= main_user_port_litedramnativeportconverter_rdata_converter_converter_sink_payload_data[63:0];
        end
        default: begin
            main_user_port_litedramnativeportconverter_rdata_converter_converter_source_payload_data <= main_user_port_litedramnativeportconverter_rdata_converter_converter_sink_payload_data[127:64];
        end
    endcase
end
assign main_user_port_litedramnativeportconverter_rdata_converter_converter_source_payload_valid_token_count = main_user_port_litedramnativeportconverter_rdata_converter_converter_last;
assign main_user_port_litedramnativeportconverter_wdata_converter_converter_sink_valid = main_user_port_litedramnativeportconverter_wdata_converter_sink_valid;
assign main_user_port_litedramnativeportconverter_wdata_converter_converter_sink_first = main_user_port_litedramnativeportconverter_wdata_converter_sink_first;
assign main_user_port_litedramnativeportconverter_wdata_converter_converter_sink_last = main_user_port_litedramnativeportconverter_wdata_converter_sink_last;
assign main_user_port_litedramnativeportconverter_wdata_converter_sink_ready = main_user_port_litedramnativeportconverter_wdata_converter_converter_sink_ready;
assign main_user_port_litedramnativeportconverter_wdata_converter_converter_sink_payload_data = {main_user_port_litedramnativeportconverter_wdata_converter_sink_payload_we, main_user_port_litedramnativeportconverter_wdata_converter_sink_payload_data};
assign main_user_port_litedramnativeportconverter_wdata_converter_source_valid = main_user_port_litedramnativeportconverter_wdata_converter_source_source_valid;
assign main_user_port_litedramnativeportconverter_wdata_converter_source_first = main_user_port_litedramnativeportconverter_wdata_converter_source_source_first;
assign main_user_port_litedramnativeportconverter_wdata_converter_source_last = main_user_port_litedramnativeportconverter_wdata_converter_source_source_last;
assign main_user_port_litedramnativeportconverter_wdata_converter_source_source_ready = main_user_port_litedramnativeportconverter_wdata_converter_source_ready;
always @(*) begin
    main_user_port_litedramnativeportconverter_wdata_converter_source_payload_data <= 128'd0;
    main_user_port_litedramnativeportconverter_wdata_converter_source_payload_data[63:0] <= main_user_port_litedramnativeportconverter_wdata_converter_source_source_payload_data[63:0];
    main_user_port_litedramnativeportconverter_wdata_converter_source_payload_data[127:64] <= main_user_port_litedramnativeportconverter_wdata_converter_source_source_payload_data[135:72];
end
always @(*) begin
    main_user_port_litedramnativeportconverter_wdata_converter_source_payload_we <= 16'd0;
    main_user_port_litedramnativeportconverter_wdata_converter_source_payload_we[7:0] <= main_user_port_litedramnativeportconverter_wdata_converter_source_source_payload_data[71:64];
    main_user_port_litedramnativeportconverter_wdata_converter_source_payload_we[15:8] <= main_user_port_litedramnativeportconverter_wdata_converter_source_source_payload_data[143:136];
end
assign main_user_port_litedramnativeportconverter_wdata_converter_source_source_valid = main_user_port_litedramnativeportconverter_wdata_converter_converter_source_valid;
assign main_user_port_litedramnativeportconverter_wdata_converter_converter_source_ready = main_user_port_litedramnativeportconverter_wdata_converter_source_source_ready;
assign main_user_port_litedramnativeportconverter_wdata_converter_source_source_first = main_user_port_litedramnativeportconverter_wdata_converter_converter_source_first;
assign main_user_port_litedramnativeportconverter_wdata_converter_source_source_last = main_user_port_litedramnativeportconverter_wdata_converter_converter_source_last;
assign main_user_port_litedramnativeportconverter_wdata_converter_source_source_payload_data = main_user_port_litedramnativeportconverter_wdata_converter_converter_source_payload_data;
assign main_user_port_litedramnativeportconverter_wdata_converter_converter_sink_ready = ((~main_user_port_litedramnativeportconverter_wdata_converter_converter_strobe_all) | main_user_port_litedramnativeportconverter_wdata_converter_converter_source_ready);
assign main_user_port_litedramnativeportconverter_wdata_converter_converter_source_valid = main_user_port_litedramnativeportconverter_wdata_converter_converter_strobe_all;
assign main_user_port_litedramnativeportconverter_wdata_converter_converter_load_part = (main_user_port_litedramnativeportconverter_wdata_converter_converter_sink_valid & main_user_port_litedramnativeportconverter_wdata_converter_converter_sink_ready);
assign main_user_port_litedramnativeportconverter_wdata_fifo_pipe_valid_sink_ready = ((~main_user_port_litedramnativeportconverter_wdata_fifo_pipe_valid_source_valid) | main_user_port_litedramnativeportconverter_wdata_fifo_pipe_valid_source_ready);
assign main_user_port_litedramnativeportconverter_wdata_fifo_pipe_valid_sink_valid = main_user_port_litedramnativeportconverter_wdata_fifo_sink_sink_valid;
assign main_user_port_litedramnativeportconverter_wdata_fifo_sink_sink_ready = main_user_port_litedramnativeportconverter_wdata_fifo_pipe_valid_sink_ready;
assign main_user_port_litedramnativeportconverter_wdata_fifo_pipe_valid_sink_first = main_user_port_litedramnativeportconverter_wdata_fifo_sink_sink_first;
assign main_user_port_litedramnativeportconverter_wdata_fifo_pipe_valid_sink_last = main_user_port_litedramnativeportconverter_wdata_fifo_sink_sink_last;
assign main_user_port_litedramnativeportconverter_wdata_fifo_pipe_valid_sink_payload_data = main_user_port_litedramnativeportconverter_wdata_fifo_sink_sink_payload_data;
assign main_user_port_litedramnativeportconverter_wdata_fifo_pipe_valid_sink_payload_we = main_user_port_litedramnativeportconverter_wdata_fifo_sink_sink_payload_we;
assign main_user_port_litedramnativeportconverter_wdata_fifo_source_source_valid = main_user_port_litedramnativeportconverter_wdata_fifo_pipe_valid_source_valid;
assign main_user_port_litedramnativeportconverter_wdata_fifo_pipe_valid_source_ready = main_user_port_litedramnativeportconverter_wdata_fifo_source_source_ready;
assign main_user_port_litedramnativeportconverter_wdata_fifo_source_source_first = main_user_port_litedramnativeportconverter_wdata_fifo_pipe_valid_source_first;
assign main_user_port_litedramnativeportconverter_wdata_fifo_source_source_last = main_user_port_litedramnativeportconverter_wdata_fifo_pipe_valid_source_last;
assign main_user_port_litedramnativeportconverter_wdata_fifo_source_source_payload_data = main_user_port_litedramnativeportconverter_wdata_fifo_pipe_valid_source_payload_data;
assign main_user_port_litedramnativeportconverter_wdata_fifo_source_source_payload_we = main_user_port_litedramnativeportconverter_wdata_fifo_pipe_valid_source_payload_we;
assign main_user_port_litedramnativeportconverter_wdata_buffer_pipe_valid_sink_ready = ((~main_user_port_litedramnativeportconverter_wdata_buffer_pipe_valid_source_valid) | main_user_port_litedramnativeportconverter_wdata_buffer_pipe_valid_source_ready);
assign main_user_port_litedramnativeportconverter_wdata_buffer_pipe_valid_sink_valid = main_user_port_litedramnativeportconverter_wdata_buffer_sink_sink_valid;
assign main_user_port_litedramnativeportconverter_wdata_buffer_sink_sink_ready = main_user_port_litedramnativeportconverter_wdata_buffer_pipe_valid_sink_ready;
assign main_user_port_litedramnativeportconverter_wdata_buffer_pipe_valid_sink_first = main_user_port_litedramnativeportconverter_wdata_buffer_sink_sink_first;
assign main_user_port_litedramnativeportconverter_wdata_buffer_pipe_valid_sink_last = main_user_port_litedramnativeportconverter_wdata_buffer_sink_sink_last;
assign main_user_port_litedramnativeportconverter_wdata_buffer_pipe_valid_sink_payload_data = main_user_port_litedramnativeportconverter_wdata_buffer_sink_sink_payload_data;
assign main_user_port_litedramnativeportconverter_wdata_buffer_pipe_valid_sink_payload_we = main_user_port_litedramnativeportconverter_wdata_buffer_sink_sink_payload_we;
assign main_user_port_litedramnativeportconverter_wdata_buffer_source_source_valid = main_user_port_litedramnativeportconverter_wdata_buffer_pipe_valid_source_valid;
assign main_user_port_litedramnativeportconverter_wdata_buffer_pipe_valid_source_ready = main_user_port_litedramnativeportconverter_wdata_buffer_source_source_ready;
assign main_user_port_litedramnativeportconverter_wdata_buffer_source_source_first = main_user_port_litedramnativeportconverter_wdata_buffer_pipe_valid_source_first;
assign main_user_port_litedramnativeportconverter_wdata_buffer_source_source_last = main_user_port_litedramnativeportconverter_wdata_buffer_pipe_valid_source_last;
assign main_user_port_litedramnativeportconverter_wdata_buffer_source_source_payload_data = main_user_port_litedramnativeportconverter_wdata_buffer_pipe_valid_source_payload_data;
assign main_user_port_litedramnativeportconverter_wdata_buffer_source_source_payload_we = main_user_port_litedramnativeportconverter_wdata_buffer_pipe_valid_source_payload_we;
assign main_litedramcore_data_port_adr = main_litedramcore_wb_sdram_adr[2];
always @(*) begin
    main_litedramcore_data_port_dat_w <= 128'd0;
    if (main_litedramcore_write_from_slave) begin
        main_litedramcore_data_port_dat_w <= main_litedramcore_interface_dat_r;
    end else begin
        main_litedramcore_data_port_dat_w <= {4{main_litedramcore_wb_sdram_dat_w}};
    end
end
always @(*) begin
    main_litedramcore_data_port_we <= 16'd0;
    if (main_litedramcore_write_from_slave) begin
        main_litedramcore_data_port_we <= {16{1'd1}};
    end else begin
        if ((((main_litedramcore_wb_sdram_cyc & main_litedramcore_wb_sdram_stb) & main_litedramcore_wb_sdram_we) & main_litedramcore_wb_sdram_ack)) begin
            main_litedramcore_data_port_we <= {({4{(main_litedramcore_wb_sdram_adr[1:0] == 2'd3)}} & main_litedramcore_wb_sdram_sel), ({4{(main_litedramcore_wb_sdram_adr[1:0] == 2'd2)}} & main_litedramcore_wb_sdram_sel), ({4{(main_litedramcore_wb_sdram_adr[1:0] == 1'd1)}} & main_litedramcore_wb_sdram_sel), ({4{(main_litedramcore_wb_sdram_adr[1:0] == 1'd0)}} & main_litedramcore_wb_sdram_sel)};
        end
    end
end
assign main_litedramcore_interface_dat_w = main_litedramcore_data_port_dat_r;
assign main_litedramcore_interface_sel = 16'd65535;
always @(*) begin
    main_litedramcore_wb_sdram_dat_r <= 32'd0;
    case (main_litedramcore_adr_offset_r)
        1'd0: begin
            main_litedramcore_wb_sdram_dat_r <= main_litedramcore_data_port_dat_r[31:0];
        end
        1'd1: begin
            main_litedramcore_wb_sdram_dat_r <= main_litedramcore_data_port_dat_r[63:32];
        end
        2'd2: begin
            main_litedramcore_wb_sdram_dat_r <= main_litedramcore_data_port_dat_r[95:64];
        end
        default: begin
            main_litedramcore_wb_sdram_dat_r <= main_litedramcore_data_port_dat_r[127:96];
        end
    endcase
end
assign {main_litedramcore_tag_do_dirty, main_litedramcore_tag_do_tag} = main_litedramcore_tag_port_dat_r;
assign {main_litedramcore_tag_do_dirty, main_litedramcore_tag_do_tag} = main_litedramcore_tag_port_dat_r;
assign main_litedramcore_tag_port_dat_w = {main_litedramcore_tag_di_dirty, main_litedramcore_tag_di_tag};
assign main_litedramcore_tag_port_adr = main_litedramcore_wb_sdram_adr[2];
assign main_litedramcore_tag_di_tag = main_litedramcore_wb_sdram_adr[29:3];
assign main_litedramcore_interface_adr = {main_litedramcore_tag_do_tag, main_litedramcore_wb_sdram_adr[2]};
always @(*) begin
    builder_litedramcore_fullmemorywe_next_state <= 2'd0;
    builder_litedramcore_fullmemorywe_next_state <= builder_litedramcore_fullmemorywe_state;
    case (builder_litedramcore_fullmemorywe_state)
        1'd1: begin
            if ((main_litedramcore_tag_do_tag == main_litedramcore_wb_sdram_adr[29:3])) begin
                builder_litedramcore_fullmemorywe_next_state <= 1'd0;
            end else begin
                if (main_litedramcore_tag_do_dirty) begin
                    builder_litedramcore_fullmemorywe_next_state <= 2'd2;
                end else begin
                    builder_litedramcore_fullmemorywe_next_state <= 2'd3;
                end
            end
        end
        2'd2: begin
            if (main_litedramcore_interface_ack) begin
                if (1'd1) begin
                    builder_litedramcore_fullmemorywe_next_state <= 2'd3;
                end
            end
        end
        2'd3: begin
            if (main_litedramcore_interface_ack) begin
                if (1'd1) begin
                    builder_litedramcore_fullmemorywe_next_state <= 1'd1;
                end else begin
                    builder_litedramcore_fullmemorywe_next_state <= 2'd3;
                end
            end
        end
        default: begin
            if ((main_litedramcore_wb_sdram_cyc & main_litedramcore_wb_sdram_stb)) begin
                builder_litedramcore_fullmemorywe_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_wb_sdram_ack <= 1'd0;
    case (builder_litedramcore_fullmemorywe_state)
        1'd1: begin
            if ((main_litedramcore_tag_do_tag == main_litedramcore_wb_sdram_adr[29:3])) begin
                main_litedramcore_wb_sdram_ack <= 1'd1;
            end else begin
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_tag_di_dirty <= 1'd0;
    case (builder_litedramcore_fullmemorywe_state)
        1'd1: begin
            if ((main_litedramcore_tag_do_tag == main_litedramcore_wb_sdram_adr[29:3])) begin
                if (main_litedramcore_wb_sdram_we) begin
                    main_litedramcore_tag_di_dirty <= 1'd1;
                end
            end else begin
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_word_clr <= 1'd0;
    case (builder_litedramcore_fullmemorywe_state)
        1'd1: begin
            main_litedramcore_word_clr <= 1'd1;
            if ((main_litedramcore_tag_do_tag == main_litedramcore_wb_sdram_adr[29:3])) begin
            end else begin
                if (main_litedramcore_tag_do_dirty) begin
                end else begin
                    main_litedramcore_word_clr <= 1'd1;
                end
            end
        end
        2'd2: begin
            if (main_litedramcore_interface_ack) begin
                if (1'd1) begin
                    main_litedramcore_word_clr <= 1'd1;
                end
            end
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_word_inc <= 1'd0;
    case (builder_litedramcore_fullmemorywe_state)
        1'd1: begin
        end
        2'd2: begin
            if (main_litedramcore_interface_ack) begin
                main_litedramcore_word_inc <= 1'd1;
            end
        end
        2'd3: begin
            if (main_litedramcore_interface_ack) begin
                main_litedramcore_word_inc <= 1'd1;
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_write_from_slave <= 1'd0;
    case (builder_litedramcore_fullmemorywe_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (main_litedramcore_interface_ack) begin
                main_litedramcore_write_from_slave <= 1'd1;
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_interface_cyc <= 1'd0;
    case (builder_litedramcore_fullmemorywe_state)
        1'd1: begin
        end
        2'd2: begin
            main_litedramcore_interface_cyc <= 1'd1;
        end
        2'd3: begin
            main_litedramcore_interface_cyc <= 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_interface_stb <= 1'd0;
    case (builder_litedramcore_fullmemorywe_state)
        1'd1: begin
        end
        2'd2: begin
            main_litedramcore_interface_stb <= 1'd1;
        end
        2'd3: begin
            main_litedramcore_interface_stb <= 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_tag_port_we <= 1'd0;
    case (builder_litedramcore_fullmemorywe_state)
        1'd1: begin
            if ((main_litedramcore_tag_do_tag == main_litedramcore_wb_sdram_adr[29:3])) begin
                if (main_litedramcore_wb_sdram_we) begin
                    main_litedramcore_tag_port_we <= 1'd1;
                end
            end else begin
                if (main_litedramcore_tag_do_dirty) begin
                end else begin
                    main_litedramcore_tag_port_we <= 1'd1;
                end
            end
        end
        2'd2: begin
            if (main_litedramcore_interface_ack) begin
                if (1'd1) begin
                    main_litedramcore_tag_port_we <= 1'd1;
                end
            end
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_interface_we <= 1'd0;
    case (builder_litedramcore_fullmemorywe_state)
        1'd1: begin
        end
        2'd2: begin
            main_litedramcore_interface_we <= 1'd1;
        end
        2'd3: begin
            main_litedramcore_interface_we <= 1'd0;
        end
        default: begin
        end
    endcase
end
assign main_litedramcore_port_cmd_payload_addr = (main_litedramcore_interface_adr - 27'd67108864);
assign main_litedramcore_port_cmd_payload_we = main_litedramcore_interface_we;
assign main_litedramcore_port_cmd_last = (~main_litedramcore_interface_we);
assign main_litedramcore_port_flush = (~main_litedramcore_interface_cyc);
always @(*) begin
    main_litedramcore_port_wdata_valid <= 1'd0;
    main_litedramcore_port_wdata_valid <= (main_litedramcore_interface_stb & main_litedramcore_interface_we);
    if (1'd1) begin
        if ((~main_litedramcore_is_ongoing)) begin
            main_litedramcore_port_wdata_valid <= 1'd0;
        end
    end
end
assign main_litedramcore_port_wdata_payload_data = main_litedramcore_interface_dat_w;
assign main_litedramcore_port_wdata_payload_we = main_litedramcore_interface_sel;
assign main_litedramcore_port_rdata_ready = 1'd1;
always @(*) begin
    builder_litedramcore_litedramwishbone2native_next_state <= 2'd0;
    builder_litedramcore_litedramwishbone2native_next_state <= builder_litedramcore_litedramwishbone2native_state;
    case (builder_litedramcore_litedramwishbone2native_state)
        1'd1: begin
            if ((main_litedramcore_port_wdata_valid & main_litedramcore_port_wdata_ready)) begin
                builder_litedramcore_litedramwishbone2native_next_state <= 1'd0;
            end
        end
        2'd2: begin
            if (main_litedramcore_port_rdata_valid) begin
                builder_litedramcore_litedramwishbone2native_next_state <= 1'd0;
            end
        end
        default: begin
            if (((main_litedramcore_port_cmd_valid & main_litedramcore_port_cmd_ready) & main_litedramcore_interface_we)) begin
                builder_litedramcore_litedramwishbone2native_next_state <= 1'd1;
            end
            if (((main_litedramcore_port_cmd_valid & main_litedramcore_port_cmd_ready) & (~main_litedramcore_interface_we))) begin
                builder_litedramcore_litedramwishbone2native_next_state <= 2'd2;
            end
        end
    endcase
end
always @(*) begin
    main_litedramcore_aborted_litedramwishbone2native_next_value_ce <= 1'd0;
    case (builder_litedramcore_litedramwishbone2native_state)
        1'd1: begin
            main_litedramcore_aborted_litedramwishbone2native_next_value_ce <= 1'd1;
        end
        2'd2: begin
            main_litedramcore_aborted_litedramwishbone2native_next_value_ce <= 1'd1;
        end
        default: begin
            main_litedramcore_aborted_litedramwishbone2native_next_value_ce <= 1'd1;
        end
    endcase
end
always @(*) begin
    main_litedramcore_is_ongoing <= 1'd0;
    case (builder_litedramcore_litedramwishbone2native_state)
        1'd1: begin
            main_litedramcore_is_ongoing <= 1'd1;
        end
        2'd2: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_interface_dat_r <= 128'd0;
    case (builder_litedramcore_litedramwishbone2native_state)
        1'd1: begin
        end
        2'd2: begin
            if (main_litedramcore_port_rdata_valid) begin
                main_litedramcore_interface_dat_r <= main_litedramcore_port_rdata_payload_data;
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_port_cmd_valid <= 1'd0;
    case (builder_litedramcore_litedramwishbone2native_state)
        1'd1: begin
        end
        2'd2: begin
        end
        default: begin
            main_litedramcore_port_cmd_valid <= (main_litedramcore_interface_cyc & main_litedramcore_interface_stb);
        end
    endcase
end
always @(*) begin
    main_litedramcore_interface_ack <= 1'd0;
    case (builder_litedramcore_litedramwishbone2native_state)
        1'd1: begin
            if ((main_litedramcore_port_wdata_valid & main_litedramcore_port_wdata_ready)) begin
                main_litedramcore_interface_ack <= (main_litedramcore_interface_cyc & (~main_litedramcore_aborted));
            end
        end
        2'd2: begin
            if (main_litedramcore_port_rdata_valid) begin
                main_litedramcore_interface_ack <= (main_litedramcore_interface_cyc & (~main_litedramcore_aborted));
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    main_litedramcore_aborted_litedramwishbone2native_next_value <= 1'd0;
    case (builder_litedramcore_litedramwishbone2native_state)
        1'd1: begin
            main_litedramcore_aborted_litedramwishbone2native_next_value <= ((~main_litedramcore_interface_cyc) | main_litedramcore_aborted);
        end
        2'd2: begin
            main_litedramcore_aborted_litedramwishbone2native_next_value <= ((~main_litedramcore_interface_cyc) | main_litedramcore_aborted);
        end
        default: begin
            main_litedramcore_aborted_litedramwishbone2native_next_value <= 1'd0;
        end
    endcase
end
assign main_ce = ((~main_user_port_new_port_cmd_valid) | (main_user_port_new_port_cmd_ready & main_user_port_new_port_cmd_last));
always @(*) begin
    main_request <= 2'd0;
    main_request[0] <= main_write_cmd_request;
    main_request[1] <= main_read_cmd_request;
end
assign main_write_cmd_grant = (main_grant == 1'd0);
assign main_read_cmd_grant = (main_grant == 1'd1);
assign main_write_sink_sink_valid = main_aw_valid;
assign main_aw_ready = main_write_sink_sink_ready;
assign main_write_sink_sink_first = main_aw_first;
assign main_write_sink_sink_last = main_aw_last;
assign main_write_sink_sink_payload_addr = main_aw_payload_addr;
assign main_write_sink_sink_payload_burst = main_aw_payload_burst;
assign main_write_sink_sink_payload_len = main_aw_payload_len;
assign main_write_sink_sink_payload_size = main_aw_payload_size;
assign main_write_sink_sink_payload_lock = main_aw_payload_lock;
assign main_write_sink_sink_payload_prot = main_aw_payload_prot;
assign main_write_sink_sink_payload_cache = main_aw_payload_cache;
assign main_write_sink_sink_payload_qos = main_aw_payload_qos;
assign main_write_sink_sink_payload_region = main_aw_payload_region;
assign main_write_sink_sink_param_id = main_aw_param_id;
assign main_write_sink_sink_param_dest = main_aw_param_dest;
assign main_write_sink_sink_param_user = main_aw_param_user;
assign main_write_id_buffer_sink_valid = ((main_write_aw_valid & main_write_aw_first) & main_write_aw_ready);
assign main_write_id_buffer_sink_payload_id = main_write_aw_param_id;
always @(*) begin
    main_write_id_buffer_source_ready <= 1'd0;
    if (((main_write_w_buffer_source_valid & main_write_w_buffer_source_last) & main_write_w_buffer_source_ready)) begin
        main_write_id_buffer_source_ready <= 1'd1;
    end
end
always @(*) begin
    main_write_resp_buffer_sink_payload_id <= 6'd0;
    if (((main_write_w_buffer_source_valid & main_write_w_buffer_source_last) & main_write_w_buffer_source_ready)) begin
        main_write_resp_buffer_sink_payload_id <= main_write_id_buffer_source_payload_id;
    end
end
always @(*) begin
    main_write_resp_buffer_sink_valid <= 1'd0;
    if (((main_write_w_buffer_source_valid & main_write_w_buffer_source_last) & main_write_w_buffer_source_ready)) begin
        main_write_resp_buffer_sink_valid <= 1'd1;
    end
end
always @(*) begin
    main_write_resp_buffer_sink_payload_resp <= 2'd0;
    if (((main_write_w_buffer_source_valid & main_write_w_buffer_source_last) & main_write_w_buffer_source_ready)) begin
        main_write_resp_buffer_sink_payload_resp <= 1'd0;
    end
end
assign main_b_valid = main_write_resp_buffer_source_valid;
assign main_write_resp_buffer_source_ready = main_b_ready;
assign main_b_first = main_write_resp_buffer_source_first;
assign main_b_last = main_write_resp_buffer_source_last;
assign main_b_payload_resp = main_write_resp_buffer_source_payload_resp;
assign main_b_param_id = main_write_resp_buffer_source_payload_id;
assign main_write_w_buffer_queue = ((main_user_port_new_port_cmd_valid & main_user_port_new_port_cmd_ready) & main_user_port_new_port_cmd_payload_we);
assign main_write_w_buffer_dequeue = (main_write_w_buffer_source_valid & main_write_w_buffer_source_ready);
assign main_write_can_write = (main_write_w_buffer_level1 > main_write_w_buffer_level2);
assign main_write_cmd_request = (main_write_aw_valid & main_write_can_write);
always @(*) begin
    main_user_port_new_port_cmd_valid <= 1'd0;
    if ((main_write_cmd_request & main_write_cmd_grant)) begin
        main_user_port_new_port_cmd_valid <= 1'd1;
    end
    if ((main_read_cmd_request & main_read_cmd_grant)) begin
        main_user_port_new_port_cmd_valid <= 1'd1;
    end
end
always @(*) begin
    main_user_port_new_port_cmd_last <= 1'd0;
    if ((main_write_cmd_request & main_write_cmd_grant)) begin
        main_user_port_new_port_cmd_last <= main_write_aw_last;
    end
    if ((main_read_cmd_request & main_read_cmd_grant)) begin
        main_user_port_new_port_cmd_last <= main_read_ar_last;
    end
end
always @(*) begin
    main_user_port_new_port_cmd_payload_we <= 1'd0;
    if ((main_write_cmd_request & main_write_cmd_grant)) begin
        main_user_port_new_port_cmd_payload_we <= 1'd1;
    end
    if ((main_read_cmd_request & main_read_cmd_grant)) begin
        main_user_port_new_port_cmd_payload_we <= 1'd0;
    end
end
always @(*) begin
    main_user_port_new_port_cmd_payload_addr <= 26'd0;
    if ((main_write_cmd_request & main_write_cmd_grant)) begin
        main_user_port_new_port_cmd_payload_addr <= ((main_write_aw_payload_addr - 1'd0) >>> 2'd3);
    end
    if ((main_read_cmd_request & main_read_cmd_grant)) begin
        main_user_port_new_port_cmd_payload_addr <= ((main_read_ar_payload_addr - 1'd0) >>> 2'd3);
    end
end
always @(*) begin
    main_write_aw_ready <= 1'd0;
    if ((main_write_cmd_request & main_write_cmd_grant)) begin
        if (main_user_port_new_port_cmd_ready) begin
            main_write_aw_ready <= 1'd1;
        end
    end
end
always @(*) begin
    main_write_w_buffer_sink_payload_strb <= 8'd0;
    if (main_write_axi_w_connect) begin
        main_write_w_buffer_sink_payload_strb <= main_w_payload_strb;
    end
end
always @(*) begin
    main_write_w_buffer_sink_valid <= 1'd0;
    if (main_write_axi_w_connect) begin
        main_write_w_buffer_sink_valid <= main_w_valid;
    end
end
always @(*) begin
    main_write_w_buffer_sink_first <= 1'd0;
    if (main_write_axi_w_connect) begin
        main_write_w_buffer_sink_first <= main_w_first;
    end
end
always @(*) begin
    main_write_w_buffer_sink_last <= 1'd0;
    if (main_write_axi_w_connect) begin
        main_write_w_buffer_sink_last <= main_w_last;
    end
end
always @(*) begin
    main_write_w_buffer_sink_payload_data <= 64'd0;
    if (main_write_axi_w_connect) begin
        main_write_w_buffer_sink_payload_data <= main_w_payload_data;
    end
end
always @(*) begin
    main_w_ready <= 1'd0;
    if (main_write_axi_w_connect) begin
        main_w_ready <= main_write_w_buffer_sink_ready;
    end
end
always @(*) begin
    main_write_w_buffer_sink_param_id <= 6'd0;
    if (main_write_axi_w_connect) begin
        main_write_w_buffer_sink_param_id <= main_w_param_id;
    end
end
always @(*) begin
    main_write_w_buffer_sink_param_dest <= 1'd0;
    if (main_write_axi_w_connect) begin
        main_write_w_buffer_sink_param_dest <= main_w_param_dest;
    end
end
always @(*) begin
    main_write_w_buffer_sink_param_user <= 1'd0;
    if (main_write_axi_w_connect) begin
        main_write_w_buffer_sink_param_user <= main_w_param_user;
    end
end
assign main_user_port_new_port_wdata_valid = main_write_w_buffer_source_valid;
assign main_write_w_buffer_source_ready = main_user_port_new_port_wdata_ready;
assign main_user_port_new_port_wdata_first = main_write_w_buffer_source_first;
assign main_user_port_new_port_wdata_last = main_write_w_buffer_source_last;
assign main_user_port_new_port_wdata_payload_data = main_write_w_buffer_source_payload_data;
assign main_user_port_new_port_wdata_payload_we = main_write_w_buffer_source_payload_strb;
assign main_write_pipe_valid_sink_ready = ((~main_write_pipe_valid_source_valid) | main_write_pipe_valid_source_ready);
assign main_write_pipe_valid_sink_valid = main_write_sink_sink_valid;
assign main_write_sink_sink_ready = main_write_pipe_valid_sink_ready;
assign main_write_pipe_valid_sink_first = main_write_sink_sink_first;
assign main_write_pipe_valid_sink_last = main_write_sink_sink_last;
assign main_write_pipe_valid_sink_payload_addr = main_write_sink_sink_payload_addr;
assign main_write_pipe_valid_sink_payload_burst = main_write_sink_sink_payload_burst;
assign main_write_pipe_valid_sink_payload_len = main_write_sink_sink_payload_len;
assign main_write_pipe_valid_sink_payload_size = main_write_sink_sink_payload_size;
assign main_write_pipe_valid_sink_payload_lock = main_write_sink_sink_payload_lock;
assign main_write_pipe_valid_sink_payload_prot = main_write_sink_sink_payload_prot;
assign main_write_pipe_valid_sink_payload_cache = main_write_sink_sink_payload_cache;
assign main_write_pipe_valid_sink_payload_qos = main_write_sink_sink_payload_qos;
assign main_write_pipe_valid_sink_payload_region = main_write_sink_sink_payload_region;
assign main_write_pipe_valid_sink_param_id = main_write_sink_sink_param_id;
assign main_write_pipe_valid_sink_param_dest = main_write_sink_sink_param_dest;
assign main_write_pipe_valid_sink_param_user = main_write_sink_sink_param_user;
assign main_write_source_source_valid = main_write_pipe_valid_source_valid;
assign main_write_pipe_valid_source_ready = main_write_source_source_ready;
assign main_write_source_source_first = main_write_pipe_valid_source_first;
assign main_write_source_source_last = main_write_pipe_valid_source_last;
assign main_write_source_source_payload_addr = main_write_pipe_valid_source_payload_addr;
assign main_write_source_source_payload_burst = main_write_pipe_valid_source_payload_burst;
assign main_write_source_source_payload_len = main_write_pipe_valid_source_payload_len;
assign main_write_source_source_payload_size = main_write_pipe_valid_source_payload_size;
assign main_write_source_source_payload_lock = main_write_pipe_valid_source_payload_lock;
assign main_write_source_source_payload_prot = main_write_pipe_valid_source_payload_prot;
assign main_write_source_source_payload_cache = main_write_pipe_valid_source_payload_cache;
assign main_write_source_source_payload_qos = main_write_pipe_valid_source_payload_qos;
assign main_write_source_source_payload_region = main_write_pipe_valid_source_payload_region;
assign main_write_source_source_param_id = main_write_pipe_valid_source_param_id;
assign main_write_source_source_param_dest = main_write_pipe_valid_source_param_dest;
assign main_write_source_source_param_user = main_write_pipe_valid_source_param_user;
assign main_write_beat_size = (1'd1 <<< main_write_source_source_payload_size);
assign main_write_beat_wrap = (main_write_source_source_payload_len <<< main_write_source_source_payload_size);
assign main_write_aw_valid = (main_write_source_source_valid | (~main_write_aw_first));
assign main_write_aw_first = (main_write_beat_count == 1'd0);
assign main_write_aw_last = (main_write_beat_count == main_write_source_source_payload_len);
assign main_write_aw_payload_addr = ($signed({1'd0, main_write_source_source_payload_addr}) + main_write_beat_offset);
assign main_write_aw_param_id = main_write_source_source_param_id;
always @(*) begin
    main_write_source_source_ready <= 1'd0;
    if (main_write_aw_ready) begin
        if (main_write_aw_last) begin
            main_write_source_source_ready <= 1'd1;
        end
    end
end
assign main_write_w_buffer_syncfifo_din = {main_write_w_buffer_fifo_in_last, main_write_w_buffer_fifo_in_first, main_write_w_buffer_fifo_in_param_user, main_write_w_buffer_fifo_in_param_dest, main_write_w_buffer_fifo_in_param_id, main_write_w_buffer_fifo_in_payload_strb, main_write_w_buffer_fifo_in_payload_data};
assign {main_write_w_buffer_fifo_out_last, main_write_w_buffer_fifo_out_first, main_write_w_buffer_fifo_out_param_user, main_write_w_buffer_fifo_out_param_dest, main_write_w_buffer_fifo_out_param_id, main_write_w_buffer_fifo_out_payload_strb, main_write_w_buffer_fifo_out_payload_data} = main_write_w_buffer_syncfifo_dout;
assign {main_write_w_buffer_fifo_out_last, main_write_w_buffer_fifo_out_first, main_write_w_buffer_fifo_out_param_user, main_write_w_buffer_fifo_out_param_dest, main_write_w_buffer_fifo_out_param_id, main_write_w_buffer_fifo_out_payload_strb, main_write_w_buffer_fifo_out_payload_data} = main_write_w_buffer_syncfifo_dout;
assign {main_write_w_buffer_fifo_out_last, main_write_w_buffer_fifo_out_first, main_write_w_buffer_fifo_out_param_user, main_write_w_buffer_fifo_out_param_dest, main_write_w_buffer_fifo_out_param_id, main_write_w_buffer_fifo_out_payload_strb, main_write_w_buffer_fifo_out_payload_data} = main_write_w_buffer_syncfifo_dout;
assign {main_write_w_buffer_fifo_out_last, main_write_w_buffer_fifo_out_first, main_write_w_buffer_fifo_out_param_user, main_write_w_buffer_fifo_out_param_dest, main_write_w_buffer_fifo_out_param_id, main_write_w_buffer_fifo_out_payload_strb, main_write_w_buffer_fifo_out_payload_data} = main_write_w_buffer_syncfifo_dout;
assign {main_write_w_buffer_fifo_out_last, main_write_w_buffer_fifo_out_first, main_write_w_buffer_fifo_out_param_user, main_write_w_buffer_fifo_out_param_dest, main_write_w_buffer_fifo_out_param_id, main_write_w_buffer_fifo_out_payload_strb, main_write_w_buffer_fifo_out_payload_data} = main_write_w_buffer_syncfifo_dout;
assign {main_write_w_buffer_fifo_out_last, main_write_w_buffer_fifo_out_first, main_write_w_buffer_fifo_out_param_user, main_write_w_buffer_fifo_out_param_dest, main_write_w_buffer_fifo_out_param_id, main_write_w_buffer_fifo_out_payload_strb, main_write_w_buffer_fifo_out_payload_data} = main_write_w_buffer_syncfifo_dout;
assign {main_write_w_buffer_fifo_out_last, main_write_w_buffer_fifo_out_first, main_write_w_buffer_fifo_out_param_user, main_write_w_buffer_fifo_out_param_dest, main_write_w_buffer_fifo_out_param_id, main_write_w_buffer_fifo_out_payload_strb, main_write_w_buffer_fifo_out_payload_data} = main_write_w_buffer_syncfifo_dout;
assign main_write_w_buffer_sink_ready = main_write_w_buffer_syncfifo_writable;
assign main_write_w_buffer_syncfifo_we = main_write_w_buffer_sink_valid;
assign main_write_w_buffer_fifo_in_first = main_write_w_buffer_sink_first;
assign main_write_w_buffer_fifo_in_last = main_write_w_buffer_sink_last;
assign main_write_w_buffer_fifo_in_payload_data = main_write_w_buffer_sink_payload_data;
assign main_write_w_buffer_fifo_in_payload_strb = main_write_w_buffer_sink_payload_strb;
assign main_write_w_buffer_fifo_in_param_id = main_write_w_buffer_sink_param_id;
assign main_write_w_buffer_fifo_in_param_dest = main_write_w_buffer_sink_param_dest;
assign main_write_w_buffer_fifo_in_param_user = main_write_w_buffer_sink_param_user;
assign main_write_w_buffer_source_valid = main_write_w_buffer_readable;
assign main_write_w_buffer_source_first = main_write_w_buffer_fifo_out_first;
assign main_write_w_buffer_source_last = main_write_w_buffer_fifo_out_last;
assign main_write_w_buffer_source_payload_data = main_write_w_buffer_fifo_out_payload_data;
assign main_write_w_buffer_source_payload_strb = main_write_w_buffer_fifo_out_payload_strb;
assign main_write_w_buffer_source_param_id = main_write_w_buffer_fifo_out_param_id;
assign main_write_w_buffer_source_param_dest = main_write_w_buffer_fifo_out_param_dest;
assign main_write_w_buffer_source_param_user = main_write_w_buffer_fifo_out_param_user;
assign main_write_w_buffer_re = main_write_w_buffer_source_ready;
assign main_write_w_buffer_syncfifo_re = (main_write_w_buffer_syncfifo_readable & ((~main_write_w_buffer_readable) | main_write_w_buffer_re));
assign main_write_w_buffer_level1 = (main_write_w_buffer_level0 + main_write_w_buffer_readable);
always @(*) begin
    main_write_w_buffer_wrport_adr <= 4'd0;
    if (main_write_w_buffer_replace) begin
        main_write_w_buffer_wrport_adr <= (main_write_w_buffer_produce - 1'd1);
    end else begin
        main_write_w_buffer_wrport_adr <= main_write_w_buffer_produce;
    end
end
assign main_write_w_buffer_wrport_dat_w = main_write_w_buffer_syncfifo_din;
assign main_write_w_buffer_wrport_we = (main_write_w_buffer_syncfifo_we & (main_write_w_buffer_syncfifo_writable | main_write_w_buffer_replace));
assign main_write_w_buffer_do_read = (main_write_w_buffer_syncfifo_readable & main_write_w_buffer_syncfifo_re);
assign main_write_w_buffer_rdport_adr = main_write_w_buffer_consume;
assign main_write_w_buffer_syncfifo_dout = main_write_w_buffer_rdport_dat_r;
assign main_write_w_buffer_rdport_re = main_write_w_buffer_do_read;
assign main_write_w_buffer_syncfifo_writable = (main_write_w_buffer_level0 != 5'd16);
assign main_write_w_buffer_syncfifo_readable = (main_write_w_buffer_level0 != 1'd0);
assign main_write_id_buffer_syncfifo_din = {main_write_id_buffer_fifo_in_last, main_write_id_buffer_fifo_in_first, main_write_id_buffer_fifo_in_payload_id};
assign {main_write_id_buffer_fifo_out_last, main_write_id_buffer_fifo_out_first, main_write_id_buffer_fifo_out_payload_id} = main_write_id_buffer_syncfifo_dout;
assign {main_write_id_buffer_fifo_out_last, main_write_id_buffer_fifo_out_first, main_write_id_buffer_fifo_out_payload_id} = main_write_id_buffer_syncfifo_dout;
assign {main_write_id_buffer_fifo_out_last, main_write_id_buffer_fifo_out_first, main_write_id_buffer_fifo_out_payload_id} = main_write_id_buffer_syncfifo_dout;
assign main_write_id_buffer_sink_ready = main_write_id_buffer_syncfifo_writable;
assign main_write_id_buffer_syncfifo_we = main_write_id_buffer_sink_valid;
assign main_write_id_buffer_fifo_in_first = main_write_id_buffer_sink_first;
assign main_write_id_buffer_fifo_in_last = main_write_id_buffer_sink_last;
assign main_write_id_buffer_fifo_in_payload_id = main_write_id_buffer_sink_payload_id;
assign main_write_id_buffer_source_valid = main_write_id_buffer_syncfifo_readable;
assign main_write_id_buffer_source_first = main_write_id_buffer_fifo_out_first;
assign main_write_id_buffer_source_last = main_write_id_buffer_fifo_out_last;
assign main_write_id_buffer_source_payload_id = main_write_id_buffer_fifo_out_payload_id;
assign main_write_id_buffer_syncfifo_re = main_write_id_buffer_source_ready;
always @(*) begin
    main_write_id_buffer_wrport_adr <= 4'd0;
    if (main_write_id_buffer_replace) begin
        main_write_id_buffer_wrport_adr <= (main_write_id_buffer_produce - 1'd1);
    end else begin
        main_write_id_buffer_wrport_adr <= main_write_id_buffer_produce;
    end
end
assign main_write_id_buffer_wrport_dat_w = main_write_id_buffer_syncfifo_din;
assign main_write_id_buffer_wrport_we = (main_write_id_buffer_syncfifo_we & (main_write_id_buffer_syncfifo_writable | main_write_id_buffer_replace));
assign main_write_id_buffer_do_read = (main_write_id_buffer_syncfifo_readable & main_write_id_buffer_syncfifo_re);
assign main_write_id_buffer_rdport_adr = main_write_id_buffer_consume;
assign main_write_id_buffer_syncfifo_dout = main_write_id_buffer_rdport_dat_r;
assign main_write_id_buffer_syncfifo_writable = (main_write_id_buffer_level != 5'd16);
assign main_write_id_buffer_syncfifo_readable = (main_write_id_buffer_level != 1'd0);
assign main_write_resp_buffer_syncfifo_din = {main_write_resp_buffer_fifo_in_last, main_write_resp_buffer_fifo_in_first, main_write_resp_buffer_fifo_in_payload_resp, main_write_resp_buffer_fifo_in_payload_id};
assign {main_write_resp_buffer_fifo_out_last, main_write_resp_buffer_fifo_out_first, main_write_resp_buffer_fifo_out_payload_resp, main_write_resp_buffer_fifo_out_payload_id} = main_write_resp_buffer_syncfifo_dout;
assign {main_write_resp_buffer_fifo_out_last, main_write_resp_buffer_fifo_out_first, main_write_resp_buffer_fifo_out_payload_resp, main_write_resp_buffer_fifo_out_payload_id} = main_write_resp_buffer_syncfifo_dout;
assign {main_write_resp_buffer_fifo_out_last, main_write_resp_buffer_fifo_out_first, main_write_resp_buffer_fifo_out_payload_resp, main_write_resp_buffer_fifo_out_payload_id} = main_write_resp_buffer_syncfifo_dout;
assign {main_write_resp_buffer_fifo_out_last, main_write_resp_buffer_fifo_out_first, main_write_resp_buffer_fifo_out_payload_resp, main_write_resp_buffer_fifo_out_payload_id} = main_write_resp_buffer_syncfifo_dout;
assign main_write_resp_buffer_sink_ready = main_write_resp_buffer_syncfifo_writable;
assign main_write_resp_buffer_syncfifo_we = main_write_resp_buffer_sink_valid;
assign main_write_resp_buffer_fifo_in_first = main_write_resp_buffer_sink_first;
assign main_write_resp_buffer_fifo_in_last = main_write_resp_buffer_sink_last;
assign main_write_resp_buffer_fifo_in_payload_id = main_write_resp_buffer_sink_payload_id;
assign main_write_resp_buffer_fifo_in_payload_resp = main_write_resp_buffer_sink_payload_resp;
assign main_write_resp_buffer_source_valid = main_write_resp_buffer_syncfifo_readable;
assign main_write_resp_buffer_source_first = main_write_resp_buffer_fifo_out_first;
assign main_write_resp_buffer_source_last = main_write_resp_buffer_fifo_out_last;
assign main_write_resp_buffer_source_payload_id = main_write_resp_buffer_fifo_out_payload_id;
assign main_write_resp_buffer_source_payload_resp = main_write_resp_buffer_fifo_out_payload_resp;
assign main_write_resp_buffer_syncfifo_re = main_write_resp_buffer_source_ready;
always @(*) begin
    main_write_resp_buffer_wrport_adr <= 4'd0;
    if (main_write_resp_buffer_replace) begin
        main_write_resp_buffer_wrport_adr <= (main_write_resp_buffer_produce - 1'd1);
    end else begin
        main_write_resp_buffer_wrport_adr <= main_write_resp_buffer_produce;
    end
end
assign main_write_resp_buffer_wrport_dat_w = main_write_resp_buffer_syncfifo_din;
assign main_write_resp_buffer_wrport_we = (main_write_resp_buffer_syncfifo_we & (main_write_resp_buffer_syncfifo_writable | main_write_resp_buffer_replace));
assign main_write_resp_buffer_do_read = (main_write_resp_buffer_syncfifo_readable & main_write_resp_buffer_syncfifo_re);
assign main_write_resp_buffer_rdport_adr = main_write_resp_buffer_consume;
assign main_write_resp_buffer_syncfifo_dout = main_write_resp_buffer_rdport_dat_r;
assign main_write_resp_buffer_syncfifo_writable = (main_write_resp_buffer_level != 5'd16);
assign main_write_resp_buffer_syncfifo_readable = (main_write_resp_buffer_level != 1'd0);
assign main_read_sink_sink_valid = main_ar_valid;
assign main_ar_ready = main_read_sink_sink_ready;
assign main_read_sink_sink_first = main_ar_first;
assign main_read_sink_sink_last = main_ar_last;
assign main_read_sink_sink_payload_addr = main_ar_payload_addr;
assign main_read_sink_sink_payload_burst = main_ar_payload_burst;
assign main_read_sink_sink_payload_len = main_ar_payload_len;
assign main_read_sink_sink_payload_size = main_ar_payload_size;
assign main_read_sink_sink_payload_lock = main_ar_payload_lock;
assign main_read_sink_sink_payload_prot = main_ar_payload_prot;
assign main_read_sink_sink_payload_cache = main_ar_payload_cache;
assign main_read_sink_sink_payload_qos = main_ar_payload_qos;
assign main_read_sink_sink_payload_region = main_ar_payload_region;
assign main_read_sink_sink_param_id = main_ar_param_id;
assign main_read_sink_sink_param_dest = main_ar_param_dest;
assign main_read_sink_sink_param_user = main_ar_param_user;
assign main_read_r_buffer_queue = ((main_user_port_new_port_cmd_valid & main_user_port_new_port_cmd_ready) & (~main_user_port_new_port_cmd_payload_we));
assign main_read_r_buffer_dequeue = (main_read_r_buffer_source_valid & main_read_r_buffer_source_ready);
assign main_read_can_read = (main_read_r_buffer_level2 != 5'd16);
assign main_read_id_buffer_sink_valid = (main_read_ar_valid & main_read_ar_ready);
assign main_read_id_buffer_sink_last = main_read_ar_last;
assign main_read_id_buffer_sink_payload_id = main_read_ar_param_id;
assign main_r_last = main_read_id_buffer_source_last;
assign main_r_param_id = main_read_id_buffer_source_payload_id;
assign main_read_id_buffer_source_ready = (main_r_valid & main_r_ready);
assign main_read_cmd_request = (main_read_ar_valid & main_read_can_read);
always @(*) begin
    main_read_ar_ready <= 1'd0;
    if ((main_read_cmd_request & main_read_cmd_grant)) begin
        if (main_user_port_new_port_cmd_ready) begin
            main_read_ar_ready <= 1'd1;
        end
    end
end
assign main_read_r_buffer_sink_valid = main_user_port_new_port_rdata_valid;
assign main_user_port_new_port_rdata_ready = main_read_r_buffer_sink_ready;
assign main_read_r_buffer_sink_first = main_user_port_new_port_rdata_first;
assign main_read_r_buffer_sink_last = main_user_port_new_port_rdata_last;
assign main_read_r_buffer_sink_payload_data = main_user_port_new_port_rdata_payload_data;
assign main_r_valid = main_read_r_buffer_source_valid;
assign main_read_r_buffer_source_ready = main_r_ready;
assign main_r_first = main_read_r_buffer_source_first;
always @(*) begin
    main_r_payload_resp <= 2'd0;
    main_r_payload_resp <= main_read_r_buffer_source_payload_resp;
    main_r_payload_resp <= 1'd0;
end
assign main_r_payload_data = main_read_r_buffer_source_payload_data;
assign main_r_param_dest = main_read_r_buffer_source_param_dest;
assign main_r_param_user = main_read_r_buffer_source_param_user;
assign main_read_pipe_valid_sink_ready = ((~main_read_pipe_valid_source_valid) | main_read_pipe_valid_source_ready);
assign main_read_pipe_valid_sink_valid = main_read_sink_sink_valid;
assign main_read_sink_sink_ready = main_read_pipe_valid_sink_ready;
assign main_read_pipe_valid_sink_first = main_read_sink_sink_first;
assign main_read_pipe_valid_sink_last = main_read_sink_sink_last;
assign main_read_pipe_valid_sink_payload_addr = main_read_sink_sink_payload_addr;
assign main_read_pipe_valid_sink_payload_burst = main_read_sink_sink_payload_burst;
assign main_read_pipe_valid_sink_payload_len = main_read_sink_sink_payload_len;
assign main_read_pipe_valid_sink_payload_size = main_read_sink_sink_payload_size;
assign main_read_pipe_valid_sink_payload_lock = main_read_sink_sink_payload_lock;
assign main_read_pipe_valid_sink_payload_prot = main_read_sink_sink_payload_prot;
assign main_read_pipe_valid_sink_payload_cache = main_read_sink_sink_payload_cache;
assign main_read_pipe_valid_sink_payload_qos = main_read_sink_sink_payload_qos;
assign main_read_pipe_valid_sink_payload_region = main_read_sink_sink_payload_region;
assign main_read_pipe_valid_sink_param_id = main_read_sink_sink_param_id;
assign main_read_pipe_valid_sink_param_dest = main_read_sink_sink_param_dest;
assign main_read_pipe_valid_sink_param_user = main_read_sink_sink_param_user;
assign main_read_source_source_valid = main_read_pipe_valid_source_valid;
assign main_read_pipe_valid_source_ready = main_read_source_source_ready;
assign main_read_source_source_first = main_read_pipe_valid_source_first;
assign main_read_source_source_last = main_read_pipe_valid_source_last;
assign main_read_source_source_payload_addr = main_read_pipe_valid_source_payload_addr;
assign main_read_source_source_payload_burst = main_read_pipe_valid_source_payload_burst;
assign main_read_source_source_payload_len = main_read_pipe_valid_source_payload_len;
assign main_read_source_source_payload_size = main_read_pipe_valid_source_payload_size;
assign main_read_source_source_payload_lock = main_read_pipe_valid_source_payload_lock;
assign main_read_source_source_payload_prot = main_read_pipe_valid_source_payload_prot;
assign main_read_source_source_payload_cache = main_read_pipe_valid_source_payload_cache;
assign main_read_source_source_payload_qos = main_read_pipe_valid_source_payload_qos;
assign main_read_source_source_payload_region = main_read_pipe_valid_source_payload_region;
assign main_read_source_source_param_id = main_read_pipe_valid_source_param_id;
assign main_read_source_source_param_dest = main_read_pipe_valid_source_param_dest;
assign main_read_source_source_param_user = main_read_pipe_valid_source_param_user;
assign main_read_beat_size = (1'd1 <<< main_read_source_source_payload_size);
assign main_read_beat_wrap = (main_read_source_source_payload_len <<< main_read_source_source_payload_size);
assign main_read_ar_valid = (main_read_source_source_valid | (~main_read_ar_first));
assign main_read_ar_first = (main_read_beat_count == 1'd0);
assign main_read_ar_last = (main_read_beat_count == main_read_source_source_payload_len);
assign main_read_ar_payload_addr = ($signed({1'd0, main_read_source_source_payload_addr}) + main_read_beat_offset);
assign main_read_ar_param_id = main_read_source_source_param_id;
always @(*) begin
    main_read_source_source_ready <= 1'd0;
    if (main_read_ar_ready) begin
        if (main_read_ar_last) begin
            main_read_source_source_ready <= 1'd1;
        end
    end
end
assign main_read_r_buffer_syncfifo_din = {main_read_r_buffer_fifo_in_last, main_read_r_buffer_fifo_in_first, main_read_r_buffer_fifo_in_param_user, main_read_r_buffer_fifo_in_param_dest, main_read_r_buffer_fifo_in_param_id, main_read_r_buffer_fifo_in_payload_data, main_read_r_buffer_fifo_in_payload_resp};
assign {main_read_r_buffer_fifo_out_last, main_read_r_buffer_fifo_out_first, main_read_r_buffer_fifo_out_param_user, main_read_r_buffer_fifo_out_param_dest, main_read_r_buffer_fifo_out_param_id, main_read_r_buffer_fifo_out_payload_data, main_read_r_buffer_fifo_out_payload_resp} = main_read_r_buffer_syncfifo_dout;
assign {main_read_r_buffer_fifo_out_last, main_read_r_buffer_fifo_out_first, main_read_r_buffer_fifo_out_param_user, main_read_r_buffer_fifo_out_param_dest, main_read_r_buffer_fifo_out_param_id, main_read_r_buffer_fifo_out_payload_data, main_read_r_buffer_fifo_out_payload_resp} = main_read_r_buffer_syncfifo_dout;
assign {main_read_r_buffer_fifo_out_last, main_read_r_buffer_fifo_out_first, main_read_r_buffer_fifo_out_param_user, main_read_r_buffer_fifo_out_param_dest, main_read_r_buffer_fifo_out_param_id, main_read_r_buffer_fifo_out_payload_data, main_read_r_buffer_fifo_out_payload_resp} = main_read_r_buffer_syncfifo_dout;
assign {main_read_r_buffer_fifo_out_last, main_read_r_buffer_fifo_out_first, main_read_r_buffer_fifo_out_param_user, main_read_r_buffer_fifo_out_param_dest, main_read_r_buffer_fifo_out_param_id, main_read_r_buffer_fifo_out_payload_data, main_read_r_buffer_fifo_out_payload_resp} = main_read_r_buffer_syncfifo_dout;
assign {main_read_r_buffer_fifo_out_last, main_read_r_buffer_fifo_out_first, main_read_r_buffer_fifo_out_param_user, main_read_r_buffer_fifo_out_param_dest, main_read_r_buffer_fifo_out_param_id, main_read_r_buffer_fifo_out_payload_data, main_read_r_buffer_fifo_out_payload_resp} = main_read_r_buffer_syncfifo_dout;
assign {main_read_r_buffer_fifo_out_last, main_read_r_buffer_fifo_out_first, main_read_r_buffer_fifo_out_param_user, main_read_r_buffer_fifo_out_param_dest, main_read_r_buffer_fifo_out_param_id, main_read_r_buffer_fifo_out_payload_data, main_read_r_buffer_fifo_out_payload_resp} = main_read_r_buffer_syncfifo_dout;
assign {main_read_r_buffer_fifo_out_last, main_read_r_buffer_fifo_out_first, main_read_r_buffer_fifo_out_param_user, main_read_r_buffer_fifo_out_param_dest, main_read_r_buffer_fifo_out_param_id, main_read_r_buffer_fifo_out_payload_data, main_read_r_buffer_fifo_out_payload_resp} = main_read_r_buffer_syncfifo_dout;
assign main_read_r_buffer_sink_ready = main_read_r_buffer_syncfifo_writable;
assign main_read_r_buffer_syncfifo_we = main_read_r_buffer_sink_valid;
assign main_read_r_buffer_fifo_in_first = main_read_r_buffer_sink_first;
assign main_read_r_buffer_fifo_in_last = main_read_r_buffer_sink_last;
assign main_read_r_buffer_fifo_in_payload_resp = main_read_r_buffer_sink_payload_resp;
assign main_read_r_buffer_fifo_in_payload_data = main_read_r_buffer_sink_payload_data;
assign main_read_r_buffer_fifo_in_param_id = main_read_r_buffer_sink_param_id;
assign main_read_r_buffer_fifo_in_param_dest = main_read_r_buffer_sink_param_dest;
assign main_read_r_buffer_fifo_in_param_user = main_read_r_buffer_sink_param_user;
assign main_read_r_buffer_source_valid = main_read_r_buffer_readable;
assign main_read_r_buffer_source_first = main_read_r_buffer_fifo_out_first;
assign main_read_r_buffer_source_last = main_read_r_buffer_fifo_out_last;
assign main_read_r_buffer_source_payload_resp = main_read_r_buffer_fifo_out_payload_resp;
assign main_read_r_buffer_source_payload_data = main_read_r_buffer_fifo_out_payload_data;
assign main_read_r_buffer_source_param_id = main_read_r_buffer_fifo_out_param_id;
assign main_read_r_buffer_source_param_dest = main_read_r_buffer_fifo_out_param_dest;
assign main_read_r_buffer_source_param_user = main_read_r_buffer_fifo_out_param_user;
assign main_read_r_buffer_re = main_read_r_buffer_source_ready;
assign main_read_r_buffer_syncfifo_re = (main_read_r_buffer_syncfifo_readable & ((~main_read_r_buffer_readable) | main_read_r_buffer_re));
assign main_read_r_buffer_level1 = (main_read_r_buffer_level0 + main_read_r_buffer_readable);
always @(*) begin
    main_read_r_buffer_wrport_adr <= 4'd0;
    if (main_read_r_buffer_replace) begin
        main_read_r_buffer_wrport_adr <= (main_read_r_buffer_produce - 1'd1);
    end else begin
        main_read_r_buffer_wrport_adr <= main_read_r_buffer_produce;
    end
end
assign main_read_r_buffer_wrport_dat_w = main_read_r_buffer_syncfifo_din;
assign main_read_r_buffer_wrport_we = (main_read_r_buffer_syncfifo_we & (main_read_r_buffer_syncfifo_writable | main_read_r_buffer_replace));
assign main_read_r_buffer_do_read = (main_read_r_buffer_syncfifo_readable & main_read_r_buffer_syncfifo_re);
assign main_read_r_buffer_rdport_adr = main_read_r_buffer_consume;
assign main_read_r_buffer_syncfifo_dout = main_read_r_buffer_rdport_dat_r;
assign main_read_r_buffer_rdport_re = main_read_r_buffer_do_read;
assign main_read_r_buffer_syncfifo_writable = (main_read_r_buffer_level0 != 5'd16);
assign main_read_r_buffer_syncfifo_readable = (main_read_r_buffer_level0 != 1'd0);
assign main_read_id_buffer_syncfifo_din = {main_read_id_buffer_fifo_in_last, main_read_id_buffer_fifo_in_first, main_read_id_buffer_fifo_in_payload_id};
assign {main_read_id_buffer_fifo_out_last, main_read_id_buffer_fifo_out_first, main_read_id_buffer_fifo_out_payload_id} = main_read_id_buffer_syncfifo_dout;
assign {main_read_id_buffer_fifo_out_last, main_read_id_buffer_fifo_out_first, main_read_id_buffer_fifo_out_payload_id} = main_read_id_buffer_syncfifo_dout;
assign {main_read_id_buffer_fifo_out_last, main_read_id_buffer_fifo_out_first, main_read_id_buffer_fifo_out_payload_id} = main_read_id_buffer_syncfifo_dout;
assign main_read_id_buffer_sink_ready = main_read_id_buffer_syncfifo_writable;
assign main_read_id_buffer_syncfifo_we = main_read_id_buffer_sink_valid;
assign main_read_id_buffer_fifo_in_first = main_read_id_buffer_sink_first;
assign main_read_id_buffer_fifo_in_last = main_read_id_buffer_sink_last;
assign main_read_id_buffer_fifo_in_payload_id = main_read_id_buffer_sink_payload_id;
assign main_read_id_buffer_source_valid = main_read_id_buffer_syncfifo_readable;
assign main_read_id_buffer_source_first = main_read_id_buffer_fifo_out_first;
assign main_read_id_buffer_source_last = main_read_id_buffer_fifo_out_last;
assign main_read_id_buffer_source_payload_id = main_read_id_buffer_fifo_out_payload_id;
assign main_read_id_buffer_syncfifo_re = main_read_id_buffer_source_ready;
always @(*) begin
    main_read_id_buffer_wrport_adr <= 4'd0;
    if (main_read_id_buffer_replace) begin
        main_read_id_buffer_wrport_adr <= (main_read_id_buffer_produce - 1'd1);
    end else begin
        main_read_id_buffer_wrport_adr <= main_read_id_buffer_produce;
    end
end
assign main_read_id_buffer_wrport_dat_w = main_read_id_buffer_syncfifo_din;
assign main_read_id_buffer_wrport_we = (main_read_id_buffer_syncfifo_we & (main_read_id_buffer_syncfifo_writable | main_read_id_buffer_replace));
assign main_read_id_buffer_do_read = (main_read_id_buffer_syncfifo_readable & main_read_id_buffer_syncfifo_re);
assign main_read_id_buffer_rdport_adr = main_read_id_buffer_consume;
assign main_read_id_buffer_syncfifo_dout = main_read_id_buffer_rdport_dat_r;
assign main_read_id_buffer_syncfifo_writable = (main_read_id_buffer_level != 5'd16);
assign main_read_id_buffer_syncfifo_readable = (main_read_id_buffer_level != 1'd0);
always @(*) begin
    builder_litedramcore_wishbone2csr_next_state <= 2'd0;
    builder_litedramcore_wishbone2csr_next_state <= builder_litedramcore_wishbone2csr_state;
    case (builder_litedramcore_wishbone2csr_state)
        1'd1: begin
            builder_litedramcore_wishbone2csr_next_state <= 2'd2;
        end
        2'd2: begin
            builder_litedramcore_wishbone2csr_next_state <= 1'd0;
        end
        default: begin
            if ((builder_litedramcore_wishbone_cyc & builder_litedramcore_wishbone_stb)) begin
                builder_litedramcore_wishbone2csr_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    builder_litedramcore_adr_wishbone2csr_next_value_ce1 <= 1'd0;
    case (builder_litedramcore_wishbone2csr_state)
        1'd1: begin
            builder_litedramcore_adr_wishbone2csr_next_value_ce1 <= 1'd1;
        end
        2'd2: begin
        end
        default: begin
            if ((builder_litedramcore_wishbone_cyc & builder_litedramcore_wishbone_stb)) begin
                builder_litedramcore_adr_wishbone2csr_next_value_ce1 <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    builder_litedramcore_we_wishbone2csr_next_value2 <= 1'd0;
    case (builder_litedramcore_wishbone2csr_state)
        1'd1: begin
            builder_litedramcore_we_wishbone2csr_next_value2 <= 1'd0;
        end
        2'd2: begin
        end
        default: begin
            if ((builder_litedramcore_wishbone_cyc & builder_litedramcore_wishbone_stb)) begin
                builder_litedramcore_we_wishbone2csr_next_value2 <= (builder_litedramcore_wishbone_we & (builder_litedramcore_wishbone_sel != 1'd0));
            end
        end
    endcase
end
always @(*) begin
    builder_litedramcore_we_wishbone2csr_next_value_ce2 <= 1'd0;
    case (builder_litedramcore_wishbone2csr_state)
        1'd1: begin
            builder_litedramcore_we_wishbone2csr_next_value_ce2 <= 1'd1;
        end
        2'd2: begin
        end
        default: begin
            if ((builder_litedramcore_wishbone_cyc & builder_litedramcore_wishbone_stb)) begin
                builder_litedramcore_we_wishbone2csr_next_value_ce2 <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    builder_litedramcore_wishbone_dat_r <= 32'd0;
    case (builder_litedramcore_wishbone2csr_state)
        1'd1: begin
        end
        2'd2: begin
            builder_litedramcore_wishbone_dat_r <= builder_litedramcore_dat_r;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    builder_litedramcore_wishbone_ack <= 1'd0;
    case (builder_litedramcore_wishbone2csr_state)
        1'd1: begin
        end
        2'd2: begin
            builder_litedramcore_wishbone_ack <= 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    builder_litedramcore_dat_w_wishbone2csr_next_value0 <= 32'd0;
    case (builder_litedramcore_wishbone2csr_state)
        1'd1: begin
        end
        2'd2: begin
        end
        default: begin
            builder_litedramcore_dat_w_wishbone2csr_next_value0 <= builder_litedramcore_wishbone_dat_w;
        end
    endcase
end
always @(*) begin
    builder_litedramcore_dat_w_wishbone2csr_next_value_ce0 <= 1'd0;
    case (builder_litedramcore_wishbone2csr_state)
        1'd1: begin
        end
        2'd2: begin
        end
        default: begin
            builder_litedramcore_dat_w_wishbone2csr_next_value_ce0 <= 1'd1;
        end
    endcase
end
always @(*) begin
    builder_litedramcore_adr_wishbone2csr_next_value1 <= 14'd0;
    case (builder_litedramcore_wishbone2csr_state)
        1'd1: begin
            builder_litedramcore_adr_wishbone2csr_next_value1 <= 1'd0;
        end
        2'd2: begin
        end
        default: begin
            if ((builder_litedramcore_wishbone_cyc & builder_litedramcore_wishbone_stb)) begin
                builder_litedramcore_adr_wishbone2csr_next_value1 <= builder_litedramcore_wishbone_adr;
            end
        end
    endcase
end
assign builder_csrbank0_sel = (builder_interface0_bank_bus_adr[13:9] == 1'd0);
assign builder_csrbank0_reset0_r = builder_interface0_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csrbank0_reset0_we <= 1'd0;
    if ((builder_csrbank0_sel & (builder_interface0_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csrbank0_reset0_we <= (~builder_interface0_bank_bus_we);
    end
end
always @(*) begin
    builder_csrbank0_reset0_re <= 1'd0;
    if ((builder_csrbank0_sel & (builder_interface0_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csrbank0_reset0_re <= builder_interface0_bank_bus_we;
    end
end
assign builder_csrbank0_scratch0_r = builder_interface0_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csrbank0_scratch0_re <= 1'd0;
    if ((builder_csrbank0_sel & (builder_interface0_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csrbank0_scratch0_re <= builder_interface0_bank_bus_we;
    end
end
always @(*) begin
    builder_csrbank0_scratch0_we <= 1'd0;
    if ((builder_csrbank0_sel & (builder_interface0_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csrbank0_scratch0_we <= (~builder_interface0_bank_bus_we);
    end
end
assign builder_csrbank0_bus_errors_r = builder_interface0_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csrbank0_bus_errors_re <= 1'd0;
    if ((builder_csrbank0_sel & (builder_interface0_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csrbank0_bus_errors_re <= builder_interface0_bank_bus_we;
    end
end
always @(*) begin
    builder_csrbank0_bus_errors_we <= 1'd0;
    if ((builder_csrbank0_sel & (builder_interface0_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csrbank0_bus_errors_we <= (~builder_interface0_bank_bus_we);
    end
end
always @(*) begin
    main_litedramcore_soc_rst <= 1'd0;
    if (main_litedramcore_reset_re) begin
        main_litedramcore_soc_rst <= main_litedramcore_reset_storage[0];
    end
end
assign main_litedramcore_cpu_rst = main_litedramcore_reset_storage[1];
assign builder_csrbank0_reset0_w = main_litedramcore_reset_storage[1:0];
assign builder_csrbank0_scratch0_w = main_litedramcore_scratch_storage[31:0];
assign builder_csrbank0_bus_errors_w = main_litedramcore_bus_errors_status[31:0];
assign main_litedramcore_bus_errors_we = builder_csrbank0_bus_errors_we;
assign builder_csrbank1_sel = (builder_interface1_bank_bus_adr[13:9] == 1'd1);
assign builder_csrbank1_init_done0_r = builder_interface1_bank_bus_dat_w[0];
always @(*) begin
    builder_csrbank1_init_done0_re <= 1'd0;
    if ((builder_csrbank1_sel & (builder_interface1_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csrbank1_init_done0_re <= builder_interface1_bank_bus_we;
    end
end
always @(*) begin
    builder_csrbank1_init_done0_we <= 1'd0;
    if ((builder_csrbank1_sel & (builder_interface1_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csrbank1_init_done0_we <= (~builder_interface1_bank_bus_we);
    end
end
assign builder_csrbank1_init_error0_r = builder_interface1_bank_bus_dat_w[0];
always @(*) begin
    builder_csrbank1_init_error0_we <= 1'd0;
    if ((builder_csrbank1_sel & (builder_interface1_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csrbank1_init_error0_we <= (~builder_interface1_bank_bus_we);
    end
end
always @(*) begin
    builder_csrbank1_init_error0_re <= 1'd0;
    if ((builder_csrbank1_sel & (builder_interface1_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csrbank1_init_error0_re <= builder_interface1_bank_bus_we;
    end
end
assign builder_csrbank1_init_done0_w = main_init_done_storage;
assign builder_csrbank1_init_error0_w = main_init_error_storage;
assign builder_csrbank2_sel = (builder_interface2_bank_bus_adr[13:9] == 2'd2);
assign builder_csrbank2_rst0_r = builder_interface2_bank_bus_dat_w[0];
always @(*) begin
    builder_csrbank2_rst0_we <= 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csrbank2_rst0_we <= (~builder_interface2_bank_bus_we);
    end
end
always @(*) begin
    builder_csrbank2_rst0_re <= 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csrbank2_rst0_re <= builder_interface2_bank_bus_we;
    end
end
assign builder_csrbank2_dly_sel0_r = builder_interface2_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csrbank2_dly_sel0_we <= 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csrbank2_dly_sel0_we <= (~builder_interface2_bank_bus_we);
    end
end
always @(*) begin
    builder_csrbank2_dly_sel0_re <= 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csrbank2_dly_sel0_re <= builder_interface2_bank_bus_we;
    end
end
assign builder_csrbank2_half_sys8x_taps0_r = builder_interface2_bank_bus_dat_w[4:0];
always @(*) begin
    builder_csrbank2_half_sys8x_taps0_re <= 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csrbank2_half_sys8x_taps0_re <= builder_interface2_bank_bus_we;
    end
end
always @(*) begin
    builder_csrbank2_half_sys8x_taps0_we <= 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csrbank2_half_sys8x_taps0_we <= (~builder_interface2_bank_bus_we);
    end
end
assign builder_csrbank2_wlevel_en0_r = builder_interface2_bank_bus_dat_w[0];
always @(*) begin
    builder_csrbank2_wlevel_en0_we <= 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csrbank2_wlevel_en0_we <= (~builder_interface2_bank_bus_we);
    end
end
always @(*) begin
    builder_csrbank2_wlevel_en0_re <= 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csrbank2_wlevel_en0_re <= builder_interface2_bank_bus_we;
    end
end
assign main_a7ddrphy_wlevel_strobe_r = builder_interface2_bank_bus_dat_w[0];
always @(*) begin
    main_a7ddrphy_wlevel_strobe_re <= 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 3'd4))) begin
        main_a7ddrphy_wlevel_strobe_re <= builder_interface2_bank_bus_we;
    end
end
always @(*) begin
    main_a7ddrphy_wlevel_strobe_we <= 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 3'd4))) begin
        main_a7ddrphy_wlevel_strobe_we <= (~builder_interface2_bank_bus_we);
    end
end
assign main_a7ddrphy_rdly_dq_rst_r = builder_interface2_bank_bus_dat_w[0];
always @(*) begin
    main_a7ddrphy_rdly_dq_rst_re <= 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 3'd5))) begin
        main_a7ddrphy_rdly_dq_rst_re <= builder_interface2_bank_bus_we;
    end
end
always @(*) begin
    main_a7ddrphy_rdly_dq_rst_we <= 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 3'd5))) begin
        main_a7ddrphy_rdly_dq_rst_we <= (~builder_interface2_bank_bus_we);
    end
end
assign main_a7ddrphy_rdly_dq_inc_r = builder_interface2_bank_bus_dat_w[0];
always @(*) begin
    main_a7ddrphy_rdly_dq_inc_re <= 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 3'd6))) begin
        main_a7ddrphy_rdly_dq_inc_re <= builder_interface2_bank_bus_we;
    end
end
always @(*) begin
    main_a7ddrphy_rdly_dq_inc_we <= 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 3'd6))) begin
        main_a7ddrphy_rdly_dq_inc_we <= (~builder_interface2_bank_bus_we);
    end
end
assign main_a7ddrphy_rdly_dq_bitslip_rst_r = builder_interface2_bank_bus_dat_w[0];
always @(*) begin
    main_a7ddrphy_rdly_dq_bitslip_rst_we <= 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 3'd7))) begin
        main_a7ddrphy_rdly_dq_bitslip_rst_we <= (~builder_interface2_bank_bus_we);
    end
end
always @(*) begin
    main_a7ddrphy_rdly_dq_bitslip_rst_re <= 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 3'd7))) begin
        main_a7ddrphy_rdly_dq_bitslip_rst_re <= builder_interface2_bank_bus_we;
    end
end
assign main_a7ddrphy_rdly_dq_bitslip_r = builder_interface2_bank_bus_dat_w[0];
always @(*) begin
    main_a7ddrphy_rdly_dq_bitslip_we <= 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 4'd8))) begin
        main_a7ddrphy_rdly_dq_bitslip_we <= (~builder_interface2_bank_bus_we);
    end
end
always @(*) begin
    main_a7ddrphy_rdly_dq_bitslip_re <= 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 4'd8))) begin
        main_a7ddrphy_rdly_dq_bitslip_re <= builder_interface2_bank_bus_we;
    end
end
assign main_a7ddrphy_wdly_dq_bitslip_rst_r = builder_interface2_bank_bus_dat_w[0];
always @(*) begin
    main_a7ddrphy_wdly_dq_bitslip_rst_we <= 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 4'd9))) begin
        main_a7ddrphy_wdly_dq_bitslip_rst_we <= (~builder_interface2_bank_bus_we);
    end
end
always @(*) begin
    main_a7ddrphy_wdly_dq_bitslip_rst_re <= 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 4'd9))) begin
        main_a7ddrphy_wdly_dq_bitslip_rst_re <= builder_interface2_bank_bus_we;
    end
end
assign main_a7ddrphy_wdly_dq_bitslip_r = builder_interface2_bank_bus_dat_w[0];
always @(*) begin
    main_a7ddrphy_wdly_dq_bitslip_we <= 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 4'd10))) begin
        main_a7ddrphy_wdly_dq_bitslip_we <= (~builder_interface2_bank_bus_we);
    end
end
always @(*) begin
    main_a7ddrphy_wdly_dq_bitslip_re <= 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 4'd10))) begin
        main_a7ddrphy_wdly_dq_bitslip_re <= builder_interface2_bank_bus_we;
    end
end
assign builder_csrbank2_rdphase0_r = builder_interface2_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csrbank2_rdphase0_re <= 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 4'd11))) begin
        builder_csrbank2_rdphase0_re <= builder_interface2_bank_bus_we;
    end
end
always @(*) begin
    builder_csrbank2_rdphase0_we <= 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 4'd11))) begin
        builder_csrbank2_rdphase0_we <= (~builder_interface2_bank_bus_we);
    end
end
assign builder_csrbank2_wrphase0_r = builder_interface2_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csrbank2_wrphase0_re <= 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 4'd12))) begin
        builder_csrbank2_wrphase0_re <= builder_interface2_bank_bus_we;
    end
end
always @(*) begin
    builder_csrbank2_wrphase0_we <= 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 4'd12))) begin
        builder_csrbank2_wrphase0_we <= (~builder_interface2_bank_bus_we);
    end
end
assign builder_csrbank2_rst0_w = main_a7ddrphy_rst_storage;
assign builder_csrbank2_dly_sel0_w = main_a7ddrphy_dly_sel_storage[1:0];
assign builder_csrbank2_half_sys8x_taps0_w = main_a7ddrphy_half_sys8x_taps_storage[4:0];
assign builder_csrbank2_wlevel_en0_w = main_a7ddrphy_wlevel_en_storage;
assign builder_csrbank2_rdphase0_w = main_a7ddrphy_rdphase_storage[1:0];
assign builder_csrbank2_wrphase0_w = main_a7ddrphy_wrphase_storage[1:0];
assign builder_csrbank3_sel = (builder_interface3_bank_bus_adr[13:9] == 2'd3);
assign builder_csrbank3_dfii_control0_r = builder_interface3_bank_bus_dat_w[3:0];
always @(*) begin
    builder_csrbank3_dfii_control0_re <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csrbank3_dfii_control0_re <= builder_interface3_bank_bus_we;
    end
end
always @(*) begin
    builder_csrbank3_dfii_control0_we <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csrbank3_dfii_control0_we <= (~builder_interface3_bank_bus_we);
    end
end
assign builder_csrbank3_dfii_pi0_command0_r = builder_interface3_bank_bus_dat_w[7:0];
always @(*) begin
    builder_csrbank3_dfii_pi0_command0_re <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csrbank3_dfii_pi0_command0_re <= builder_interface3_bank_bus_we;
    end
end
always @(*) begin
    builder_csrbank3_dfii_pi0_command0_we <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csrbank3_dfii_pi0_command0_we <= (~builder_interface3_bank_bus_we);
    end
end
assign main_litedramcore_sdram_phaseinjector0_command_issue_r = builder_interface3_bank_bus_dat_w[0];
always @(*) begin
    main_litedramcore_sdram_phaseinjector0_command_issue_re <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 2'd2))) begin
        main_litedramcore_sdram_phaseinjector0_command_issue_re <= builder_interface3_bank_bus_we;
    end
end
always @(*) begin
    main_litedramcore_sdram_phaseinjector0_command_issue_we <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 2'd2))) begin
        main_litedramcore_sdram_phaseinjector0_command_issue_we <= (~builder_interface3_bank_bus_we);
    end
end
assign builder_csrbank3_dfii_pi0_address0_r = builder_interface3_bank_bus_dat_w[14:0];
always @(*) begin
    builder_csrbank3_dfii_pi0_address0_we <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csrbank3_dfii_pi0_address0_we <= (~builder_interface3_bank_bus_we);
    end
end
always @(*) begin
    builder_csrbank3_dfii_pi0_address0_re <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csrbank3_dfii_pi0_address0_re <= builder_interface3_bank_bus_we;
    end
end
assign builder_csrbank3_dfii_pi0_baddress0_r = builder_interface3_bank_bus_dat_w[2:0];
always @(*) begin
    builder_csrbank3_dfii_pi0_baddress0_re <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csrbank3_dfii_pi0_baddress0_re <= builder_interface3_bank_bus_we;
    end
end
always @(*) begin
    builder_csrbank3_dfii_pi0_baddress0_we <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csrbank3_dfii_pi0_baddress0_we <= (~builder_interface3_bank_bus_we);
    end
end
assign builder_csrbank3_dfii_pi0_wrdata0_r = builder_interface3_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csrbank3_dfii_pi0_wrdata0_we <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csrbank3_dfii_pi0_wrdata0_we <= (~builder_interface3_bank_bus_we);
    end
end
always @(*) begin
    builder_csrbank3_dfii_pi0_wrdata0_re <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csrbank3_dfii_pi0_wrdata0_re <= builder_interface3_bank_bus_we;
    end
end
assign builder_csrbank3_dfii_pi0_rddata_r = builder_interface3_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csrbank3_dfii_pi0_rddata_we <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 3'd6))) begin
        builder_csrbank3_dfii_pi0_rddata_we <= (~builder_interface3_bank_bus_we);
    end
end
always @(*) begin
    builder_csrbank3_dfii_pi0_rddata_re <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 3'd6))) begin
        builder_csrbank3_dfii_pi0_rddata_re <= builder_interface3_bank_bus_we;
    end
end
assign builder_csrbank3_dfii_pi1_command0_r = builder_interface3_bank_bus_dat_w[7:0];
always @(*) begin
    builder_csrbank3_dfii_pi1_command0_re <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 3'd7))) begin
        builder_csrbank3_dfii_pi1_command0_re <= builder_interface3_bank_bus_we;
    end
end
always @(*) begin
    builder_csrbank3_dfii_pi1_command0_we <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 3'd7))) begin
        builder_csrbank3_dfii_pi1_command0_we <= (~builder_interface3_bank_bus_we);
    end
end
assign main_litedramcore_sdram_phaseinjector1_command_issue_r = builder_interface3_bank_bus_dat_w[0];
always @(*) begin
    main_litedramcore_sdram_phaseinjector1_command_issue_we <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 4'd8))) begin
        main_litedramcore_sdram_phaseinjector1_command_issue_we <= (~builder_interface3_bank_bus_we);
    end
end
always @(*) begin
    main_litedramcore_sdram_phaseinjector1_command_issue_re <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 4'd8))) begin
        main_litedramcore_sdram_phaseinjector1_command_issue_re <= builder_interface3_bank_bus_we;
    end
end
assign builder_csrbank3_dfii_pi1_address0_r = builder_interface3_bank_bus_dat_w[14:0];
always @(*) begin
    builder_csrbank3_dfii_pi1_address0_we <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 4'd9))) begin
        builder_csrbank3_dfii_pi1_address0_we <= (~builder_interface3_bank_bus_we);
    end
end
always @(*) begin
    builder_csrbank3_dfii_pi1_address0_re <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 4'd9))) begin
        builder_csrbank3_dfii_pi1_address0_re <= builder_interface3_bank_bus_we;
    end
end
assign builder_csrbank3_dfii_pi1_baddress0_r = builder_interface3_bank_bus_dat_w[2:0];
always @(*) begin
    builder_csrbank3_dfii_pi1_baddress0_we <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 4'd10))) begin
        builder_csrbank3_dfii_pi1_baddress0_we <= (~builder_interface3_bank_bus_we);
    end
end
always @(*) begin
    builder_csrbank3_dfii_pi1_baddress0_re <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 4'd10))) begin
        builder_csrbank3_dfii_pi1_baddress0_re <= builder_interface3_bank_bus_we;
    end
end
assign builder_csrbank3_dfii_pi1_wrdata0_r = builder_interface3_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csrbank3_dfii_pi1_wrdata0_re <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 4'd11))) begin
        builder_csrbank3_dfii_pi1_wrdata0_re <= builder_interface3_bank_bus_we;
    end
end
always @(*) begin
    builder_csrbank3_dfii_pi1_wrdata0_we <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 4'd11))) begin
        builder_csrbank3_dfii_pi1_wrdata0_we <= (~builder_interface3_bank_bus_we);
    end
end
assign builder_csrbank3_dfii_pi1_rddata_r = builder_interface3_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csrbank3_dfii_pi1_rddata_we <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 4'd12))) begin
        builder_csrbank3_dfii_pi1_rddata_we <= (~builder_interface3_bank_bus_we);
    end
end
always @(*) begin
    builder_csrbank3_dfii_pi1_rddata_re <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 4'd12))) begin
        builder_csrbank3_dfii_pi1_rddata_re <= builder_interface3_bank_bus_we;
    end
end
assign builder_csrbank3_dfii_pi2_command0_r = builder_interface3_bank_bus_dat_w[7:0];
always @(*) begin
    builder_csrbank3_dfii_pi2_command0_we <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 4'd13))) begin
        builder_csrbank3_dfii_pi2_command0_we <= (~builder_interface3_bank_bus_we);
    end
end
always @(*) begin
    builder_csrbank3_dfii_pi2_command0_re <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 4'd13))) begin
        builder_csrbank3_dfii_pi2_command0_re <= builder_interface3_bank_bus_we;
    end
end
assign main_litedramcore_sdram_phaseinjector2_command_issue_r = builder_interface3_bank_bus_dat_w[0];
always @(*) begin
    main_litedramcore_sdram_phaseinjector2_command_issue_re <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 4'd14))) begin
        main_litedramcore_sdram_phaseinjector2_command_issue_re <= builder_interface3_bank_bus_we;
    end
end
always @(*) begin
    main_litedramcore_sdram_phaseinjector2_command_issue_we <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 4'd14))) begin
        main_litedramcore_sdram_phaseinjector2_command_issue_we <= (~builder_interface3_bank_bus_we);
    end
end
assign builder_csrbank3_dfii_pi2_address0_r = builder_interface3_bank_bus_dat_w[14:0];
always @(*) begin
    builder_csrbank3_dfii_pi2_address0_re <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 4'd15))) begin
        builder_csrbank3_dfii_pi2_address0_re <= builder_interface3_bank_bus_we;
    end
end
always @(*) begin
    builder_csrbank3_dfii_pi2_address0_we <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 4'd15))) begin
        builder_csrbank3_dfii_pi2_address0_we <= (~builder_interface3_bank_bus_we);
    end
end
assign builder_csrbank3_dfii_pi2_baddress0_r = builder_interface3_bank_bus_dat_w[2:0];
always @(*) begin
    builder_csrbank3_dfii_pi2_baddress0_we <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 5'd16))) begin
        builder_csrbank3_dfii_pi2_baddress0_we <= (~builder_interface3_bank_bus_we);
    end
end
always @(*) begin
    builder_csrbank3_dfii_pi2_baddress0_re <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 5'd16))) begin
        builder_csrbank3_dfii_pi2_baddress0_re <= builder_interface3_bank_bus_we;
    end
end
assign builder_csrbank3_dfii_pi2_wrdata0_r = builder_interface3_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csrbank3_dfii_pi2_wrdata0_re <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 5'd17))) begin
        builder_csrbank3_dfii_pi2_wrdata0_re <= builder_interface3_bank_bus_we;
    end
end
always @(*) begin
    builder_csrbank3_dfii_pi2_wrdata0_we <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 5'd17))) begin
        builder_csrbank3_dfii_pi2_wrdata0_we <= (~builder_interface3_bank_bus_we);
    end
end
assign builder_csrbank3_dfii_pi2_rddata_r = builder_interface3_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csrbank3_dfii_pi2_rddata_re <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 5'd18))) begin
        builder_csrbank3_dfii_pi2_rddata_re <= builder_interface3_bank_bus_we;
    end
end
always @(*) begin
    builder_csrbank3_dfii_pi2_rddata_we <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 5'd18))) begin
        builder_csrbank3_dfii_pi2_rddata_we <= (~builder_interface3_bank_bus_we);
    end
end
assign builder_csrbank3_dfii_pi3_command0_r = builder_interface3_bank_bus_dat_w[7:0];
always @(*) begin
    builder_csrbank3_dfii_pi3_command0_we <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 5'd19))) begin
        builder_csrbank3_dfii_pi3_command0_we <= (~builder_interface3_bank_bus_we);
    end
end
always @(*) begin
    builder_csrbank3_dfii_pi3_command0_re <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 5'd19))) begin
        builder_csrbank3_dfii_pi3_command0_re <= builder_interface3_bank_bus_we;
    end
end
assign main_litedramcore_sdram_phaseinjector3_command_issue_r = builder_interface3_bank_bus_dat_w[0];
always @(*) begin
    main_litedramcore_sdram_phaseinjector3_command_issue_re <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 5'd20))) begin
        main_litedramcore_sdram_phaseinjector3_command_issue_re <= builder_interface3_bank_bus_we;
    end
end
always @(*) begin
    main_litedramcore_sdram_phaseinjector3_command_issue_we <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 5'd20))) begin
        main_litedramcore_sdram_phaseinjector3_command_issue_we <= (~builder_interface3_bank_bus_we);
    end
end
assign builder_csrbank3_dfii_pi3_address0_r = builder_interface3_bank_bus_dat_w[14:0];
always @(*) begin
    builder_csrbank3_dfii_pi3_address0_re <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 5'd21))) begin
        builder_csrbank3_dfii_pi3_address0_re <= builder_interface3_bank_bus_we;
    end
end
always @(*) begin
    builder_csrbank3_dfii_pi3_address0_we <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 5'd21))) begin
        builder_csrbank3_dfii_pi3_address0_we <= (~builder_interface3_bank_bus_we);
    end
end
assign builder_csrbank3_dfii_pi3_baddress0_r = builder_interface3_bank_bus_dat_w[2:0];
always @(*) begin
    builder_csrbank3_dfii_pi3_baddress0_re <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 5'd22))) begin
        builder_csrbank3_dfii_pi3_baddress0_re <= builder_interface3_bank_bus_we;
    end
end
always @(*) begin
    builder_csrbank3_dfii_pi3_baddress0_we <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 5'd22))) begin
        builder_csrbank3_dfii_pi3_baddress0_we <= (~builder_interface3_bank_bus_we);
    end
end
assign builder_csrbank3_dfii_pi3_wrdata0_r = builder_interface3_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csrbank3_dfii_pi3_wrdata0_we <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 5'd23))) begin
        builder_csrbank3_dfii_pi3_wrdata0_we <= (~builder_interface3_bank_bus_we);
    end
end
always @(*) begin
    builder_csrbank3_dfii_pi3_wrdata0_re <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 5'd23))) begin
        builder_csrbank3_dfii_pi3_wrdata0_re <= builder_interface3_bank_bus_we;
    end
end
assign builder_csrbank3_dfii_pi3_rddata_r = builder_interface3_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csrbank3_dfii_pi3_rddata_re <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 5'd24))) begin
        builder_csrbank3_dfii_pi3_rddata_re <= builder_interface3_bank_bus_we;
    end
end
always @(*) begin
    builder_csrbank3_dfii_pi3_rddata_we <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 5'd24))) begin
        builder_csrbank3_dfii_pi3_rddata_we <= (~builder_interface3_bank_bus_we);
    end
end
assign main_litedramcore_sdram_sel = main_litedramcore_sdram_storage[0];
assign main_litedramcore_sdram_cke = main_litedramcore_sdram_storage[1];
assign main_litedramcore_sdram_odt = main_litedramcore_sdram_storage[2];
assign main_litedramcore_sdram_reset_n = main_litedramcore_sdram_storage[3];
assign builder_csrbank3_dfii_control0_w = main_litedramcore_sdram_storage[3:0];
assign main_litedramcore_sdram_phaseinjector0_csrfield_cs = main_litedramcore_sdram_phaseinjector0_command_storage[0];
assign main_litedramcore_sdram_phaseinjector0_csrfield_we = main_litedramcore_sdram_phaseinjector0_command_storage[1];
assign main_litedramcore_sdram_phaseinjector0_csrfield_cas = main_litedramcore_sdram_phaseinjector0_command_storage[2];
assign main_litedramcore_sdram_phaseinjector0_csrfield_ras = main_litedramcore_sdram_phaseinjector0_command_storage[3];
assign main_litedramcore_sdram_phaseinjector0_csrfield_wren = main_litedramcore_sdram_phaseinjector0_command_storage[4];
assign main_litedramcore_sdram_phaseinjector0_csrfield_rden = main_litedramcore_sdram_phaseinjector0_command_storage[5];
assign main_litedramcore_sdram_phaseinjector0_csrfield_cs_top = main_litedramcore_sdram_phaseinjector0_command_storage[6];
assign main_litedramcore_sdram_phaseinjector0_csrfield_cs_bottom = main_litedramcore_sdram_phaseinjector0_command_storage[7];
assign builder_csrbank3_dfii_pi0_command0_w = main_litedramcore_sdram_phaseinjector0_command_storage[7:0];
assign builder_csrbank3_dfii_pi0_address0_w = main_litedramcore_sdram_phaseinjector0_address_storage[14:0];
assign builder_csrbank3_dfii_pi0_baddress0_w = main_litedramcore_sdram_phaseinjector0_baddress_storage[2:0];
assign builder_csrbank3_dfii_pi0_wrdata0_w = main_litedramcore_sdram_phaseinjector0_wrdata_storage[31:0];
assign builder_csrbank3_dfii_pi0_rddata_w = main_litedramcore_sdram_phaseinjector0_rddata_status[31:0];
assign main_litedramcore_sdram_phaseinjector0_rddata_we = builder_csrbank3_dfii_pi0_rddata_we;
assign main_litedramcore_sdram_phaseinjector1_csrfield_cs = main_litedramcore_sdram_phaseinjector1_command_storage[0];
assign main_litedramcore_sdram_phaseinjector1_csrfield_we = main_litedramcore_sdram_phaseinjector1_command_storage[1];
assign main_litedramcore_sdram_phaseinjector1_csrfield_cas = main_litedramcore_sdram_phaseinjector1_command_storage[2];
assign main_litedramcore_sdram_phaseinjector1_csrfield_ras = main_litedramcore_sdram_phaseinjector1_command_storage[3];
assign main_litedramcore_sdram_phaseinjector1_csrfield_wren = main_litedramcore_sdram_phaseinjector1_command_storage[4];
assign main_litedramcore_sdram_phaseinjector1_csrfield_rden = main_litedramcore_sdram_phaseinjector1_command_storage[5];
assign main_litedramcore_sdram_phaseinjector1_csrfield_cs_top = main_litedramcore_sdram_phaseinjector1_command_storage[6];
assign main_litedramcore_sdram_phaseinjector1_csrfield_cs_bottom = main_litedramcore_sdram_phaseinjector1_command_storage[7];
assign builder_csrbank3_dfii_pi1_command0_w = main_litedramcore_sdram_phaseinjector1_command_storage[7:0];
assign builder_csrbank3_dfii_pi1_address0_w = main_litedramcore_sdram_phaseinjector1_address_storage[14:0];
assign builder_csrbank3_dfii_pi1_baddress0_w = main_litedramcore_sdram_phaseinjector1_baddress_storage[2:0];
assign builder_csrbank3_dfii_pi1_wrdata0_w = main_litedramcore_sdram_phaseinjector1_wrdata_storage[31:0];
assign builder_csrbank3_dfii_pi1_rddata_w = main_litedramcore_sdram_phaseinjector1_rddata_status[31:0];
assign main_litedramcore_sdram_phaseinjector1_rddata_we = builder_csrbank3_dfii_pi1_rddata_we;
assign main_litedramcore_sdram_phaseinjector2_csrfield_cs = main_litedramcore_sdram_phaseinjector2_command_storage[0];
assign main_litedramcore_sdram_phaseinjector2_csrfield_we = main_litedramcore_sdram_phaseinjector2_command_storage[1];
assign main_litedramcore_sdram_phaseinjector2_csrfield_cas = main_litedramcore_sdram_phaseinjector2_command_storage[2];
assign main_litedramcore_sdram_phaseinjector2_csrfield_ras = main_litedramcore_sdram_phaseinjector2_command_storage[3];
assign main_litedramcore_sdram_phaseinjector2_csrfield_wren = main_litedramcore_sdram_phaseinjector2_command_storage[4];
assign main_litedramcore_sdram_phaseinjector2_csrfield_rden = main_litedramcore_sdram_phaseinjector2_command_storage[5];
assign main_litedramcore_sdram_phaseinjector2_csrfield_cs_top = main_litedramcore_sdram_phaseinjector2_command_storage[6];
assign main_litedramcore_sdram_phaseinjector2_csrfield_cs_bottom = main_litedramcore_sdram_phaseinjector2_command_storage[7];
assign builder_csrbank3_dfii_pi2_command0_w = main_litedramcore_sdram_phaseinjector2_command_storage[7:0];
assign builder_csrbank3_dfii_pi2_address0_w = main_litedramcore_sdram_phaseinjector2_address_storage[14:0];
assign builder_csrbank3_dfii_pi2_baddress0_w = main_litedramcore_sdram_phaseinjector2_baddress_storage[2:0];
assign builder_csrbank3_dfii_pi2_wrdata0_w = main_litedramcore_sdram_phaseinjector2_wrdata_storage[31:0];
assign builder_csrbank3_dfii_pi2_rddata_w = main_litedramcore_sdram_phaseinjector2_rddata_status[31:0];
assign main_litedramcore_sdram_phaseinjector2_rddata_we = builder_csrbank3_dfii_pi2_rddata_we;
assign main_litedramcore_sdram_phaseinjector3_csrfield_cs = main_litedramcore_sdram_phaseinjector3_command_storage[0];
assign main_litedramcore_sdram_phaseinjector3_csrfield_we = main_litedramcore_sdram_phaseinjector3_command_storage[1];
assign main_litedramcore_sdram_phaseinjector3_csrfield_cas = main_litedramcore_sdram_phaseinjector3_command_storage[2];
assign main_litedramcore_sdram_phaseinjector3_csrfield_ras = main_litedramcore_sdram_phaseinjector3_command_storage[3];
assign main_litedramcore_sdram_phaseinjector3_csrfield_wren = main_litedramcore_sdram_phaseinjector3_command_storage[4];
assign main_litedramcore_sdram_phaseinjector3_csrfield_rden = main_litedramcore_sdram_phaseinjector3_command_storage[5];
assign main_litedramcore_sdram_phaseinjector3_csrfield_cs_top = main_litedramcore_sdram_phaseinjector3_command_storage[6];
assign main_litedramcore_sdram_phaseinjector3_csrfield_cs_bottom = main_litedramcore_sdram_phaseinjector3_command_storage[7];
assign builder_csrbank3_dfii_pi3_command0_w = main_litedramcore_sdram_phaseinjector3_command_storage[7:0];
assign builder_csrbank3_dfii_pi3_address0_w = main_litedramcore_sdram_phaseinjector3_address_storage[14:0];
assign builder_csrbank3_dfii_pi3_baddress0_w = main_litedramcore_sdram_phaseinjector3_baddress_storage[2:0];
assign builder_csrbank3_dfii_pi3_wrdata0_w = main_litedramcore_sdram_phaseinjector3_wrdata_storage[31:0];
assign builder_csrbank3_dfii_pi3_rddata_w = main_litedramcore_sdram_phaseinjector3_rddata_status[31:0];
assign main_litedramcore_sdram_phaseinjector3_rddata_we = builder_csrbank3_dfii_pi3_rddata_we;
assign builder_csrbank4_sel = (builder_interface4_bank_bus_adr[13:9] == 3'd4);
assign builder_csrbank4_load0_r = builder_interface4_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csrbank4_load0_re <= 1'd0;
    if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csrbank4_load0_re <= builder_interface4_bank_bus_we;
    end
end
always @(*) begin
    builder_csrbank4_load0_we <= 1'd0;
    if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csrbank4_load0_we <= (~builder_interface4_bank_bus_we);
    end
end
assign builder_csrbank4_reload0_r = builder_interface4_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csrbank4_reload0_we <= 1'd0;
    if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csrbank4_reload0_we <= (~builder_interface4_bank_bus_we);
    end
end
always @(*) begin
    builder_csrbank4_reload0_re <= 1'd0;
    if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csrbank4_reload0_re <= builder_interface4_bank_bus_we;
    end
end
assign builder_csrbank4_en0_r = builder_interface4_bank_bus_dat_w[0];
always @(*) begin
    builder_csrbank4_en0_we <= 1'd0;
    if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csrbank4_en0_we <= (~builder_interface4_bank_bus_we);
    end
end
always @(*) begin
    builder_csrbank4_en0_re <= 1'd0;
    if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csrbank4_en0_re <= builder_interface4_bank_bus_we;
    end
end
assign builder_csrbank4_update_value0_r = builder_interface4_bank_bus_dat_w[0];
always @(*) begin
    builder_csrbank4_update_value0_re <= 1'd0;
    if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csrbank4_update_value0_re <= builder_interface4_bank_bus_we;
    end
end
always @(*) begin
    builder_csrbank4_update_value0_we <= 1'd0;
    if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csrbank4_update_value0_we <= (~builder_interface4_bank_bus_we);
    end
end
assign builder_csrbank4_value_r = builder_interface4_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csrbank4_value_we <= 1'd0;
    if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csrbank4_value_we <= (~builder_interface4_bank_bus_we);
    end
end
always @(*) begin
    builder_csrbank4_value_re <= 1'd0;
    if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csrbank4_value_re <= builder_interface4_bank_bus_we;
    end
end
assign builder_csrbank4_ev_status_r = builder_interface4_bank_bus_dat_w[0];
always @(*) begin
    builder_csrbank4_ev_status_we <= 1'd0;
    if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csrbank4_ev_status_we <= (~builder_interface4_bank_bus_we);
    end
end
always @(*) begin
    builder_csrbank4_ev_status_re <= 1'd0;
    if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csrbank4_ev_status_re <= builder_interface4_bank_bus_we;
    end
end
assign builder_csrbank4_ev_pending_r = builder_interface4_bank_bus_dat_w[0];
always @(*) begin
    builder_csrbank4_ev_pending_re <= 1'd0;
    if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 3'd6))) begin
        builder_csrbank4_ev_pending_re <= builder_interface4_bank_bus_we;
    end
end
always @(*) begin
    builder_csrbank4_ev_pending_we <= 1'd0;
    if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 3'd6))) begin
        builder_csrbank4_ev_pending_we <= (~builder_interface4_bank_bus_we);
    end
end
assign builder_csrbank4_ev_enable0_r = builder_interface4_bank_bus_dat_w[0];
always @(*) begin
    builder_csrbank4_ev_enable0_we <= 1'd0;
    if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 3'd7))) begin
        builder_csrbank4_ev_enable0_we <= (~builder_interface4_bank_bus_we);
    end
end
always @(*) begin
    builder_csrbank4_ev_enable0_re <= 1'd0;
    if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 3'd7))) begin
        builder_csrbank4_ev_enable0_re <= builder_interface4_bank_bus_we;
    end
end
assign builder_csrbank4_load0_w = main_litedramcore_load_storage[31:0];
assign builder_csrbank4_reload0_w = main_litedramcore_reload_storage[31:0];
assign builder_csrbank4_en0_w = main_litedramcore_en_storage;
assign builder_csrbank4_update_value0_w = main_litedramcore_update_value_storage;
assign builder_csrbank4_value_w = main_litedramcore_value_status[31:0];
assign main_litedramcore_value_we = builder_csrbank4_value_we;
assign main_litedramcore_status_status = main_litedramcore_zero0;
assign builder_csrbank4_ev_status_w = main_litedramcore_status_status;
assign main_litedramcore_status_we = builder_csrbank4_ev_status_we;
assign main_litedramcore_pending_status = main_litedramcore_zero1;
assign builder_csrbank4_ev_pending_w = main_litedramcore_pending_status;
assign main_litedramcore_pending_we = builder_csrbank4_ev_pending_we;
assign main_litedramcore_zero2 = main_litedramcore_enable_storage;
assign builder_csrbank4_ev_enable0_w = main_litedramcore_enable_storage;
assign builder_csrbank5_sel = (builder_interface5_bank_bus_adr[13:9] == 3'd5);
assign main_uart_rxtx_r = builder_interface5_bank_bus_dat_w[7:0];
always @(*) begin
    main_uart_rxtx_re <= 1'd0;
    if ((builder_csrbank5_sel & (builder_interface5_bank_bus_adr[8:0] == 1'd0))) begin
        main_uart_rxtx_re <= builder_interface5_bank_bus_we;
    end
end
always @(*) begin
    main_uart_rxtx_we <= 1'd0;
    if ((builder_csrbank5_sel & (builder_interface5_bank_bus_adr[8:0] == 1'd0))) begin
        main_uart_rxtx_we <= (~builder_interface5_bank_bus_we);
    end
end
assign builder_csrbank5_txfull_r = builder_interface5_bank_bus_dat_w[0];
always @(*) begin
    builder_csrbank5_txfull_we <= 1'd0;
    if ((builder_csrbank5_sel & (builder_interface5_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csrbank5_txfull_we <= (~builder_interface5_bank_bus_we);
    end
end
always @(*) begin
    builder_csrbank5_txfull_re <= 1'd0;
    if ((builder_csrbank5_sel & (builder_interface5_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csrbank5_txfull_re <= builder_interface5_bank_bus_we;
    end
end
assign builder_csrbank5_rxempty_r = builder_interface5_bank_bus_dat_w[0];
always @(*) begin
    builder_csrbank5_rxempty_re <= 1'd0;
    if ((builder_csrbank5_sel & (builder_interface5_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csrbank5_rxempty_re <= builder_interface5_bank_bus_we;
    end
end
always @(*) begin
    builder_csrbank5_rxempty_we <= 1'd0;
    if ((builder_csrbank5_sel & (builder_interface5_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csrbank5_rxempty_we <= (~builder_interface5_bank_bus_we);
    end
end
assign builder_csrbank5_ev_status_r = builder_interface5_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csrbank5_ev_status_re <= 1'd0;
    if ((builder_csrbank5_sel & (builder_interface5_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csrbank5_ev_status_re <= builder_interface5_bank_bus_we;
    end
end
always @(*) begin
    builder_csrbank5_ev_status_we <= 1'd0;
    if ((builder_csrbank5_sel & (builder_interface5_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csrbank5_ev_status_we <= (~builder_interface5_bank_bus_we);
    end
end
assign builder_csrbank5_ev_pending_r = builder_interface5_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csrbank5_ev_pending_we <= 1'd0;
    if ((builder_csrbank5_sel & (builder_interface5_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csrbank5_ev_pending_we <= (~builder_interface5_bank_bus_we);
    end
end
always @(*) begin
    builder_csrbank5_ev_pending_re <= 1'd0;
    if ((builder_csrbank5_sel & (builder_interface5_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csrbank5_ev_pending_re <= builder_interface5_bank_bus_we;
    end
end
assign builder_csrbank5_ev_enable0_r = builder_interface5_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csrbank5_ev_enable0_we <= 1'd0;
    if ((builder_csrbank5_sel & (builder_interface5_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csrbank5_ev_enable0_we <= (~builder_interface5_bank_bus_we);
    end
end
always @(*) begin
    builder_csrbank5_ev_enable0_re <= 1'd0;
    if ((builder_csrbank5_sel & (builder_interface5_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csrbank5_ev_enable0_re <= builder_interface5_bank_bus_we;
    end
end
assign builder_csrbank5_txempty_r = builder_interface5_bank_bus_dat_w[0];
always @(*) begin
    builder_csrbank5_txempty_re <= 1'd0;
    if ((builder_csrbank5_sel & (builder_interface5_bank_bus_adr[8:0] == 3'd6))) begin
        builder_csrbank5_txempty_re <= builder_interface5_bank_bus_we;
    end
end
always @(*) begin
    builder_csrbank5_txempty_we <= 1'd0;
    if ((builder_csrbank5_sel & (builder_interface5_bank_bus_adr[8:0] == 3'd6))) begin
        builder_csrbank5_txempty_we <= (~builder_interface5_bank_bus_we);
    end
end
assign builder_csrbank5_rxfull_r = builder_interface5_bank_bus_dat_w[0];
always @(*) begin
    builder_csrbank5_rxfull_we <= 1'd0;
    if ((builder_csrbank5_sel & (builder_interface5_bank_bus_adr[8:0] == 3'd7))) begin
        builder_csrbank5_rxfull_we <= (~builder_interface5_bank_bus_we);
    end
end
always @(*) begin
    builder_csrbank5_rxfull_re <= 1'd0;
    if ((builder_csrbank5_sel & (builder_interface5_bank_bus_adr[8:0] == 3'd7))) begin
        builder_csrbank5_rxfull_re <= builder_interface5_bank_bus_we;
    end
end
assign builder_csrbank5_txfull_w = main_uart_txfull_status;
assign main_uart_txfull_we = builder_csrbank5_txfull_we;
assign builder_csrbank5_rxempty_w = main_uart_rxempty_status;
assign main_uart_rxempty_we = builder_csrbank5_rxempty_we;
always @(*) begin
    main_uart_status_status <= 2'd0;
    main_uart_status_status[0] <= main_uart_tx0;
    main_uart_status_status[1] <= main_uart_rx0;
end
assign builder_csrbank5_ev_status_w = main_uart_status_status[1:0];
assign main_uart_status_we = builder_csrbank5_ev_status_we;
always @(*) begin
    main_uart_pending_status <= 2'd0;
    main_uart_pending_status[0] <= main_uart_tx1;
    main_uart_pending_status[1] <= main_uart_rx1;
end
assign builder_csrbank5_ev_pending_w = main_uart_pending_status[1:0];
assign main_uart_pending_we = builder_csrbank5_ev_pending_we;
assign main_uart_tx2 = main_uart_enable_storage[0];
assign main_uart_rx2 = main_uart_enable_storage[1];
assign builder_csrbank5_ev_enable0_w = main_uart_enable_storage[1:0];
assign builder_csrbank5_txempty_w = main_uart_txempty_status;
assign main_uart_txempty_we = builder_csrbank5_txempty_we;
assign builder_csrbank5_rxfull_w = main_uart_rxfull_status;
assign main_uart_rxfull_we = builder_csrbank5_rxfull_we;
assign builder_csr_interconnect_adr = builder_litedramcore_adr;
assign builder_csr_interconnect_we = builder_litedramcore_we;
assign builder_csr_interconnect_dat_w = builder_litedramcore_dat_w;
assign builder_litedramcore_dat_r = builder_csr_interconnect_dat_r;
assign builder_interface0_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_interface1_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_interface2_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_interface3_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_interface4_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_interface5_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_interface0_bank_bus_we = builder_csr_interconnect_we;
assign builder_interface1_bank_bus_we = builder_csr_interconnect_we;
assign builder_interface2_bank_bus_we = builder_csr_interconnect_we;
assign builder_interface3_bank_bus_we = builder_csr_interconnect_we;
assign builder_interface4_bank_bus_we = builder_csr_interconnect_we;
assign builder_interface5_bank_bus_we = builder_csr_interconnect_we;
assign builder_interface0_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_interface1_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_interface2_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_interface3_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_interface4_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_interface5_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_interconnect_dat_r = (((((builder_interface0_bank_bus_dat_r | builder_interface1_bank_bus_dat_r) | builder_interface2_bank_bus_dat_r) | builder_interface3_bank_bus_dat_r) | builder_interface4_bank_bus_dat_r) | builder_interface5_bank_bus_dat_r);
always @(*) begin
    builder_rhs_array_muxed0 <= 30'd0;
    case (builder_grant)
        1'd0: begin
            builder_rhs_array_muxed0 <= main_litedramcore_serv_ibus_adr;
        end
        default: begin
            builder_rhs_array_muxed0 <= main_litedramcore_serv_dbus_adr;
        end
    endcase
end
always @(*) begin
    builder_rhs_array_muxed1 <= 32'd0;
    case (builder_grant)
        1'd0: begin
            builder_rhs_array_muxed1 <= main_litedramcore_serv_ibus_dat_w;
        end
        default: begin
            builder_rhs_array_muxed1 <= main_litedramcore_serv_dbus_dat_w;
        end
    endcase
end
always @(*) begin
    builder_rhs_array_muxed2 <= 4'd0;
    case (builder_grant)
        1'd0: begin
            builder_rhs_array_muxed2 <= main_litedramcore_serv_ibus_sel;
        end
        default: begin
            builder_rhs_array_muxed2 <= main_litedramcore_serv_dbus_sel;
        end
    endcase
end
always @(*) begin
    builder_rhs_array_muxed3 <= 1'd0;
    case (builder_grant)
        1'd0: begin
            builder_rhs_array_muxed3 <= main_litedramcore_serv_ibus_cyc;
        end
        default: begin
            builder_rhs_array_muxed3 <= main_litedramcore_serv_dbus_cyc;
        end
    endcase
end
always @(*) begin
    builder_rhs_array_muxed4 <= 1'd0;
    case (builder_grant)
        1'd0: begin
            builder_rhs_array_muxed4 <= main_litedramcore_serv_ibus_stb;
        end
        default: begin
            builder_rhs_array_muxed4 <= main_litedramcore_serv_dbus_stb;
        end
    endcase
end
always @(*) begin
    builder_rhs_array_muxed5 <= 1'd0;
    case (builder_grant)
        1'd0: begin
            builder_rhs_array_muxed5 <= main_litedramcore_serv_ibus_we;
        end
        default: begin
            builder_rhs_array_muxed5 <= main_litedramcore_serv_dbus_we;
        end
    endcase
end
always @(*) begin
    builder_rhs_array_muxed6 <= 3'd0;
    case (builder_grant)
        1'd0: begin
            builder_rhs_array_muxed6 <= main_litedramcore_serv_ibus_cti;
        end
        default: begin
            builder_rhs_array_muxed6 <= main_litedramcore_serv_dbus_cti;
        end
    endcase
end
always @(*) begin
    builder_rhs_array_muxed7 <= 2'd0;
    case (builder_grant)
        1'd0: begin
            builder_rhs_array_muxed7 <= main_litedramcore_serv_ibus_bte;
        end
        default: begin
            builder_rhs_array_muxed7 <= main_litedramcore_serv_dbus_bte;
        end
    endcase
end
always @(*) begin
    builder_rhs_array_muxed8 <= 1'd0;
    case (main_litedramcore_sdram_choose_cmd_grant)
        1'd0: begin
            builder_rhs_array_muxed8 <= main_litedramcore_sdram_choose_cmd_valids[0];
        end
        1'd1: begin
            builder_rhs_array_muxed8 <= main_litedramcore_sdram_choose_cmd_valids[1];
        end
        2'd2: begin
            builder_rhs_array_muxed8 <= main_litedramcore_sdram_choose_cmd_valids[2];
        end
        2'd3: begin
            builder_rhs_array_muxed8 <= main_litedramcore_sdram_choose_cmd_valids[3];
        end
        3'd4: begin
            builder_rhs_array_muxed8 <= main_litedramcore_sdram_choose_cmd_valids[4];
        end
        3'd5: begin
            builder_rhs_array_muxed8 <= main_litedramcore_sdram_choose_cmd_valids[5];
        end
        3'd6: begin
            builder_rhs_array_muxed8 <= main_litedramcore_sdram_choose_cmd_valids[6];
        end
        default: begin
            builder_rhs_array_muxed8 <= main_litedramcore_sdram_choose_cmd_valids[7];
        end
    endcase
end
always @(*) begin
    builder_rhs_array_muxed9 <= 15'd0;
    case (main_litedramcore_sdram_choose_cmd_grant)
        1'd0: begin
            builder_rhs_array_muxed9 <= main_litedramcore_sdram_bankmachine0_cmd_payload_a;
        end
        1'd1: begin
            builder_rhs_array_muxed9 <= main_litedramcore_sdram_bankmachine1_cmd_payload_a;
        end
        2'd2: begin
            builder_rhs_array_muxed9 <= main_litedramcore_sdram_bankmachine2_cmd_payload_a;
        end
        2'd3: begin
            builder_rhs_array_muxed9 <= main_litedramcore_sdram_bankmachine3_cmd_payload_a;
        end
        3'd4: begin
            builder_rhs_array_muxed9 <= main_litedramcore_sdram_bankmachine4_cmd_payload_a;
        end
        3'd5: begin
            builder_rhs_array_muxed9 <= main_litedramcore_sdram_bankmachine5_cmd_payload_a;
        end
        3'd6: begin
            builder_rhs_array_muxed9 <= main_litedramcore_sdram_bankmachine6_cmd_payload_a;
        end
        default: begin
            builder_rhs_array_muxed9 <= main_litedramcore_sdram_bankmachine7_cmd_payload_a;
        end
    endcase
end
always @(*) begin
    builder_rhs_array_muxed10 <= 3'd0;
    case (main_litedramcore_sdram_choose_cmd_grant)
        1'd0: begin
            builder_rhs_array_muxed10 <= main_litedramcore_sdram_bankmachine0_cmd_payload_ba;
        end
        1'd1: begin
            builder_rhs_array_muxed10 <= main_litedramcore_sdram_bankmachine1_cmd_payload_ba;
        end
        2'd2: begin
            builder_rhs_array_muxed10 <= main_litedramcore_sdram_bankmachine2_cmd_payload_ba;
        end
        2'd3: begin
            builder_rhs_array_muxed10 <= main_litedramcore_sdram_bankmachine3_cmd_payload_ba;
        end
        3'd4: begin
            builder_rhs_array_muxed10 <= main_litedramcore_sdram_bankmachine4_cmd_payload_ba;
        end
        3'd5: begin
            builder_rhs_array_muxed10 <= main_litedramcore_sdram_bankmachine5_cmd_payload_ba;
        end
        3'd6: begin
            builder_rhs_array_muxed10 <= main_litedramcore_sdram_bankmachine6_cmd_payload_ba;
        end
        default: begin
            builder_rhs_array_muxed10 <= main_litedramcore_sdram_bankmachine7_cmd_payload_ba;
        end
    endcase
end
always @(*) begin
    builder_rhs_array_muxed11 <= 1'd0;
    case (main_litedramcore_sdram_choose_cmd_grant)
        1'd0: begin
            builder_rhs_array_muxed11 <= main_litedramcore_sdram_bankmachine0_cmd_payload_is_read;
        end
        1'd1: begin
            builder_rhs_array_muxed11 <= main_litedramcore_sdram_bankmachine1_cmd_payload_is_read;
        end
        2'd2: begin
            builder_rhs_array_muxed11 <= main_litedramcore_sdram_bankmachine2_cmd_payload_is_read;
        end
        2'd3: begin
            builder_rhs_array_muxed11 <= main_litedramcore_sdram_bankmachine3_cmd_payload_is_read;
        end
        3'd4: begin
            builder_rhs_array_muxed11 <= main_litedramcore_sdram_bankmachine4_cmd_payload_is_read;
        end
        3'd5: begin
            builder_rhs_array_muxed11 <= main_litedramcore_sdram_bankmachine5_cmd_payload_is_read;
        end
        3'd6: begin
            builder_rhs_array_muxed11 <= main_litedramcore_sdram_bankmachine6_cmd_payload_is_read;
        end
        default: begin
            builder_rhs_array_muxed11 <= main_litedramcore_sdram_bankmachine7_cmd_payload_is_read;
        end
    endcase
end
always @(*) begin
    builder_rhs_array_muxed12 <= 1'd0;
    case (main_litedramcore_sdram_choose_cmd_grant)
        1'd0: begin
            builder_rhs_array_muxed12 <= main_litedramcore_sdram_bankmachine0_cmd_payload_is_write;
        end
        1'd1: begin
            builder_rhs_array_muxed12 <= main_litedramcore_sdram_bankmachine1_cmd_payload_is_write;
        end
        2'd2: begin
            builder_rhs_array_muxed12 <= main_litedramcore_sdram_bankmachine2_cmd_payload_is_write;
        end
        2'd3: begin
            builder_rhs_array_muxed12 <= main_litedramcore_sdram_bankmachine3_cmd_payload_is_write;
        end
        3'd4: begin
            builder_rhs_array_muxed12 <= main_litedramcore_sdram_bankmachine4_cmd_payload_is_write;
        end
        3'd5: begin
            builder_rhs_array_muxed12 <= main_litedramcore_sdram_bankmachine5_cmd_payload_is_write;
        end
        3'd6: begin
            builder_rhs_array_muxed12 <= main_litedramcore_sdram_bankmachine6_cmd_payload_is_write;
        end
        default: begin
            builder_rhs_array_muxed12 <= main_litedramcore_sdram_bankmachine7_cmd_payload_is_write;
        end
    endcase
end
always @(*) begin
    builder_rhs_array_muxed13 <= 1'd0;
    case (main_litedramcore_sdram_choose_cmd_grant)
        1'd0: begin
            builder_rhs_array_muxed13 <= main_litedramcore_sdram_bankmachine0_cmd_payload_is_cmd;
        end
        1'd1: begin
            builder_rhs_array_muxed13 <= main_litedramcore_sdram_bankmachine1_cmd_payload_is_cmd;
        end
        2'd2: begin
            builder_rhs_array_muxed13 <= main_litedramcore_sdram_bankmachine2_cmd_payload_is_cmd;
        end
        2'd3: begin
            builder_rhs_array_muxed13 <= main_litedramcore_sdram_bankmachine3_cmd_payload_is_cmd;
        end
        3'd4: begin
            builder_rhs_array_muxed13 <= main_litedramcore_sdram_bankmachine4_cmd_payload_is_cmd;
        end
        3'd5: begin
            builder_rhs_array_muxed13 <= main_litedramcore_sdram_bankmachine5_cmd_payload_is_cmd;
        end
        3'd6: begin
            builder_rhs_array_muxed13 <= main_litedramcore_sdram_bankmachine6_cmd_payload_is_cmd;
        end
        default: begin
            builder_rhs_array_muxed13 <= main_litedramcore_sdram_bankmachine7_cmd_payload_is_cmd;
        end
    endcase
end
always @(*) begin
    builder_t_array_muxed0 <= 1'd0;
    case (main_litedramcore_sdram_choose_cmd_grant)
        1'd0: begin
            builder_t_array_muxed0 <= main_litedramcore_sdram_bankmachine0_cmd_payload_cas;
        end
        1'd1: begin
            builder_t_array_muxed0 <= main_litedramcore_sdram_bankmachine1_cmd_payload_cas;
        end
        2'd2: begin
            builder_t_array_muxed0 <= main_litedramcore_sdram_bankmachine2_cmd_payload_cas;
        end
        2'd3: begin
            builder_t_array_muxed0 <= main_litedramcore_sdram_bankmachine3_cmd_payload_cas;
        end
        3'd4: begin
            builder_t_array_muxed0 <= main_litedramcore_sdram_bankmachine4_cmd_payload_cas;
        end
        3'd5: begin
            builder_t_array_muxed0 <= main_litedramcore_sdram_bankmachine5_cmd_payload_cas;
        end
        3'd6: begin
            builder_t_array_muxed0 <= main_litedramcore_sdram_bankmachine6_cmd_payload_cas;
        end
        default: begin
            builder_t_array_muxed0 <= main_litedramcore_sdram_bankmachine7_cmd_payload_cas;
        end
    endcase
end
always @(*) begin
    builder_t_array_muxed1 <= 1'd0;
    case (main_litedramcore_sdram_choose_cmd_grant)
        1'd0: begin
            builder_t_array_muxed1 <= main_litedramcore_sdram_bankmachine0_cmd_payload_ras;
        end
        1'd1: begin
            builder_t_array_muxed1 <= main_litedramcore_sdram_bankmachine1_cmd_payload_ras;
        end
        2'd2: begin
            builder_t_array_muxed1 <= main_litedramcore_sdram_bankmachine2_cmd_payload_ras;
        end
        2'd3: begin
            builder_t_array_muxed1 <= main_litedramcore_sdram_bankmachine3_cmd_payload_ras;
        end
        3'd4: begin
            builder_t_array_muxed1 <= main_litedramcore_sdram_bankmachine4_cmd_payload_ras;
        end
        3'd5: begin
            builder_t_array_muxed1 <= main_litedramcore_sdram_bankmachine5_cmd_payload_ras;
        end
        3'd6: begin
            builder_t_array_muxed1 <= main_litedramcore_sdram_bankmachine6_cmd_payload_ras;
        end
        default: begin
            builder_t_array_muxed1 <= main_litedramcore_sdram_bankmachine7_cmd_payload_ras;
        end
    endcase
end
always @(*) begin
    builder_t_array_muxed2 <= 1'd0;
    case (main_litedramcore_sdram_choose_cmd_grant)
        1'd0: begin
            builder_t_array_muxed2 <= main_litedramcore_sdram_bankmachine0_cmd_payload_we;
        end
        1'd1: begin
            builder_t_array_muxed2 <= main_litedramcore_sdram_bankmachine1_cmd_payload_we;
        end
        2'd2: begin
            builder_t_array_muxed2 <= main_litedramcore_sdram_bankmachine2_cmd_payload_we;
        end
        2'd3: begin
            builder_t_array_muxed2 <= main_litedramcore_sdram_bankmachine3_cmd_payload_we;
        end
        3'd4: begin
            builder_t_array_muxed2 <= main_litedramcore_sdram_bankmachine4_cmd_payload_we;
        end
        3'd5: begin
            builder_t_array_muxed2 <= main_litedramcore_sdram_bankmachine5_cmd_payload_we;
        end
        3'd6: begin
            builder_t_array_muxed2 <= main_litedramcore_sdram_bankmachine6_cmd_payload_we;
        end
        default: begin
            builder_t_array_muxed2 <= main_litedramcore_sdram_bankmachine7_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    builder_rhs_array_muxed14 <= 1'd0;
    case (main_litedramcore_sdram_choose_req_grant)
        1'd0: begin
            builder_rhs_array_muxed14 <= main_litedramcore_sdram_choose_req_valids[0];
        end
        1'd1: begin
            builder_rhs_array_muxed14 <= main_litedramcore_sdram_choose_req_valids[1];
        end
        2'd2: begin
            builder_rhs_array_muxed14 <= main_litedramcore_sdram_choose_req_valids[2];
        end
        2'd3: begin
            builder_rhs_array_muxed14 <= main_litedramcore_sdram_choose_req_valids[3];
        end
        3'd4: begin
            builder_rhs_array_muxed14 <= main_litedramcore_sdram_choose_req_valids[4];
        end
        3'd5: begin
            builder_rhs_array_muxed14 <= main_litedramcore_sdram_choose_req_valids[5];
        end
        3'd6: begin
            builder_rhs_array_muxed14 <= main_litedramcore_sdram_choose_req_valids[6];
        end
        default: begin
            builder_rhs_array_muxed14 <= main_litedramcore_sdram_choose_req_valids[7];
        end
    endcase
end
always @(*) begin
    builder_rhs_array_muxed15 <= 15'd0;
    case (main_litedramcore_sdram_choose_req_grant)
        1'd0: begin
            builder_rhs_array_muxed15 <= main_litedramcore_sdram_bankmachine0_cmd_payload_a;
        end
        1'd1: begin
            builder_rhs_array_muxed15 <= main_litedramcore_sdram_bankmachine1_cmd_payload_a;
        end
        2'd2: begin
            builder_rhs_array_muxed15 <= main_litedramcore_sdram_bankmachine2_cmd_payload_a;
        end
        2'd3: begin
            builder_rhs_array_muxed15 <= main_litedramcore_sdram_bankmachine3_cmd_payload_a;
        end
        3'd4: begin
            builder_rhs_array_muxed15 <= main_litedramcore_sdram_bankmachine4_cmd_payload_a;
        end
        3'd5: begin
            builder_rhs_array_muxed15 <= main_litedramcore_sdram_bankmachine5_cmd_payload_a;
        end
        3'd6: begin
            builder_rhs_array_muxed15 <= main_litedramcore_sdram_bankmachine6_cmd_payload_a;
        end
        default: begin
            builder_rhs_array_muxed15 <= main_litedramcore_sdram_bankmachine7_cmd_payload_a;
        end
    endcase
end
always @(*) begin
    builder_rhs_array_muxed16 <= 3'd0;
    case (main_litedramcore_sdram_choose_req_grant)
        1'd0: begin
            builder_rhs_array_muxed16 <= main_litedramcore_sdram_bankmachine0_cmd_payload_ba;
        end
        1'd1: begin
            builder_rhs_array_muxed16 <= main_litedramcore_sdram_bankmachine1_cmd_payload_ba;
        end
        2'd2: begin
            builder_rhs_array_muxed16 <= main_litedramcore_sdram_bankmachine2_cmd_payload_ba;
        end
        2'd3: begin
            builder_rhs_array_muxed16 <= main_litedramcore_sdram_bankmachine3_cmd_payload_ba;
        end
        3'd4: begin
            builder_rhs_array_muxed16 <= main_litedramcore_sdram_bankmachine4_cmd_payload_ba;
        end
        3'd5: begin
            builder_rhs_array_muxed16 <= main_litedramcore_sdram_bankmachine5_cmd_payload_ba;
        end
        3'd6: begin
            builder_rhs_array_muxed16 <= main_litedramcore_sdram_bankmachine6_cmd_payload_ba;
        end
        default: begin
            builder_rhs_array_muxed16 <= main_litedramcore_sdram_bankmachine7_cmd_payload_ba;
        end
    endcase
end
always @(*) begin
    builder_rhs_array_muxed17 <= 1'd0;
    case (main_litedramcore_sdram_choose_req_grant)
        1'd0: begin
            builder_rhs_array_muxed17 <= main_litedramcore_sdram_bankmachine0_cmd_payload_is_read;
        end
        1'd1: begin
            builder_rhs_array_muxed17 <= main_litedramcore_sdram_bankmachine1_cmd_payload_is_read;
        end
        2'd2: begin
            builder_rhs_array_muxed17 <= main_litedramcore_sdram_bankmachine2_cmd_payload_is_read;
        end
        2'd3: begin
            builder_rhs_array_muxed17 <= main_litedramcore_sdram_bankmachine3_cmd_payload_is_read;
        end
        3'd4: begin
            builder_rhs_array_muxed17 <= main_litedramcore_sdram_bankmachine4_cmd_payload_is_read;
        end
        3'd5: begin
            builder_rhs_array_muxed17 <= main_litedramcore_sdram_bankmachine5_cmd_payload_is_read;
        end
        3'd6: begin
            builder_rhs_array_muxed17 <= main_litedramcore_sdram_bankmachine6_cmd_payload_is_read;
        end
        default: begin
            builder_rhs_array_muxed17 <= main_litedramcore_sdram_bankmachine7_cmd_payload_is_read;
        end
    endcase
end
always @(*) begin
    builder_rhs_array_muxed18 <= 1'd0;
    case (main_litedramcore_sdram_choose_req_grant)
        1'd0: begin
            builder_rhs_array_muxed18 <= main_litedramcore_sdram_bankmachine0_cmd_payload_is_write;
        end
        1'd1: begin
            builder_rhs_array_muxed18 <= main_litedramcore_sdram_bankmachine1_cmd_payload_is_write;
        end
        2'd2: begin
            builder_rhs_array_muxed18 <= main_litedramcore_sdram_bankmachine2_cmd_payload_is_write;
        end
        2'd3: begin
            builder_rhs_array_muxed18 <= main_litedramcore_sdram_bankmachine3_cmd_payload_is_write;
        end
        3'd4: begin
            builder_rhs_array_muxed18 <= main_litedramcore_sdram_bankmachine4_cmd_payload_is_write;
        end
        3'd5: begin
            builder_rhs_array_muxed18 <= main_litedramcore_sdram_bankmachine5_cmd_payload_is_write;
        end
        3'd6: begin
            builder_rhs_array_muxed18 <= main_litedramcore_sdram_bankmachine6_cmd_payload_is_write;
        end
        default: begin
            builder_rhs_array_muxed18 <= main_litedramcore_sdram_bankmachine7_cmd_payload_is_write;
        end
    endcase
end
always @(*) begin
    builder_rhs_array_muxed19 <= 1'd0;
    case (main_litedramcore_sdram_choose_req_grant)
        1'd0: begin
            builder_rhs_array_muxed19 <= main_litedramcore_sdram_bankmachine0_cmd_payload_is_cmd;
        end
        1'd1: begin
            builder_rhs_array_muxed19 <= main_litedramcore_sdram_bankmachine1_cmd_payload_is_cmd;
        end
        2'd2: begin
            builder_rhs_array_muxed19 <= main_litedramcore_sdram_bankmachine2_cmd_payload_is_cmd;
        end
        2'd3: begin
            builder_rhs_array_muxed19 <= main_litedramcore_sdram_bankmachine3_cmd_payload_is_cmd;
        end
        3'd4: begin
            builder_rhs_array_muxed19 <= main_litedramcore_sdram_bankmachine4_cmd_payload_is_cmd;
        end
        3'd5: begin
            builder_rhs_array_muxed19 <= main_litedramcore_sdram_bankmachine5_cmd_payload_is_cmd;
        end
        3'd6: begin
            builder_rhs_array_muxed19 <= main_litedramcore_sdram_bankmachine6_cmd_payload_is_cmd;
        end
        default: begin
            builder_rhs_array_muxed19 <= main_litedramcore_sdram_bankmachine7_cmd_payload_is_cmd;
        end
    endcase
end
always @(*) begin
    builder_t_array_muxed3 <= 1'd0;
    case (main_litedramcore_sdram_choose_req_grant)
        1'd0: begin
            builder_t_array_muxed3 <= main_litedramcore_sdram_bankmachine0_cmd_payload_cas;
        end
        1'd1: begin
            builder_t_array_muxed3 <= main_litedramcore_sdram_bankmachine1_cmd_payload_cas;
        end
        2'd2: begin
            builder_t_array_muxed3 <= main_litedramcore_sdram_bankmachine2_cmd_payload_cas;
        end
        2'd3: begin
            builder_t_array_muxed3 <= main_litedramcore_sdram_bankmachine3_cmd_payload_cas;
        end
        3'd4: begin
            builder_t_array_muxed3 <= main_litedramcore_sdram_bankmachine4_cmd_payload_cas;
        end
        3'd5: begin
            builder_t_array_muxed3 <= main_litedramcore_sdram_bankmachine5_cmd_payload_cas;
        end
        3'd6: begin
            builder_t_array_muxed3 <= main_litedramcore_sdram_bankmachine6_cmd_payload_cas;
        end
        default: begin
            builder_t_array_muxed3 <= main_litedramcore_sdram_bankmachine7_cmd_payload_cas;
        end
    endcase
end
always @(*) begin
    builder_t_array_muxed4 <= 1'd0;
    case (main_litedramcore_sdram_choose_req_grant)
        1'd0: begin
            builder_t_array_muxed4 <= main_litedramcore_sdram_bankmachine0_cmd_payload_ras;
        end
        1'd1: begin
            builder_t_array_muxed4 <= main_litedramcore_sdram_bankmachine1_cmd_payload_ras;
        end
        2'd2: begin
            builder_t_array_muxed4 <= main_litedramcore_sdram_bankmachine2_cmd_payload_ras;
        end
        2'd3: begin
            builder_t_array_muxed4 <= main_litedramcore_sdram_bankmachine3_cmd_payload_ras;
        end
        3'd4: begin
            builder_t_array_muxed4 <= main_litedramcore_sdram_bankmachine4_cmd_payload_ras;
        end
        3'd5: begin
            builder_t_array_muxed4 <= main_litedramcore_sdram_bankmachine5_cmd_payload_ras;
        end
        3'd6: begin
            builder_t_array_muxed4 <= main_litedramcore_sdram_bankmachine6_cmd_payload_ras;
        end
        default: begin
            builder_t_array_muxed4 <= main_litedramcore_sdram_bankmachine7_cmd_payload_ras;
        end
    endcase
end
always @(*) begin
    builder_t_array_muxed5 <= 1'd0;
    case (main_litedramcore_sdram_choose_req_grant)
        1'd0: begin
            builder_t_array_muxed5 <= main_litedramcore_sdram_bankmachine0_cmd_payload_we;
        end
        1'd1: begin
            builder_t_array_muxed5 <= main_litedramcore_sdram_bankmachine1_cmd_payload_we;
        end
        2'd2: begin
            builder_t_array_muxed5 <= main_litedramcore_sdram_bankmachine2_cmd_payload_we;
        end
        2'd3: begin
            builder_t_array_muxed5 <= main_litedramcore_sdram_bankmachine3_cmd_payload_we;
        end
        3'd4: begin
            builder_t_array_muxed5 <= main_litedramcore_sdram_bankmachine4_cmd_payload_we;
        end
        3'd5: begin
            builder_t_array_muxed5 <= main_litedramcore_sdram_bankmachine5_cmd_payload_we;
        end
        3'd6: begin
            builder_t_array_muxed5 <= main_litedramcore_sdram_bankmachine6_cmd_payload_we;
        end
        default: begin
            builder_t_array_muxed5 <= main_litedramcore_sdram_bankmachine7_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    builder_rhs_array_muxed20 <= 22'd0;
    case (builder_litedramcore_litedramcore_roundrobin0_grant)
        1'd0: begin
            builder_rhs_array_muxed20 <= {main_litedramcore_port_cmd_payload_addr[24:10], main_litedramcore_port_cmd_payload_addr[6:0]};
        end
        default: begin
            builder_rhs_array_muxed20 <= {main_user_port_port_cmd_payload_addr[24:10], main_user_port_port_cmd_payload_addr[6:0]};
        end
    endcase
end
always @(*) begin
    builder_rhs_array_muxed21 <= 1'd0;
    case (builder_litedramcore_litedramcore_roundrobin0_grant)
        1'd0: begin
            builder_rhs_array_muxed21 <= main_litedramcore_port_cmd_payload_we;
        end
        default: begin
            builder_rhs_array_muxed21 <= main_user_port_port_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    builder_rhs_array_muxed22 <= 1'd0;
    case (builder_litedramcore_litedramcore_roundrobin0_grant)
        1'd0: begin
            builder_rhs_array_muxed22 <= (((main_litedramcore_port_cmd_payload_addr[9:7] == 1'd0) & (~(((((((builder_litedramcore_litedramcore_locked0 | (main_litedramcore_sdram_interface_bank1_lock & (builder_litedramcore_litedramcore_roundrobin1_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank2_lock & (builder_litedramcore_litedramcore_roundrobin2_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank3_lock & (builder_litedramcore_litedramcore_roundrobin3_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank4_lock & (builder_litedramcore_litedramcore_roundrobin4_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank5_lock & (builder_litedramcore_litedramcore_roundrobin5_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank6_lock & (builder_litedramcore_litedramcore_roundrobin6_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank7_lock & (builder_litedramcore_litedramcore_roundrobin7_grant == 1'd0))))) & main_litedramcore_port_cmd_valid);
        end
        default: begin
            builder_rhs_array_muxed22 <= (((main_user_port_port_cmd_payload_addr[9:7] == 1'd0) & (~(((((((builder_litedramcore_litedramcore_locked1 | (main_litedramcore_sdram_interface_bank1_lock & (builder_litedramcore_litedramcore_roundrobin1_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank2_lock & (builder_litedramcore_litedramcore_roundrobin2_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank3_lock & (builder_litedramcore_litedramcore_roundrobin3_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank4_lock & (builder_litedramcore_litedramcore_roundrobin4_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank5_lock & (builder_litedramcore_litedramcore_roundrobin5_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank6_lock & (builder_litedramcore_litedramcore_roundrobin6_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank7_lock & (builder_litedramcore_litedramcore_roundrobin7_grant == 1'd1))))) & main_user_port_port_cmd_valid);
        end
    endcase
end
always @(*) begin
    builder_rhs_array_muxed23 <= 22'd0;
    case (builder_litedramcore_litedramcore_roundrobin1_grant)
        1'd0: begin
            builder_rhs_array_muxed23 <= {main_litedramcore_port_cmd_payload_addr[24:10], main_litedramcore_port_cmd_payload_addr[6:0]};
        end
        default: begin
            builder_rhs_array_muxed23 <= {main_user_port_port_cmd_payload_addr[24:10], main_user_port_port_cmd_payload_addr[6:0]};
        end
    endcase
end
always @(*) begin
    builder_rhs_array_muxed24 <= 1'd0;
    case (builder_litedramcore_litedramcore_roundrobin1_grant)
        1'd0: begin
            builder_rhs_array_muxed24 <= main_litedramcore_port_cmd_payload_we;
        end
        default: begin
            builder_rhs_array_muxed24 <= main_user_port_port_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    builder_rhs_array_muxed25 <= 1'd0;
    case (builder_litedramcore_litedramcore_roundrobin1_grant)
        1'd0: begin
            builder_rhs_array_muxed25 <= (((main_litedramcore_port_cmd_payload_addr[9:7] == 1'd1) & (~(((((((builder_litedramcore_litedramcore_locked2 | (main_litedramcore_sdram_interface_bank0_lock & (builder_litedramcore_litedramcore_roundrobin0_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank2_lock & (builder_litedramcore_litedramcore_roundrobin2_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank3_lock & (builder_litedramcore_litedramcore_roundrobin3_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank4_lock & (builder_litedramcore_litedramcore_roundrobin4_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank5_lock & (builder_litedramcore_litedramcore_roundrobin5_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank6_lock & (builder_litedramcore_litedramcore_roundrobin6_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank7_lock & (builder_litedramcore_litedramcore_roundrobin7_grant == 1'd0))))) & main_litedramcore_port_cmd_valid);
        end
        default: begin
            builder_rhs_array_muxed25 <= (((main_user_port_port_cmd_payload_addr[9:7] == 1'd1) & (~(((((((builder_litedramcore_litedramcore_locked3 | (main_litedramcore_sdram_interface_bank0_lock & (builder_litedramcore_litedramcore_roundrobin0_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank2_lock & (builder_litedramcore_litedramcore_roundrobin2_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank3_lock & (builder_litedramcore_litedramcore_roundrobin3_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank4_lock & (builder_litedramcore_litedramcore_roundrobin4_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank5_lock & (builder_litedramcore_litedramcore_roundrobin5_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank6_lock & (builder_litedramcore_litedramcore_roundrobin6_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank7_lock & (builder_litedramcore_litedramcore_roundrobin7_grant == 1'd1))))) & main_user_port_port_cmd_valid);
        end
    endcase
end
always @(*) begin
    builder_rhs_array_muxed26 <= 22'd0;
    case (builder_litedramcore_litedramcore_roundrobin2_grant)
        1'd0: begin
            builder_rhs_array_muxed26 <= {main_litedramcore_port_cmd_payload_addr[24:10], main_litedramcore_port_cmd_payload_addr[6:0]};
        end
        default: begin
            builder_rhs_array_muxed26 <= {main_user_port_port_cmd_payload_addr[24:10], main_user_port_port_cmd_payload_addr[6:0]};
        end
    endcase
end
always @(*) begin
    builder_rhs_array_muxed27 <= 1'd0;
    case (builder_litedramcore_litedramcore_roundrobin2_grant)
        1'd0: begin
            builder_rhs_array_muxed27 <= main_litedramcore_port_cmd_payload_we;
        end
        default: begin
            builder_rhs_array_muxed27 <= main_user_port_port_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    builder_rhs_array_muxed28 <= 1'd0;
    case (builder_litedramcore_litedramcore_roundrobin2_grant)
        1'd0: begin
            builder_rhs_array_muxed28 <= (((main_litedramcore_port_cmd_payload_addr[9:7] == 2'd2) & (~(((((((builder_litedramcore_litedramcore_locked4 | (main_litedramcore_sdram_interface_bank0_lock & (builder_litedramcore_litedramcore_roundrobin0_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank1_lock & (builder_litedramcore_litedramcore_roundrobin1_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank3_lock & (builder_litedramcore_litedramcore_roundrobin3_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank4_lock & (builder_litedramcore_litedramcore_roundrobin4_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank5_lock & (builder_litedramcore_litedramcore_roundrobin5_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank6_lock & (builder_litedramcore_litedramcore_roundrobin6_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank7_lock & (builder_litedramcore_litedramcore_roundrobin7_grant == 1'd0))))) & main_litedramcore_port_cmd_valid);
        end
        default: begin
            builder_rhs_array_muxed28 <= (((main_user_port_port_cmd_payload_addr[9:7] == 2'd2) & (~(((((((builder_litedramcore_litedramcore_locked5 | (main_litedramcore_sdram_interface_bank0_lock & (builder_litedramcore_litedramcore_roundrobin0_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank1_lock & (builder_litedramcore_litedramcore_roundrobin1_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank3_lock & (builder_litedramcore_litedramcore_roundrobin3_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank4_lock & (builder_litedramcore_litedramcore_roundrobin4_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank5_lock & (builder_litedramcore_litedramcore_roundrobin5_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank6_lock & (builder_litedramcore_litedramcore_roundrobin6_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank7_lock & (builder_litedramcore_litedramcore_roundrobin7_grant == 1'd1))))) & main_user_port_port_cmd_valid);
        end
    endcase
end
always @(*) begin
    builder_rhs_array_muxed29 <= 22'd0;
    case (builder_litedramcore_litedramcore_roundrobin3_grant)
        1'd0: begin
            builder_rhs_array_muxed29 <= {main_litedramcore_port_cmd_payload_addr[24:10], main_litedramcore_port_cmd_payload_addr[6:0]};
        end
        default: begin
            builder_rhs_array_muxed29 <= {main_user_port_port_cmd_payload_addr[24:10], main_user_port_port_cmd_payload_addr[6:0]};
        end
    endcase
end
always @(*) begin
    builder_rhs_array_muxed30 <= 1'd0;
    case (builder_litedramcore_litedramcore_roundrobin3_grant)
        1'd0: begin
            builder_rhs_array_muxed30 <= main_litedramcore_port_cmd_payload_we;
        end
        default: begin
            builder_rhs_array_muxed30 <= main_user_port_port_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    builder_rhs_array_muxed31 <= 1'd0;
    case (builder_litedramcore_litedramcore_roundrobin3_grant)
        1'd0: begin
            builder_rhs_array_muxed31 <= (((main_litedramcore_port_cmd_payload_addr[9:7] == 2'd3) & (~(((((((builder_litedramcore_litedramcore_locked6 | (main_litedramcore_sdram_interface_bank0_lock & (builder_litedramcore_litedramcore_roundrobin0_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank1_lock & (builder_litedramcore_litedramcore_roundrobin1_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank2_lock & (builder_litedramcore_litedramcore_roundrobin2_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank4_lock & (builder_litedramcore_litedramcore_roundrobin4_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank5_lock & (builder_litedramcore_litedramcore_roundrobin5_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank6_lock & (builder_litedramcore_litedramcore_roundrobin6_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank7_lock & (builder_litedramcore_litedramcore_roundrobin7_grant == 1'd0))))) & main_litedramcore_port_cmd_valid);
        end
        default: begin
            builder_rhs_array_muxed31 <= (((main_user_port_port_cmd_payload_addr[9:7] == 2'd3) & (~(((((((builder_litedramcore_litedramcore_locked7 | (main_litedramcore_sdram_interface_bank0_lock & (builder_litedramcore_litedramcore_roundrobin0_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank1_lock & (builder_litedramcore_litedramcore_roundrobin1_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank2_lock & (builder_litedramcore_litedramcore_roundrobin2_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank4_lock & (builder_litedramcore_litedramcore_roundrobin4_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank5_lock & (builder_litedramcore_litedramcore_roundrobin5_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank6_lock & (builder_litedramcore_litedramcore_roundrobin6_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank7_lock & (builder_litedramcore_litedramcore_roundrobin7_grant == 1'd1))))) & main_user_port_port_cmd_valid);
        end
    endcase
end
always @(*) begin
    builder_rhs_array_muxed32 <= 22'd0;
    case (builder_litedramcore_litedramcore_roundrobin4_grant)
        1'd0: begin
            builder_rhs_array_muxed32 <= {main_litedramcore_port_cmd_payload_addr[24:10], main_litedramcore_port_cmd_payload_addr[6:0]};
        end
        default: begin
            builder_rhs_array_muxed32 <= {main_user_port_port_cmd_payload_addr[24:10], main_user_port_port_cmd_payload_addr[6:0]};
        end
    endcase
end
always @(*) begin
    builder_rhs_array_muxed33 <= 1'd0;
    case (builder_litedramcore_litedramcore_roundrobin4_grant)
        1'd0: begin
            builder_rhs_array_muxed33 <= main_litedramcore_port_cmd_payload_we;
        end
        default: begin
            builder_rhs_array_muxed33 <= main_user_port_port_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    builder_rhs_array_muxed34 <= 1'd0;
    case (builder_litedramcore_litedramcore_roundrobin4_grant)
        1'd0: begin
            builder_rhs_array_muxed34 <= (((main_litedramcore_port_cmd_payload_addr[9:7] == 3'd4) & (~(((((((builder_litedramcore_litedramcore_locked8 | (main_litedramcore_sdram_interface_bank0_lock & (builder_litedramcore_litedramcore_roundrobin0_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank1_lock & (builder_litedramcore_litedramcore_roundrobin1_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank2_lock & (builder_litedramcore_litedramcore_roundrobin2_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank3_lock & (builder_litedramcore_litedramcore_roundrobin3_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank5_lock & (builder_litedramcore_litedramcore_roundrobin5_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank6_lock & (builder_litedramcore_litedramcore_roundrobin6_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank7_lock & (builder_litedramcore_litedramcore_roundrobin7_grant == 1'd0))))) & main_litedramcore_port_cmd_valid);
        end
        default: begin
            builder_rhs_array_muxed34 <= (((main_user_port_port_cmd_payload_addr[9:7] == 3'd4) & (~(((((((builder_litedramcore_litedramcore_locked9 | (main_litedramcore_sdram_interface_bank0_lock & (builder_litedramcore_litedramcore_roundrobin0_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank1_lock & (builder_litedramcore_litedramcore_roundrobin1_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank2_lock & (builder_litedramcore_litedramcore_roundrobin2_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank3_lock & (builder_litedramcore_litedramcore_roundrobin3_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank5_lock & (builder_litedramcore_litedramcore_roundrobin5_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank6_lock & (builder_litedramcore_litedramcore_roundrobin6_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank7_lock & (builder_litedramcore_litedramcore_roundrobin7_grant == 1'd1))))) & main_user_port_port_cmd_valid);
        end
    endcase
end
always @(*) begin
    builder_rhs_array_muxed35 <= 22'd0;
    case (builder_litedramcore_litedramcore_roundrobin5_grant)
        1'd0: begin
            builder_rhs_array_muxed35 <= {main_litedramcore_port_cmd_payload_addr[24:10], main_litedramcore_port_cmd_payload_addr[6:0]};
        end
        default: begin
            builder_rhs_array_muxed35 <= {main_user_port_port_cmd_payload_addr[24:10], main_user_port_port_cmd_payload_addr[6:0]};
        end
    endcase
end
always @(*) begin
    builder_rhs_array_muxed36 <= 1'd0;
    case (builder_litedramcore_litedramcore_roundrobin5_grant)
        1'd0: begin
            builder_rhs_array_muxed36 <= main_litedramcore_port_cmd_payload_we;
        end
        default: begin
            builder_rhs_array_muxed36 <= main_user_port_port_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    builder_rhs_array_muxed37 <= 1'd0;
    case (builder_litedramcore_litedramcore_roundrobin5_grant)
        1'd0: begin
            builder_rhs_array_muxed37 <= (((main_litedramcore_port_cmd_payload_addr[9:7] == 3'd5) & (~(((((((builder_litedramcore_litedramcore_locked10 | (main_litedramcore_sdram_interface_bank0_lock & (builder_litedramcore_litedramcore_roundrobin0_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank1_lock & (builder_litedramcore_litedramcore_roundrobin1_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank2_lock & (builder_litedramcore_litedramcore_roundrobin2_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank3_lock & (builder_litedramcore_litedramcore_roundrobin3_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank4_lock & (builder_litedramcore_litedramcore_roundrobin4_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank6_lock & (builder_litedramcore_litedramcore_roundrobin6_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank7_lock & (builder_litedramcore_litedramcore_roundrobin7_grant == 1'd0))))) & main_litedramcore_port_cmd_valid);
        end
        default: begin
            builder_rhs_array_muxed37 <= (((main_user_port_port_cmd_payload_addr[9:7] == 3'd5) & (~(((((((builder_litedramcore_litedramcore_locked11 | (main_litedramcore_sdram_interface_bank0_lock & (builder_litedramcore_litedramcore_roundrobin0_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank1_lock & (builder_litedramcore_litedramcore_roundrobin1_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank2_lock & (builder_litedramcore_litedramcore_roundrobin2_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank3_lock & (builder_litedramcore_litedramcore_roundrobin3_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank4_lock & (builder_litedramcore_litedramcore_roundrobin4_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank6_lock & (builder_litedramcore_litedramcore_roundrobin6_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank7_lock & (builder_litedramcore_litedramcore_roundrobin7_grant == 1'd1))))) & main_user_port_port_cmd_valid);
        end
    endcase
end
always @(*) begin
    builder_rhs_array_muxed38 <= 22'd0;
    case (builder_litedramcore_litedramcore_roundrobin6_grant)
        1'd0: begin
            builder_rhs_array_muxed38 <= {main_litedramcore_port_cmd_payload_addr[24:10], main_litedramcore_port_cmd_payload_addr[6:0]};
        end
        default: begin
            builder_rhs_array_muxed38 <= {main_user_port_port_cmd_payload_addr[24:10], main_user_port_port_cmd_payload_addr[6:0]};
        end
    endcase
end
always @(*) begin
    builder_rhs_array_muxed39 <= 1'd0;
    case (builder_litedramcore_litedramcore_roundrobin6_grant)
        1'd0: begin
            builder_rhs_array_muxed39 <= main_litedramcore_port_cmd_payload_we;
        end
        default: begin
            builder_rhs_array_muxed39 <= main_user_port_port_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    builder_rhs_array_muxed40 <= 1'd0;
    case (builder_litedramcore_litedramcore_roundrobin6_grant)
        1'd0: begin
            builder_rhs_array_muxed40 <= (((main_litedramcore_port_cmd_payload_addr[9:7] == 3'd6) & (~(((((((builder_litedramcore_litedramcore_locked12 | (main_litedramcore_sdram_interface_bank0_lock & (builder_litedramcore_litedramcore_roundrobin0_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank1_lock & (builder_litedramcore_litedramcore_roundrobin1_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank2_lock & (builder_litedramcore_litedramcore_roundrobin2_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank3_lock & (builder_litedramcore_litedramcore_roundrobin3_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank4_lock & (builder_litedramcore_litedramcore_roundrobin4_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank5_lock & (builder_litedramcore_litedramcore_roundrobin5_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank7_lock & (builder_litedramcore_litedramcore_roundrobin7_grant == 1'd0))))) & main_litedramcore_port_cmd_valid);
        end
        default: begin
            builder_rhs_array_muxed40 <= (((main_user_port_port_cmd_payload_addr[9:7] == 3'd6) & (~(((((((builder_litedramcore_litedramcore_locked13 | (main_litedramcore_sdram_interface_bank0_lock & (builder_litedramcore_litedramcore_roundrobin0_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank1_lock & (builder_litedramcore_litedramcore_roundrobin1_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank2_lock & (builder_litedramcore_litedramcore_roundrobin2_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank3_lock & (builder_litedramcore_litedramcore_roundrobin3_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank4_lock & (builder_litedramcore_litedramcore_roundrobin4_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank5_lock & (builder_litedramcore_litedramcore_roundrobin5_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank7_lock & (builder_litedramcore_litedramcore_roundrobin7_grant == 1'd1))))) & main_user_port_port_cmd_valid);
        end
    endcase
end
always @(*) begin
    builder_rhs_array_muxed41 <= 22'd0;
    case (builder_litedramcore_litedramcore_roundrobin7_grant)
        1'd0: begin
            builder_rhs_array_muxed41 <= {main_litedramcore_port_cmd_payload_addr[24:10], main_litedramcore_port_cmd_payload_addr[6:0]};
        end
        default: begin
            builder_rhs_array_muxed41 <= {main_user_port_port_cmd_payload_addr[24:10], main_user_port_port_cmd_payload_addr[6:0]};
        end
    endcase
end
always @(*) begin
    builder_rhs_array_muxed42 <= 1'd0;
    case (builder_litedramcore_litedramcore_roundrobin7_grant)
        1'd0: begin
            builder_rhs_array_muxed42 <= main_litedramcore_port_cmd_payload_we;
        end
        default: begin
            builder_rhs_array_muxed42 <= main_user_port_port_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    builder_rhs_array_muxed43 <= 1'd0;
    case (builder_litedramcore_litedramcore_roundrobin7_grant)
        1'd0: begin
            builder_rhs_array_muxed43 <= (((main_litedramcore_port_cmd_payload_addr[9:7] == 3'd7) & (~(((((((builder_litedramcore_litedramcore_locked14 | (main_litedramcore_sdram_interface_bank0_lock & (builder_litedramcore_litedramcore_roundrobin0_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank1_lock & (builder_litedramcore_litedramcore_roundrobin1_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank2_lock & (builder_litedramcore_litedramcore_roundrobin2_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank3_lock & (builder_litedramcore_litedramcore_roundrobin3_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank4_lock & (builder_litedramcore_litedramcore_roundrobin4_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank5_lock & (builder_litedramcore_litedramcore_roundrobin5_grant == 1'd0))) | (main_litedramcore_sdram_interface_bank6_lock & (builder_litedramcore_litedramcore_roundrobin6_grant == 1'd0))))) & main_litedramcore_port_cmd_valid);
        end
        default: begin
            builder_rhs_array_muxed43 <= (((main_user_port_port_cmd_payload_addr[9:7] == 3'd7) & (~(((((((builder_litedramcore_litedramcore_locked15 | (main_litedramcore_sdram_interface_bank0_lock & (builder_litedramcore_litedramcore_roundrobin0_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank1_lock & (builder_litedramcore_litedramcore_roundrobin1_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank2_lock & (builder_litedramcore_litedramcore_roundrobin2_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank3_lock & (builder_litedramcore_litedramcore_roundrobin3_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank4_lock & (builder_litedramcore_litedramcore_roundrobin4_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank5_lock & (builder_litedramcore_litedramcore_roundrobin5_grant == 1'd1))) | (main_litedramcore_sdram_interface_bank6_lock & (builder_litedramcore_litedramcore_roundrobin6_grant == 1'd1))))) & main_user_port_port_cmd_valid);
        end
    endcase
end
always @(*) begin
    builder_array_muxed0 <= 3'd0;
    case (main_litedramcore_sdram_steerer_sel0)
        1'd0: begin
            builder_array_muxed0 <= main_litedramcore_sdram_nop_ba[2:0];
        end
        1'd1: begin
            builder_array_muxed0 <= main_litedramcore_sdram_choose_cmd_cmd_payload_ba[2:0];
        end
        2'd2: begin
            builder_array_muxed0 <= main_litedramcore_sdram_choose_req_cmd_payload_ba[2:0];
        end
        default: begin
            builder_array_muxed0 <= main_litedramcore_sdram_cmd_payload_ba[2:0];
        end
    endcase
end
always @(*) begin
    builder_array_muxed1 <= 15'd0;
    case (main_litedramcore_sdram_steerer_sel0)
        1'd0: begin
            builder_array_muxed1 <= main_litedramcore_sdram_nop_a;
        end
        1'd1: begin
            builder_array_muxed1 <= main_litedramcore_sdram_choose_cmd_cmd_payload_a;
        end
        2'd2: begin
            builder_array_muxed1 <= main_litedramcore_sdram_choose_req_cmd_payload_a;
        end
        default: begin
            builder_array_muxed1 <= main_litedramcore_sdram_cmd_payload_a;
        end
    endcase
end
always @(*) begin
    builder_array_muxed2 <= 1'd0;
    case (main_litedramcore_sdram_steerer_sel0)
        1'd0: begin
            builder_array_muxed2 <= 1'd0;
        end
        1'd1: begin
            builder_array_muxed2 <= ((main_litedramcore_sdram_choose_cmd_cmd_valid & main_litedramcore_sdram_choose_cmd_cmd_ready) & main_litedramcore_sdram_choose_cmd_cmd_payload_cas);
        end
        2'd2: begin
            builder_array_muxed2 <= ((main_litedramcore_sdram_choose_req_cmd_valid & main_litedramcore_sdram_choose_req_cmd_ready) & main_litedramcore_sdram_choose_req_cmd_payload_cas);
        end
        default: begin
            builder_array_muxed2 <= ((main_litedramcore_sdram_cmd_valid & main_litedramcore_sdram_cmd_ready) & main_litedramcore_sdram_cmd_payload_cas);
        end
    endcase
end
always @(*) begin
    builder_array_muxed3 <= 1'd0;
    case (main_litedramcore_sdram_steerer_sel0)
        1'd0: begin
            builder_array_muxed3 <= 1'd0;
        end
        1'd1: begin
            builder_array_muxed3 <= ((main_litedramcore_sdram_choose_cmd_cmd_valid & main_litedramcore_sdram_choose_cmd_cmd_ready) & main_litedramcore_sdram_choose_cmd_cmd_payload_ras);
        end
        2'd2: begin
            builder_array_muxed3 <= ((main_litedramcore_sdram_choose_req_cmd_valid & main_litedramcore_sdram_choose_req_cmd_ready) & main_litedramcore_sdram_choose_req_cmd_payload_ras);
        end
        default: begin
            builder_array_muxed3 <= ((main_litedramcore_sdram_cmd_valid & main_litedramcore_sdram_cmd_ready) & main_litedramcore_sdram_cmd_payload_ras);
        end
    endcase
end
always @(*) begin
    builder_array_muxed4 <= 1'd0;
    case (main_litedramcore_sdram_steerer_sel0)
        1'd0: begin
            builder_array_muxed4 <= 1'd0;
        end
        1'd1: begin
            builder_array_muxed4 <= ((main_litedramcore_sdram_choose_cmd_cmd_valid & main_litedramcore_sdram_choose_cmd_cmd_ready) & main_litedramcore_sdram_choose_cmd_cmd_payload_we);
        end
        2'd2: begin
            builder_array_muxed4 <= ((main_litedramcore_sdram_choose_req_cmd_valid & main_litedramcore_sdram_choose_req_cmd_ready) & main_litedramcore_sdram_choose_req_cmd_payload_we);
        end
        default: begin
            builder_array_muxed4 <= ((main_litedramcore_sdram_cmd_valid & main_litedramcore_sdram_cmd_ready) & main_litedramcore_sdram_cmd_payload_we);
        end
    endcase
end
always @(*) begin
    builder_array_muxed5 <= 1'd0;
    case (main_litedramcore_sdram_steerer_sel0)
        1'd0: begin
            builder_array_muxed5 <= 1'd0;
        end
        1'd1: begin
            builder_array_muxed5 <= ((main_litedramcore_sdram_choose_cmd_cmd_valid & main_litedramcore_sdram_choose_cmd_cmd_ready) & main_litedramcore_sdram_choose_cmd_cmd_payload_is_read);
        end
        2'd2: begin
            builder_array_muxed5 <= ((main_litedramcore_sdram_choose_req_cmd_valid & main_litedramcore_sdram_choose_req_cmd_ready) & main_litedramcore_sdram_choose_req_cmd_payload_is_read);
        end
        default: begin
            builder_array_muxed5 <= ((main_litedramcore_sdram_cmd_valid & main_litedramcore_sdram_cmd_ready) & main_litedramcore_sdram_cmd_payload_is_read);
        end
    endcase
end
always @(*) begin
    builder_array_muxed6 <= 1'd0;
    case (main_litedramcore_sdram_steerer_sel0)
        1'd0: begin
            builder_array_muxed6 <= 1'd0;
        end
        1'd1: begin
            builder_array_muxed6 <= ((main_litedramcore_sdram_choose_cmd_cmd_valid & main_litedramcore_sdram_choose_cmd_cmd_ready) & main_litedramcore_sdram_choose_cmd_cmd_payload_is_write);
        end
        2'd2: begin
            builder_array_muxed6 <= ((main_litedramcore_sdram_choose_req_cmd_valid & main_litedramcore_sdram_choose_req_cmd_ready) & main_litedramcore_sdram_choose_req_cmd_payload_is_write);
        end
        default: begin
            builder_array_muxed6 <= ((main_litedramcore_sdram_cmd_valid & main_litedramcore_sdram_cmd_ready) & main_litedramcore_sdram_cmd_payload_is_write);
        end
    endcase
end
always @(*) begin
    builder_array_muxed7 <= 3'd0;
    case (main_litedramcore_sdram_steerer_sel1)
        1'd0: begin
            builder_array_muxed7 <= main_litedramcore_sdram_nop_ba[2:0];
        end
        1'd1: begin
            builder_array_muxed7 <= main_litedramcore_sdram_choose_cmd_cmd_payload_ba[2:0];
        end
        2'd2: begin
            builder_array_muxed7 <= main_litedramcore_sdram_choose_req_cmd_payload_ba[2:0];
        end
        default: begin
            builder_array_muxed7 <= main_litedramcore_sdram_cmd_payload_ba[2:0];
        end
    endcase
end
always @(*) begin
    builder_array_muxed8 <= 15'd0;
    case (main_litedramcore_sdram_steerer_sel1)
        1'd0: begin
            builder_array_muxed8 <= main_litedramcore_sdram_nop_a;
        end
        1'd1: begin
            builder_array_muxed8 <= main_litedramcore_sdram_choose_cmd_cmd_payload_a;
        end
        2'd2: begin
            builder_array_muxed8 <= main_litedramcore_sdram_choose_req_cmd_payload_a;
        end
        default: begin
            builder_array_muxed8 <= main_litedramcore_sdram_cmd_payload_a;
        end
    endcase
end
always @(*) begin
    builder_array_muxed9 <= 1'd0;
    case (main_litedramcore_sdram_steerer_sel1)
        1'd0: begin
            builder_array_muxed9 <= 1'd0;
        end
        1'd1: begin
            builder_array_muxed9 <= ((main_litedramcore_sdram_choose_cmd_cmd_valid & main_litedramcore_sdram_choose_cmd_cmd_ready) & main_litedramcore_sdram_choose_cmd_cmd_payload_cas);
        end
        2'd2: begin
            builder_array_muxed9 <= ((main_litedramcore_sdram_choose_req_cmd_valid & main_litedramcore_sdram_choose_req_cmd_ready) & main_litedramcore_sdram_choose_req_cmd_payload_cas);
        end
        default: begin
            builder_array_muxed9 <= ((main_litedramcore_sdram_cmd_valid & main_litedramcore_sdram_cmd_ready) & main_litedramcore_sdram_cmd_payload_cas);
        end
    endcase
end
always @(*) begin
    builder_array_muxed10 <= 1'd0;
    case (main_litedramcore_sdram_steerer_sel1)
        1'd0: begin
            builder_array_muxed10 <= 1'd0;
        end
        1'd1: begin
            builder_array_muxed10 <= ((main_litedramcore_sdram_choose_cmd_cmd_valid & main_litedramcore_sdram_choose_cmd_cmd_ready) & main_litedramcore_sdram_choose_cmd_cmd_payload_ras);
        end
        2'd2: begin
            builder_array_muxed10 <= ((main_litedramcore_sdram_choose_req_cmd_valid & main_litedramcore_sdram_choose_req_cmd_ready) & main_litedramcore_sdram_choose_req_cmd_payload_ras);
        end
        default: begin
            builder_array_muxed10 <= ((main_litedramcore_sdram_cmd_valid & main_litedramcore_sdram_cmd_ready) & main_litedramcore_sdram_cmd_payload_ras);
        end
    endcase
end
always @(*) begin
    builder_array_muxed11 <= 1'd0;
    case (main_litedramcore_sdram_steerer_sel1)
        1'd0: begin
            builder_array_muxed11 <= 1'd0;
        end
        1'd1: begin
            builder_array_muxed11 <= ((main_litedramcore_sdram_choose_cmd_cmd_valid & main_litedramcore_sdram_choose_cmd_cmd_ready) & main_litedramcore_sdram_choose_cmd_cmd_payload_we);
        end
        2'd2: begin
            builder_array_muxed11 <= ((main_litedramcore_sdram_choose_req_cmd_valid & main_litedramcore_sdram_choose_req_cmd_ready) & main_litedramcore_sdram_choose_req_cmd_payload_we);
        end
        default: begin
            builder_array_muxed11 <= ((main_litedramcore_sdram_cmd_valid & main_litedramcore_sdram_cmd_ready) & main_litedramcore_sdram_cmd_payload_we);
        end
    endcase
end
always @(*) begin
    builder_array_muxed12 <= 1'd0;
    case (main_litedramcore_sdram_steerer_sel1)
        1'd0: begin
            builder_array_muxed12 <= 1'd0;
        end
        1'd1: begin
            builder_array_muxed12 <= ((main_litedramcore_sdram_choose_cmd_cmd_valid & main_litedramcore_sdram_choose_cmd_cmd_ready) & main_litedramcore_sdram_choose_cmd_cmd_payload_is_read);
        end
        2'd2: begin
            builder_array_muxed12 <= ((main_litedramcore_sdram_choose_req_cmd_valid & main_litedramcore_sdram_choose_req_cmd_ready) & main_litedramcore_sdram_choose_req_cmd_payload_is_read);
        end
        default: begin
            builder_array_muxed12 <= ((main_litedramcore_sdram_cmd_valid & main_litedramcore_sdram_cmd_ready) & main_litedramcore_sdram_cmd_payload_is_read);
        end
    endcase
end
always @(*) begin
    builder_array_muxed13 <= 1'd0;
    case (main_litedramcore_sdram_steerer_sel1)
        1'd0: begin
            builder_array_muxed13 <= 1'd0;
        end
        1'd1: begin
            builder_array_muxed13 <= ((main_litedramcore_sdram_choose_cmd_cmd_valid & main_litedramcore_sdram_choose_cmd_cmd_ready) & main_litedramcore_sdram_choose_cmd_cmd_payload_is_write);
        end
        2'd2: begin
            builder_array_muxed13 <= ((main_litedramcore_sdram_choose_req_cmd_valid & main_litedramcore_sdram_choose_req_cmd_ready) & main_litedramcore_sdram_choose_req_cmd_payload_is_write);
        end
        default: begin
            builder_array_muxed13 <= ((main_litedramcore_sdram_cmd_valid & main_litedramcore_sdram_cmd_ready) & main_litedramcore_sdram_cmd_payload_is_write);
        end
    endcase
end
always @(*) begin
    builder_array_muxed14 <= 3'd0;
    case (main_litedramcore_sdram_steerer_sel2)
        1'd0: begin
            builder_array_muxed14 <= main_litedramcore_sdram_nop_ba[2:0];
        end
        1'd1: begin
            builder_array_muxed14 <= main_litedramcore_sdram_choose_cmd_cmd_payload_ba[2:0];
        end
        2'd2: begin
            builder_array_muxed14 <= main_litedramcore_sdram_choose_req_cmd_payload_ba[2:0];
        end
        default: begin
            builder_array_muxed14 <= main_litedramcore_sdram_cmd_payload_ba[2:0];
        end
    endcase
end
always @(*) begin
    builder_array_muxed15 <= 15'd0;
    case (main_litedramcore_sdram_steerer_sel2)
        1'd0: begin
            builder_array_muxed15 <= main_litedramcore_sdram_nop_a;
        end
        1'd1: begin
            builder_array_muxed15 <= main_litedramcore_sdram_choose_cmd_cmd_payload_a;
        end
        2'd2: begin
            builder_array_muxed15 <= main_litedramcore_sdram_choose_req_cmd_payload_a;
        end
        default: begin
            builder_array_muxed15 <= main_litedramcore_sdram_cmd_payload_a;
        end
    endcase
end
always @(*) begin
    builder_array_muxed16 <= 1'd0;
    case (main_litedramcore_sdram_steerer_sel2)
        1'd0: begin
            builder_array_muxed16 <= 1'd0;
        end
        1'd1: begin
            builder_array_muxed16 <= ((main_litedramcore_sdram_choose_cmd_cmd_valid & main_litedramcore_sdram_choose_cmd_cmd_ready) & main_litedramcore_sdram_choose_cmd_cmd_payload_cas);
        end
        2'd2: begin
            builder_array_muxed16 <= ((main_litedramcore_sdram_choose_req_cmd_valid & main_litedramcore_sdram_choose_req_cmd_ready) & main_litedramcore_sdram_choose_req_cmd_payload_cas);
        end
        default: begin
            builder_array_muxed16 <= ((main_litedramcore_sdram_cmd_valid & main_litedramcore_sdram_cmd_ready) & main_litedramcore_sdram_cmd_payload_cas);
        end
    endcase
end
always @(*) begin
    builder_array_muxed17 <= 1'd0;
    case (main_litedramcore_sdram_steerer_sel2)
        1'd0: begin
            builder_array_muxed17 <= 1'd0;
        end
        1'd1: begin
            builder_array_muxed17 <= ((main_litedramcore_sdram_choose_cmd_cmd_valid & main_litedramcore_sdram_choose_cmd_cmd_ready) & main_litedramcore_sdram_choose_cmd_cmd_payload_ras);
        end
        2'd2: begin
            builder_array_muxed17 <= ((main_litedramcore_sdram_choose_req_cmd_valid & main_litedramcore_sdram_choose_req_cmd_ready) & main_litedramcore_sdram_choose_req_cmd_payload_ras);
        end
        default: begin
            builder_array_muxed17 <= ((main_litedramcore_sdram_cmd_valid & main_litedramcore_sdram_cmd_ready) & main_litedramcore_sdram_cmd_payload_ras);
        end
    endcase
end
always @(*) begin
    builder_array_muxed18 <= 1'd0;
    case (main_litedramcore_sdram_steerer_sel2)
        1'd0: begin
            builder_array_muxed18 <= 1'd0;
        end
        1'd1: begin
            builder_array_muxed18 <= ((main_litedramcore_sdram_choose_cmd_cmd_valid & main_litedramcore_sdram_choose_cmd_cmd_ready) & main_litedramcore_sdram_choose_cmd_cmd_payload_we);
        end
        2'd2: begin
            builder_array_muxed18 <= ((main_litedramcore_sdram_choose_req_cmd_valid & main_litedramcore_sdram_choose_req_cmd_ready) & main_litedramcore_sdram_choose_req_cmd_payload_we);
        end
        default: begin
            builder_array_muxed18 <= ((main_litedramcore_sdram_cmd_valid & main_litedramcore_sdram_cmd_ready) & main_litedramcore_sdram_cmd_payload_we);
        end
    endcase
end
always @(*) begin
    builder_array_muxed19 <= 1'd0;
    case (main_litedramcore_sdram_steerer_sel2)
        1'd0: begin
            builder_array_muxed19 <= 1'd0;
        end
        1'd1: begin
            builder_array_muxed19 <= ((main_litedramcore_sdram_choose_cmd_cmd_valid & main_litedramcore_sdram_choose_cmd_cmd_ready) & main_litedramcore_sdram_choose_cmd_cmd_payload_is_read);
        end
        2'd2: begin
            builder_array_muxed19 <= ((main_litedramcore_sdram_choose_req_cmd_valid & main_litedramcore_sdram_choose_req_cmd_ready) & main_litedramcore_sdram_choose_req_cmd_payload_is_read);
        end
        default: begin
            builder_array_muxed19 <= ((main_litedramcore_sdram_cmd_valid & main_litedramcore_sdram_cmd_ready) & main_litedramcore_sdram_cmd_payload_is_read);
        end
    endcase
end
always @(*) begin
    builder_array_muxed20 <= 1'd0;
    case (main_litedramcore_sdram_steerer_sel2)
        1'd0: begin
            builder_array_muxed20 <= 1'd0;
        end
        1'd1: begin
            builder_array_muxed20 <= ((main_litedramcore_sdram_choose_cmd_cmd_valid & main_litedramcore_sdram_choose_cmd_cmd_ready) & main_litedramcore_sdram_choose_cmd_cmd_payload_is_write);
        end
        2'd2: begin
            builder_array_muxed20 <= ((main_litedramcore_sdram_choose_req_cmd_valid & main_litedramcore_sdram_choose_req_cmd_ready) & main_litedramcore_sdram_choose_req_cmd_payload_is_write);
        end
        default: begin
            builder_array_muxed20 <= ((main_litedramcore_sdram_cmd_valid & main_litedramcore_sdram_cmd_ready) & main_litedramcore_sdram_cmd_payload_is_write);
        end
    endcase
end
always @(*) begin
    builder_array_muxed21 <= 3'd0;
    case (main_litedramcore_sdram_steerer_sel3)
        1'd0: begin
            builder_array_muxed21 <= main_litedramcore_sdram_nop_ba[2:0];
        end
        1'd1: begin
            builder_array_muxed21 <= main_litedramcore_sdram_choose_cmd_cmd_payload_ba[2:0];
        end
        2'd2: begin
            builder_array_muxed21 <= main_litedramcore_sdram_choose_req_cmd_payload_ba[2:0];
        end
        default: begin
            builder_array_muxed21 <= main_litedramcore_sdram_cmd_payload_ba[2:0];
        end
    endcase
end
always @(*) begin
    builder_array_muxed22 <= 15'd0;
    case (main_litedramcore_sdram_steerer_sel3)
        1'd0: begin
            builder_array_muxed22 <= main_litedramcore_sdram_nop_a;
        end
        1'd1: begin
            builder_array_muxed22 <= main_litedramcore_sdram_choose_cmd_cmd_payload_a;
        end
        2'd2: begin
            builder_array_muxed22 <= main_litedramcore_sdram_choose_req_cmd_payload_a;
        end
        default: begin
            builder_array_muxed22 <= main_litedramcore_sdram_cmd_payload_a;
        end
    endcase
end
always @(*) begin
    builder_array_muxed23 <= 1'd0;
    case (main_litedramcore_sdram_steerer_sel3)
        1'd0: begin
            builder_array_muxed23 <= 1'd0;
        end
        1'd1: begin
            builder_array_muxed23 <= ((main_litedramcore_sdram_choose_cmd_cmd_valid & main_litedramcore_sdram_choose_cmd_cmd_ready) & main_litedramcore_sdram_choose_cmd_cmd_payload_cas);
        end
        2'd2: begin
            builder_array_muxed23 <= ((main_litedramcore_sdram_choose_req_cmd_valid & main_litedramcore_sdram_choose_req_cmd_ready) & main_litedramcore_sdram_choose_req_cmd_payload_cas);
        end
        default: begin
            builder_array_muxed23 <= ((main_litedramcore_sdram_cmd_valid & main_litedramcore_sdram_cmd_ready) & main_litedramcore_sdram_cmd_payload_cas);
        end
    endcase
end
always @(*) begin
    builder_array_muxed24 <= 1'd0;
    case (main_litedramcore_sdram_steerer_sel3)
        1'd0: begin
            builder_array_muxed24 <= 1'd0;
        end
        1'd1: begin
            builder_array_muxed24 <= ((main_litedramcore_sdram_choose_cmd_cmd_valid & main_litedramcore_sdram_choose_cmd_cmd_ready) & main_litedramcore_sdram_choose_cmd_cmd_payload_ras);
        end
        2'd2: begin
            builder_array_muxed24 <= ((main_litedramcore_sdram_choose_req_cmd_valid & main_litedramcore_sdram_choose_req_cmd_ready) & main_litedramcore_sdram_choose_req_cmd_payload_ras);
        end
        default: begin
            builder_array_muxed24 <= ((main_litedramcore_sdram_cmd_valid & main_litedramcore_sdram_cmd_ready) & main_litedramcore_sdram_cmd_payload_ras);
        end
    endcase
end
always @(*) begin
    builder_array_muxed25 <= 1'd0;
    case (main_litedramcore_sdram_steerer_sel3)
        1'd0: begin
            builder_array_muxed25 <= 1'd0;
        end
        1'd1: begin
            builder_array_muxed25 <= ((main_litedramcore_sdram_choose_cmd_cmd_valid & main_litedramcore_sdram_choose_cmd_cmd_ready) & main_litedramcore_sdram_choose_cmd_cmd_payload_we);
        end
        2'd2: begin
            builder_array_muxed25 <= ((main_litedramcore_sdram_choose_req_cmd_valid & main_litedramcore_sdram_choose_req_cmd_ready) & main_litedramcore_sdram_choose_req_cmd_payload_we);
        end
        default: begin
            builder_array_muxed25 <= ((main_litedramcore_sdram_cmd_valid & main_litedramcore_sdram_cmd_ready) & main_litedramcore_sdram_cmd_payload_we);
        end
    endcase
end
always @(*) begin
    builder_array_muxed26 <= 1'd0;
    case (main_litedramcore_sdram_steerer_sel3)
        1'd0: begin
            builder_array_muxed26 <= 1'd0;
        end
        1'd1: begin
            builder_array_muxed26 <= ((main_litedramcore_sdram_choose_cmd_cmd_valid & main_litedramcore_sdram_choose_cmd_cmd_ready) & main_litedramcore_sdram_choose_cmd_cmd_payload_is_read);
        end
        2'd2: begin
            builder_array_muxed26 <= ((main_litedramcore_sdram_choose_req_cmd_valid & main_litedramcore_sdram_choose_req_cmd_ready) & main_litedramcore_sdram_choose_req_cmd_payload_is_read);
        end
        default: begin
            builder_array_muxed26 <= ((main_litedramcore_sdram_cmd_valid & main_litedramcore_sdram_cmd_ready) & main_litedramcore_sdram_cmd_payload_is_read);
        end
    endcase
end
always @(*) begin
    builder_array_muxed27 <= 1'd0;
    case (main_litedramcore_sdram_steerer_sel3)
        1'd0: begin
            builder_array_muxed27 <= 1'd0;
        end
        1'd1: begin
            builder_array_muxed27 <= ((main_litedramcore_sdram_choose_cmd_cmd_valid & main_litedramcore_sdram_choose_cmd_cmd_ready) & main_litedramcore_sdram_choose_cmd_cmd_payload_is_write);
        end
        2'd2: begin
            builder_array_muxed27 <= ((main_litedramcore_sdram_choose_req_cmd_valid & main_litedramcore_sdram_choose_req_cmd_ready) & main_litedramcore_sdram_choose_req_cmd_payload_is_write);
        end
        default: begin
            builder_array_muxed27 <= ((main_litedramcore_sdram_cmd_valid & main_litedramcore_sdram_cmd_ready) & main_litedramcore_sdram_cmd_payload_is_write);
        end
    endcase
end
assign main_rx_rx = builder_regs1;
assign builder_xilinxasyncresetsynchronizerimpl0 = (~main_locked);
assign builder_xilinxasyncresetsynchronizerimpl1 = (~main_locked);
assign builder_xilinxasyncresetsynchronizerimpl2 = (~main_locked);
assign builder_xilinxasyncresetsynchronizerimpl3 = (~main_locked);


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge iodelay_clk) begin
    if ((main_reset_counter != 1'd0)) begin
        main_reset_counter <= (main_reset_counter - 1'd1);
    end else begin
        main_ic_reset <= 1'd0;
    end
    if (iodelay_rst) begin
        main_reset_counter <= 4'd15;
        main_ic_reset <= 1'd1;
    end
end

always @(posedge sys_clk) begin
    main_user_enable <= (main_init_done_storage & (~main_init_error_storage));
    case (builder_grant)
        1'd0: begin
            if ((~builder_request[0])) begin
                if (builder_request[1]) begin
                    builder_grant <= 1'd1;
                end
            end
        end
        1'd1: begin
            if ((~builder_request[1])) begin
                if (builder_request[0]) begin
                    builder_grant <= 1'd0;
                end
            end
        end
    endcase
    builder_slave_sel_r <= builder_slave_sel;
    if (builder_wait) begin
        if ((~builder_done)) begin
            builder_count <= (builder_count - 1'd1);
        end
    end else begin
        builder_count <= 20'd1000000;
    end
    if ((main_litedramcore_bus_errors != 32'd4294967295)) begin
        if (main_litedramcore_bus_error) begin
            main_litedramcore_bus_errors <= (main_litedramcore_bus_errors + 1'd1);
        end
    end
    main_litedramcore_litedramcore_ram_bus_ack <= 1'd0;
    if (((main_litedramcore_litedramcore_ram_bus_cyc & main_litedramcore_litedramcore_ram_bus_stb) & ((~main_litedramcore_litedramcore_ram_bus_ack) | main_litedramcore_litedramcore_adr_burst))) begin
        main_litedramcore_litedramcore_ram_bus_ack <= 1'd1;
    end
    main_litedramcore_ram_bus_ram_bus_ack <= 1'd0;
    if (((main_litedramcore_ram_bus_ram_bus_cyc & main_litedramcore_ram_bus_ram_bus_stb) & ((~main_litedramcore_ram_bus_ram_bus_ack) | main_litedramcore_ram_adr_burst))) begin
        main_litedramcore_ram_bus_ram_bus_ack <= 1'd1;
    end
    if (main_litedramcore_en_storage) begin
        if ((main_litedramcore_value == 1'd0)) begin
            main_litedramcore_value <= main_litedramcore_reload_storage;
        end else begin
            main_litedramcore_value <= (main_litedramcore_value - 1'd1);
        end
    end else begin
        main_litedramcore_value <= main_litedramcore_load_storage;
    end
    if (main_litedramcore_update_value_re) begin
        main_litedramcore_value_status <= main_litedramcore_value;
    end
    if (main_litedramcore_zero_clear) begin
        main_litedramcore_zero_pending <= 1'd0;
    end
    main_litedramcore_zero_trigger_d <= main_litedramcore_zero_trigger;
    if ((main_litedramcore_zero_trigger & (~main_litedramcore_zero_trigger_d))) begin
        main_litedramcore_zero_pending <= 1'd1;
    end
    {main_tx_tick, main_tx_phase} <= 23'd4947802;
    if (main_tx_enable) begin
        {main_tx_tick, main_tx_phase} <= (main_tx_phase + 23'd4947802);
    end
    builder_litedramcore_rs232phytx_state <= builder_litedramcore_rs232phytx_next_state;
    if (main_tx_count_rs232phytx_next_value_ce0) begin
        main_tx_count <= main_tx_count_rs232phytx_next_value0;
    end
    if (main_obj_uart_tx_rs232phytx_next_value_ce1) begin
        uart_tx <= main_obj_uart_tx_rs232phytx_next_value1;
    end
    if (main_tx_data_rs232phytx_next_value_ce2) begin
        main_tx_data <= main_tx_data_rs232phytx_next_value2;
    end
    main_rx_rx_d <= main_rx_rx;
    {main_rx_tick, main_rx_phase} <= 32'd2147483648;
    if (main_rx_enable) begin
        {main_rx_tick, main_rx_phase} <= (main_rx_phase + 23'd4947802);
    end
    builder_litedramcore_rs232phyrx_state <= builder_litedramcore_rs232phyrx_next_state;
    if (main_rx_count_rs232phyrx_next_value_ce0) begin
        main_rx_count <= main_rx_count_rs232phyrx_next_value0;
    end
    if (main_rx_data_rs232phyrx_next_value_ce1) begin
        main_rx_data <= main_rx_data_rs232phyrx_next_value1;
    end
    if (main_uart_tx_clear) begin
        main_uart_tx_pending <= 1'd0;
    end
    main_uart_tx_trigger_d <= main_uart_tx_trigger;
    if ((main_uart_tx_trigger & (~main_uart_tx_trigger_d))) begin
        main_uart_tx_pending <= 1'd1;
    end
    if (main_uart_rx_clear) begin
        main_uart_rx_pending <= 1'd0;
    end
    main_uart_rx_trigger_d <= main_uart_rx_trigger;
    if ((main_uart_rx_trigger & (~main_uart_rx_trigger_d))) begin
        main_uart_rx_pending <= 1'd1;
    end
    if (main_uart_tx_fifo_syncfifo_re) begin
        main_uart_tx_fifo_readable <= 1'd1;
    end else begin
        if (main_uart_tx_fifo_re) begin
            main_uart_tx_fifo_readable <= 1'd0;
        end
    end
    if (((main_uart_tx_fifo_syncfifo_we & main_uart_tx_fifo_syncfifo_writable) & (~main_uart_tx_fifo_replace))) begin
        main_uart_tx_fifo_produce <= (main_uart_tx_fifo_produce + 1'd1);
    end
    if (main_uart_tx_fifo_do_read) begin
        main_uart_tx_fifo_consume <= (main_uart_tx_fifo_consume + 1'd1);
    end
    if (((main_uart_tx_fifo_syncfifo_we & main_uart_tx_fifo_syncfifo_writable) & (~main_uart_tx_fifo_replace))) begin
        if ((~main_uart_tx_fifo_do_read)) begin
            main_uart_tx_fifo_level0 <= (main_uart_tx_fifo_level0 + 1'd1);
        end
    end else begin
        if (main_uart_tx_fifo_do_read) begin
            main_uart_tx_fifo_level0 <= (main_uart_tx_fifo_level0 - 1'd1);
        end
    end
    if (main_uart_rx_fifo_syncfifo_re) begin
        main_uart_rx_fifo_readable <= 1'd1;
    end else begin
        if (main_uart_rx_fifo_re) begin
            main_uart_rx_fifo_readable <= 1'd0;
        end
    end
    if (((main_uart_rx_fifo_syncfifo_we & main_uart_rx_fifo_syncfifo_writable) & (~main_uart_rx_fifo_replace))) begin
        main_uart_rx_fifo_produce <= (main_uart_rx_fifo_produce + 1'd1);
    end
    if (main_uart_rx_fifo_do_read) begin
        main_uart_rx_fifo_consume <= (main_uart_rx_fifo_consume + 1'd1);
    end
    if (((main_uart_rx_fifo_syncfifo_we & main_uart_rx_fifo_syncfifo_writable) & (~main_uart_rx_fifo_replace))) begin
        if ((~main_uart_rx_fifo_do_read)) begin
            main_uart_rx_fifo_level0 <= (main_uart_rx_fifo_level0 + 1'd1);
        end
    end else begin
        if (main_uart_rx_fifo_do_read) begin
            main_uart_rx_fifo_level0 <= (main_uart_rx_fifo_level0 - 1'd1);
        end
    end
    main_a7ddrphy_dqs_oe_delay_tappeddelayline_tappeddelayline0 <= main_a7ddrphy_dqs_oe_delay_tappeddelayline;
    main_a7ddrphy_dqs_oe_delay_tappeddelayline_tappeddelayline1 <= main_a7ddrphy_dqs_oe_delay_tappeddelayline_tappeddelayline0;
    main_a7ddrphy_dqspattern_o1 <= main_a7ddrphy_dqspattern_o0;
    if ((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip0_value0 <= (main_a7ddrphy_bitslip0_value0 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip0_value0 <= 3'd7;
    end
    main_a7ddrphy_bitslip0_r0 <= {main_a7ddrphy_dqspattern_o1, main_a7ddrphy_bitslip0_r0[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip1_value0 <= (main_a7ddrphy_bitslip1_value0 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip1_value0 <= 3'd7;
    end
    main_a7ddrphy_bitslip1_r0 <= {main_a7ddrphy_dqspattern_o1, main_a7ddrphy_bitslip1_r0[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip0_value1 <= (main_a7ddrphy_bitslip0_value1 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip0_value1 <= 3'd7;
    end
    main_a7ddrphy_bitslip0_r1 <= {{main_a7ddrphy_dfi_p3_wrdata_mask[2], main_a7ddrphy_dfi_p3_wrdata_mask[0], main_a7ddrphy_dfi_p2_wrdata_mask[2], main_a7ddrphy_dfi_p2_wrdata_mask[0], main_a7ddrphy_dfi_p1_wrdata_mask[2], main_a7ddrphy_dfi_p1_wrdata_mask[0], main_a7ddrphy_dfi_p0_wrdata_mask[2], main_a7ddrphy_dfi_p0_wrdata_mask[0]}, main_a7ddrphy_bitslip0_r1[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip1_value1 <= (main_a7ddrphy_bitslip1_value1 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip1_value1 <= 3'd7;
    end
    main_a7ddrphy_bitslip1_r1 <= {{main_a7ddrphy_dfi_p3_wrdata_mask[3], main_a7ddrphy_dfi_p3_wrdata_mask[1], main_a7ddrphy_dfi_p2_wrdata_mask[3], main_a7ddrphy_dfi_p2_wrdata_mask[1], main_a7ddrphy_dfi_p1_wrdata_mask[3], main_a7ddrphy_dfi_p1_wrdata_mask[1], main_a7ddrphy_dfi_p0_wrdata_mask[3], main_a7ddrphy_dfi_p0_wrdata_mask[1]}, main_a7ddrphy_bitslip1_r1[15:8]};
    main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline0 <= main_a7ddrphy_dq_oe_delay_tappeddelayline;
    main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1 <= main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline0;
    if ((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip0_value2 <= (main_a7ddrphy_bitslip0_value2 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip0_value2 <= 3'd7;
    end
    main_a7ddrphy_bitslip0_r2 <= {{main_a7ddrphy_dfi_p3_wrdata[16], main_a7ddrphy_dfi_p3_wrdata[0], main_a7ddrphy_dfi_p2_wrdata[16], main_a7ddrphy_dfi_p2_wrdata[0], main_a7ddrphy_dfi_p1_wrdata[16], main_a7ddrphy_dfi_p1_wrdata[0], main_a7ddrphy_dfi_p0_wrdata[16], main_a7ddrphy_dfi_p0_wrdata[0]}, main_a7ddrphy_bitslip0_r2[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip0_value3 <= (main_a7ddrphy_bitslip0_value3 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip0_value3 <= 3'd7;
    end
    main_a7ddrphy_bitslip0_r3 <= {main_a7ddrphy_bitslip03, main_a7ddrphy_bitslip0_r3[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip1_value2 <= (main_a7ddrphy_bitslip1_value2 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip1_value2 <= 3'd7;
    end
    main_a7ddrphy_bitslip1_r2 <= {{main_a7ddrphy_dfi_p3_wrdata[17], main_a7ddrphy_dfi_p3_wrdata[1], main_a7ddrphy_dfi_p2_wrdata[17], main_a7ddrphy_dfi_p2_wrdata[1], main_a7ddrphy_dfi_p1_wrdata[17], main_a7ddrphy_dfi_p1_wrdata[1], main_a7ddrphy_dfi_p0_wrdata[17], main_a7ddrphy_dfi_p0_wrdata[1]}, main_a7ddrphy_bitslip1_r2[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip1_value3 <= (main_a7ddrphy_bitslip1_value3 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip1_value3 <= 3'd7;
    end
    main_a7ddrphy_bitslip1_r3 <= {main_a7ddrphy_bitslip13, main_a7ddrphy_bitslip1_r3[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip2_value0 <= (main_a7ddrphy_bitslip2_value0 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip2_value0 <= 3'd7;
    end
    main_a7ddrphy_bitslip2_r0 <= {{main_a7ddrphy_dfi_p3_wrdata[18], main_a7ddrphy_dfi_p3_wrdata[2], main_a7ddrphy_dfi_p2_wrdata[18], main_a7ddrphy_dfi_p2_wrdata[2], main_a7ddrphy_dfi_p1_wrdata[18], main_a7ddrphy_dfi_p1_wrdata[2], main_a7ddrphy_dfi_p0_wrdata[18], main_a7ddrphy_dfi_p0_wrdata[2]}, main_a7ddrphy_bitslip2_r0[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip2_value1 <= (main_a7ddrphy_bitslip2_value1 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip2_value1 <= 3'd7;
    end
    main_a7ddrphy_bitslip2_r1 <= {main_a7ddrphy_bitslip21, main_a7ddrphy_bitslip2_r1[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip3_value0 <= (main_a7ddrphy_bitslip3_value0 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip3_value0 <= 3'd7;
    end
    main_a7ddrphy_bitslip3_r0 <= {{main_a7ddrphy_dfi_p3_wrdata[19], main_a7ddrphy_dfi_p3_wrdata[3], main_a7ddrphy_dfi_p2_wrdata[19], main_a7ddrphy_dfi_p2_wrdata[3], main_a7ddrphy_dfi_p1_wrdata[19], main_a7ddrphy_dfi_p1_wrdata[3], main_a7ddrphy_dfi_p0_wrdata[19], main_a7ddrphy_dfi_p0_wrdata[3]}, main_a7ddrphy_bitslip3_r0[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip3_value1 <= (main_a7ddrphy_bitslip3_value1 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip3_value1 <= 3'd7;
    end
    main_a7ddrphy_bitslip3_r1 <= {main_a7ddrphy_bitslip31, main_a7ddrphy_bitslip3_r1[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip4_value0 <= (main_a7ddrphy_bitslip4_value0 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip4_value0 <= 3'd7;
    end
    main_a7ddrphy_bitslip4_r0 <= {{main_a7ddrphy_dfi_p3_wrdata[20], main_a7ddrphy_dfi_p3_wrdata[4], main_a7ddrphy_dfi_p2_wrdata[20], main_a7ddrphy_dfi_p2_wrdata[4], main_a7ddrphy_dfi_p1_wrdata[20], main_a7ddrphy_dfi_p1_wrdata[4], main_a7ddrphy_dfi_p0_wrdata[20], main_a7ddrphy_dfi_p0_wrdata[4]}, main_a7ddrphy_bitslip4_r0[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip4_value1 <= (main_a7ddrphy_bitslip4_value1 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip4_value1 <= 3'd7;
    end
    main_a7ddrphy_bitslip4_r1 <= {main_a7ddrphy_bitslip41, main_a7ddrphy_bitslip4_r1[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip5_value0 <= (main_a7ddrphy_bitslip5_value0 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip5_value0 <= 3'd7;
    end
    main_a7ddrphy_bitslip5_r0 <= {{main_a7ddrphy_dfi_p3_wrdata[21], main_a7ddrphy_dfi_p3_wrdata[5], main_a7ddrphy_dfi_p2_wrdata[21], main_a7ddrphy_dfi_p2_wrdata[5], main_a7ddrphy_dfi_p1_wrdata[21], main_a7ddrphy_dfi_p1_wrdata[5], main_a7ddrphy_dfi_p0_wrdata[21], main_a7ddrphy_dfi_p0_wrdata[5]}, main_a7ddrphy_bitslip5_r0[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip5_value1 <= (main_a7ddrphy_bitslip5_value1 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip5_value1 <= 3'd7;
    end
    main_a7ddrphy_bitslip5_r1 <= {main_a7ddrphy_bitslip51, main_a7ddrphy_bitslip5_r1[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip6_value0 <= (main_a7ddrphy_bitslip6_value0 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip6_value0 <= 3'd7;
    end
    main_a7ddrphy_bitslip6_r0 <= {{main_a7ddrphy_dfi_p3_wrdata[22], main_a7ddrphy_dfi_p3_wrdata[6], main_a7ddrphy_dfi_p2_wrdata[22], main_a7ddrphy_dfi_p2_wrdata[6], main_a7ddrphy_dfi_p1_wrdata[22], main_a7ddrphy_dfi_p1_wrdata[6], main_a7ddrphy_dfi_p0_wrdata[22], main_a7ddrphy_dfi_p0_wrdata[6]}, main_a7ddrphy_bitslip6_r0[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip6_value1 <= (main_a7ddrphy_bitslip6_value1 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip6_value1 <= 3'd7;
    end
    main_a7ddrphy_bitslip6_r1 <= {main_a7ddrphy_bitslip61, main_a7ddrphy_bitslip6_r1[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip7_value0 <= (main_a7ddrphy_bitslip7_value0 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip7_value0 <= 3'd7;
    end
    main_a7ddrphy_bitslip7_r0 <= {{main_a7ddrphy_dfi_p3_wrdata[23], main_a7ddrphy_dfi_p3_wrdata[7], main_a7ddrphy_dfi_p2_wrdata[23], main_a7ddrphy_dfi_p2_wrdata[7], main_a7ddrphy_dfi_p1_wrdata[23], main_a7ddrphy_dfi_p1_wrdata[7], main_a7ddrphy_dfi_p0_wrdata[23], main_a7ddrphy_dfi_p0_wrdata[7]}, main_a7ddrphy_bitslip7_r0[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip7_value1 <= (main_a7ddrphy_bitslip7_value1 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip7_value1 <= 3'd7;
    end
    main_a7ddrphy_bitslip7_r1 <= {main_a7ddrphy_bitslip71, main_a7ddrphy_bitslip7_r1[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip8_value0 <= (main_a7ddrphy_bitslip8_value0 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip8_value0 <= 3'd7;
    end
    main_a7ddrphy_bitslip8_r0 <= {{main_a7ddrphy_dfi_p3_wrdata[24], main_a7ddrphy_dfi_p3_wrdata[8], main_a7ddrphy_dfi_p2_wrdata[24], main_a7ddrphy_dfi_p2_wrdata[8], main_a7ddrphy_dfi_p1_wrdata[24], main_a7ddrphy_dfi_p1_wrdata[8], main_a7ddrphy_dfi_p0_wrdata[24], main_a7ddrphy_dfi_p0_wrdata[8]}, main_a7ddrphy_bitslip8_r0[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip8_value1 <= (main_a7ddrphy_bitslip8_value1 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip8_value1 <= 3'd7;
    end
    main_a7ddrphy_bitslip8_r1 <= {main_a7ddrphy_bitslip81, main_a7ddrphy_bitslip8_r1[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip9_value0 <= (main_a7ddrphy_bitslip9_value0 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip9_value0 <= 3'd7;
    end
    main_a7ddrphy_bitslip9_r0 <= {{main_a7ddrphy_dfi_p3_wrdata[25], main_a7ddrphy_dfi_p3_wrdata[9], main_a7ddrphy_dfi_p2_wrdata[25], main_a7ddrphy_dfi_p2_wrdata[9], main_a7ddrphy_dfi_p1_wrdata[25], main_a7ddrphy_dfi_p1_wrdata[9], main_a7ddrphy_dfi_p0_wrdata[25], main_a7ddrphy_dfi_p0_wrdata[9]}, main_a7ddrphy_bitslip9_r0[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip9_value1 <= (main_a7ddrphy_bitslip9_value1 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip9_value1 <= 3'd7;
    end
    main_a7ddrphy_bitslip9_r1 <= {main_a7ddrphy_bitslip91, main_a7ddrphy_bitslip9_r1[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip10_value0 <= (main_a7ddrphy_bitslip10_value0 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip10_value0 <= 3'd7;
    end
    main_a7ddrphy_bitslip10_r0 <= {{main_a7ddrphy_dfi_p3_wrdata[26], main_a7ddrphy_dfi_p3_wrdata[10], main_a7ddrphy_dfi_p2_wrdata[26], main_a7ddrphy_dfi_p2_wrdata[10], main_a7ddrphy_dfi_p1_wrdata[26], main_a7ddrphy_dfi_p1_wrdata[10], main_a7ddrphy_dfi_p0_wrdata[26], main_a7ddrphy_dfi_p0_wrdata[10]}, main_a7ddrphy_bitslip10_r0[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip10_value1 <= (main_a7ddrphy_bitslip10_value1 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip10_value1 <= 3'd7;
    end
    main_a7ddrphy_bitslip10_r1 <= {main_a7ddrphy_bitslip101, main_a7ddrphy_bitslip10_r1[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip11_value0 <= (main_a7ddrphy_bitslip11_value0 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip11_value0 <= 3'd7;
    end
    main_a7ddrphy_bitslip11_r0 <= {{main_a7ddrphy_dfi_p3_wrdata[27], main_a7ddrphy_dfi_p3_wrdata[11], main_a7ddrphy_dfi_p2_wrdata[27], main_a7ddrphy_dfi_p2_wrdata[11], main_a7ddrphy_dfi_p1_wrdata[27], main_a7ddrphy_dfi_p1_wrdata[11], main_a7ddrphy_dfi_p0_wrdata[27], main_a7ddrphy_dfi_p0_wrdata[11]}, main_a7ddrphy_bitslip11_r0[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip11_value1 <= (main_a7ddrphy_bitslip11_value1 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip11_value1 <= 3'd7;
    end
    main_a7ddrphy_bitslip11_r1 <= {main_a7ddrphy_bitslip111, main_a7ddrphy_bitslip11_r1[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip12_value0 <= (main_a7ddrphy_bitslip12_value0 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip12_value0 <= 3'd7;
    end
    main_a7ddrphy_bitslip12_r0 <= {{main_a7ddrphy_dfi_p3_wrdata[28], main_a7ddrphy_dfi_p3_wrdata[12], main_a7ddrphy_dfi_p2_wrdata[28], main_a7ddrphy_dfi_p2_wrdata[12], main_a7ddrphy_dfi_p1_wrdata[28], main_a7ddrphy_dfi_p1_wrdata[12], main_a7ddrphy_dfi_p0_wrdata[28], main_a7ddrphy_dfi_p0_wrdata[12]}, main_a7ddrphy_bitslip12_r0[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip12_value1 <= (main_a7ddrphy_bitslip12_value1 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip12_value1 <= 3'd7;
    end
    main_a7ddrphy_bitslip12_r1 <= {main_a7ddrphy_bitslip121, main_a7ddrphy_bitslip12_r1[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip13_value0 <= (main_a7ddrphy_bitslip13_value0 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip13_value0 <= 3'd7;
    end
    main_a7ddrphy_bitslip13_r0 <= {{main_a7ddrphy_dfi_p3_wrdata[29], main_a7ddrphy_dfi_p3_wrdata[13], main_a7ddrphy_dfi_p2_wrdata[29], main_a7ddrphy_dfi_p2_wrdata[13], main_a7ddrphy_dfi_p1_wrdata[29], main_a7ddrphy_dfi_p1_wrdata[13], main_a7ddrphy_dfi_p0_wrdata[29], main_a7ddrphy_dfi_p0_wrdata[13]}, main_a7ddrphy_bitslip13_r0[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip13_value1 <= (main_a7ddrphy_bitslip13_value1 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip13_value1 <= 3'd7;
    end
    main_a7ddrphy_bitslip13_r1 <= {main_a7ddrphy_bitslip131, main_a7ddrphy_bitslip13_r1[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip14_value0 <= (main_a7ddrphy_bitslip14_value0 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip14_value0 <= 3'd7;
    end
    main_a7ddrphy_bitslip14_r0 <= {{main_a7ddrphy_dfi_p3_wrdata[30], main_a7ddrphy_dfi_p3_wrdata[14], main_a7ddrphy_dfi_p2_wrdata[30], main_a7ddrphy_dfi_p2_wrdata[14], main_a7ddrphy_dfi_p1_wrdata[30], main_a7ddrphy_dfi_p1_wrdata[14], main_a7ddrphy_dfi_p0_wrdata[30], main_a7ddrphy_dfi_p0_wrdata[14]}, main_a7ddrphy_bitslip14_r0[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip14_value1 <= (main_a7ddrphy_bitslip14_value1 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip14_value1 <= 3'd7;
    end
    main_a7ddrphy_bitslip14_r1 <= {main_a7ddrphy_bitslip141, main_a7ddrphy_bitslip14_r1[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_wdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip15_value0 <= (main_a7ddrphy_bitslip15_value0 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_wdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip15_value0 <= 3'd7;
    end
    main_a7ddrphy_bitslip15_r0 <= {{main_a7ddrphy_dfi_p3_wrdata[31], main_a7ddrphy_dfi_p3_wrdata[15], main_a7ddrphy_dfi_p2_wrdata[31], main_a7ddrphy_dfi_p2_wrdata[15], main_a7ddrphy_dfi_p1_wrdata[31], main_a7ddrphy_dfi_p1_wrdata[15], main_a7ddrphy_dfi_p0_wrdata[31], main_a7ddrphy_dfi_p0_wrdata[15]}, main_a7ddrphy_bitslip15_r0[15:8]};
    if ((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_bitslip_re)) begin
        main_a7ddrphy_bitslip15_value1 <= (main_a7ddrphy_bitslip15_value1 + 1'd1);
    end
    if (((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_bitslip_rst_re) | main_a7ddrphy_rst_storage)) begin
        main_a7ddrphy_bitslip15_value1 <= 3'd7;
    end
    main_a7ddrphy_bitslip15_r1 <= {main_a7ddrphy_bitslip151, main_a7ddrphy_bitslip15_r1[15:8]};
    main_a7ddrphy_rddata_en_tappeddelayline0 <= (((main_a7ddrphy_dfi_p0_rddata_en | main_a7ddrphy_dfi_p1_rddata_en) | main_a7ddrphy_dfi_p2_rddata_en) | main_a7ddrphy_dfi_p3_rddata_en);
    main_a7ddrphy_rddata_en_tappeddelayline1 <= main_a7ddrphy_rddata_en_tappeddelayline0;
    main_a7ddrphy_rddata_en_tappeddelayline2 <= main_a7ddrphy_rddata_en_tappeddelayline1;
    main_a7ddrphy_rddata_en_tappeddelayline3 <= main_a7ddrphy_rddata_en_tappeddelayline2;
    main_a7ddrphy_rddata_en_tappeddelayline4 <= main_a7ddrphy_rddata_en_tappeddelayline3;
    main_a7ddrphy_rddata_en_tappeddelayline5 <= main_a7ddrphy_rddata_en_tappeddelayline4;
    main_a7ddrphy_rddata_en_tappeddelayline6 <= main_a7ddrphy_rddata_en_tappeddelayline5;
    main_a7ddrphy_rddata_en_tappeddelayline7 <= main_a7ddrphy_rddata_en_tappeddelayline6;
    main_a7ddrphy_wrdata_en_tappeddelayline0 <= (((main_a7ddrphy_dfi_p0_wrdata_en | main_a7ddrphy_dfi_p1_wrdata_en) | main_a7ddrphy_dfi_p2_wrdata_en) | main_a7ddrphy_dfi_p3_wrdata_en);
    main_a7ddrphy_wrdata_en_tappeddelayline1 <= main_a7ddrphy_wrdata_en_tappeddelayline0;
    main_a7ddrphy_wrdata_en_tappeddelayline2 <= main_a7ddrphy_wrdata_en_tappeddelayline1;
    if (main_litedramcore_sdram_csr_dfi_p0_rddata_valid) begin
        main_litedramcore_sdram_phaseinjector0_rddata_status <= main_litedramcore_sdram_csr_dfi_p0_rddata;
    end
    if (main_litedramcore_sdram_csr_dfi_p1_rddata_valid) begin
        main_litedramcore_sdram_phaseinjector1_rddata_status <= main_litedramcore_sdram_csr_dfi_p1_rddata;
    end
    if (main_litedramcore_sdram_csr_dfi_p2_rddata_valid) begin
        main_litedramcore_sdram_phaseinjector2_rddata_status <= main_litedramcore_sdram_csr_dfi_p2_rddata;
    end
    if (main_litedramcore_sdram_csr_dfi_p3_rddata_valid) begin
        main_litedramcore_sdram_phaseinjector3_rddata_status <= main_litedramcore_sdram_csr_dfi_p3_rddata;
    end
    if ((main_litedramcore_sdram_timer_wait & (~main_litedramcore_sdram_timer_done0))) begin
        main_litedramcore_sdram_timer_count1 <= (main_litedramcore_sdram_timer_count1 - 1'd1);
    end else begin
        main_litedramcore_sdram_timer_count1 <= 10'd781;
    end
    main_litedramcore_sdram_postponer_req_o <= 1'd0;
    if (main_litedramcore_sdram_postponer_req_i) begin
        main_litedramcore_sdram_postponer_count <= (main_litedramcore_sdram_postponer_count - 1'd1);
        if ((main_litedramcore_sdram_postponer_count == 1'd0)) begin
            main_litedramcore_sdram_postponer_count <= 1'd0;
            main_litedramcore_sdram_postponer_req_o <= 1'd1;
        end
    end
    if (main_litedramcore_sdram_sequencer_start0) begin
        main_litedramcore_sdram_sequencer_count <= 1'd0;
    end else begin
        if (main_litedramcore_sdram_sequencer_done1) begin
            if ((main_litedramcore_sdram_sequencer_count != 1'd0)) begin
                main_litedramcore_sdram_sequencer_count <= (main_litedramcore_sdram_sequencer_count - 1'd1);
            end
        end
    end
    main_litedramcore_sdram_cmd_payload_a <= 1'd0;
    main_litedramcore_sdram_cmd_payload_ba <= 1'd0;
    main_litedramcore_sdram_cmd_payload_cas <= 1'd0;
    main_litedramcore_sdram_cmd_payload_ras <= 1'd0;
    main_litedramcore_sdram_cmd_payload_we <= 1'd0;
    main_litedramcore_sdram_sequencer_done1 <= 1'd0;
    if ((main_litedramcore_sdram_sequencer_start1 & (main_litedramcore_sdram_sequencer_counter == 1'd0))) begin
        main_litedramcore_sdram_cmd_payload_a <= 11'd1024;
        main_litedramcore_sdram_cmd_payload_ba <= 1'd0;
        main_litedramcore_sdram_cmd_payload_cas <= 1'd0;
        main_litedramcore_sdram_cmd_payload_ras <= 1'd1;
        main_litedramcore_sdram_cmd_payload_we <= 1'd1;
    end
    if ((main_litedramcore_sdram_sequencer_counter == 2'd3)) begin
        main_litedramcore_sdram_cmd_payload_a <= 11'd1024;
        main_litedramcore_sdram_cmd_payload_ba <= 1'd0;
        main_litedramcore_sdram_cmd_payload_cas <= 1'd1;
        main_litedramcore_sdram_cmd_payload_ras <= 1'd1;
        main_litedramcore_sdram_cmd_payload_we <= 1'd0;
    end
    if ((main_litedramcore_sdram_sequencer_counter == 6'd55)) begin
        main_litedramcore_sdram_cmd_payload_a <= 1'd0;
        main_litedramcore_sdram_cmd_payload_ba <= 1'd0;
        main_litedramcore_sdram_cmd_payload_cas <= 1'd0;
        main_litedramcore_sdram_cmd_payload_ras <= 1'd0;
        main_litedramcore_sdram_cmd_payload_we <= 1'd0;
        main_litedramcore_sdram_sequencer_done1 <= 1'd1;
    end
    if ((main_litedramcore_sdram_sequencer_counter == 6'd55)) begin
        main_litedramcore_sdram_sequencer_counter <= 1'd0;
    end else begin
        if ((main_litedramcore_sdram_sequencer_counter != 1'd0)) begin
            main_litedramcore_sdram_sequencer_counter <= (main_litedramcore_sdram_sequencer_counter + 1'd1);
        end else begin
            if (main_litedramcore_sdram_sequencer_start1) begin
                main_litedramcore_sdram_sequencer_counter <= 1'd1;
            end
        end
    end
    if ((main_litedramcore_sdram_zqcs_timer_wait & (~main_litedramcore_sdram_zqcs_timer_done0))) begin
        main_litedramcore_sdram_zqcs_timer_count1 <= (main_litedramcore_sdram_zqcs_timer_count1 - 1'd1);
    end else begin
        main_litedramcore_sdram_zqcs_timer_count1 <= 27'd99999999;
    end
    main_litedramcore_sdram_zqcs_executer_done <= 1'd0;
    if ((main_litedramcore_sdram_zqcs_executer_start & (main_litedramcore_sdram_zqcs_executer_counter == 1'd0))) begin
        main_litedramcore_sdram_cmd_payload_a <= 11'd1024;
        main_litedramcore_sdram_cmd_payload_ba <= 1'd0;
        main_litedramcore_sdram_cmd_payload_cas <= 1'd0;
        main_litedramcore_sdram_cmd_payload_ras <= 1'd1;
        main_litedramcore_sdram_cmd_payload_we <= 1'd1;
    end
    if ((main_litedramcore_sdram_zqcs_executer_counter == 2'd3)) begin
        main_litedramcore_sdram_cmd_payload_a <= 1'd0;
        main_litedramcore_sdram_cmd_payload_ba <= 1'd0;
        main_litedramcore_sdram_cmd_payload_cas <= 1'd0;
        main_litedramcore_sdram_cmd_payload_ras <= 1'd0;
        main_litedramcore_sdram_cmd_payload_we <= 1'd1;
    end
    if ((main_litedramcore_sdram_zqcs_executer_counter == 5'd19)) begin
        main_litedramcore_sdram_cmd_payload_a <= 1'd0;
        main_litedramcore_sdram_cmd_payload_ba <= 1'd0;
        main_litedramcore_sdram_cmd_payload_cas <= 1'd0;
        main_litedramcore_sdram_cmd_payload_ras <= 1'd0;
        main_litedramcore_sdram_cmd_payload_we <= 1'd0;
        main_litedramcore_sdram_zqcs_executer_done <= 1'd1;
    end
    if ((main_litedramcore_sdram_zqcs_executer_counter == 5'd19)) begin
        main_litedramcore_sdram_zqcs_executer_counter <= 1'd0;
    end else begin
        if ((main_litedramcore_sdram_zqcs_executer_counter != 1'd0)) begin
            main_litedramcore_sdram_zqcs_executer_counter <= (main_litedramcore_sdram_zqcs_executer_counter + 1'd1);
        end else begin
            if (main_litedramcore_sdram_zqcs_executer_start) begin
                main_litedramcore_sdram_zqcs_executer_counter <= 1'd1;
            end
        end
    end
    builder_litedramcore_litedramcore_refresher_state <= builder_litedramcore_litedramcore_refresher_next_state;
    if (main_litedramcore_sdram_bankmachine0_row_close) begin
        main_litedramcore_sdram_bankmachine0_row_opened <= 1'd0;
    end else begin
        if (main_litedramcore_sdram_bankmachine0_row_open) begin
            main_litedramcore_sdram_bankmachine0_row_opened <= 1'd1;
            main_litedramcore_sdram_bankmachine0_row <= main_litedramcore_sdram_bankmachine0_source_source_payload_addr[21:7];
        end
    end
    if (((main_litedramcore_sdram_bankmachine0_syncfifo0_we & main_litedramcore_sdram_bankmachine0_syncfifo0_writable) & (~main_litedramcore_sdram_bankmachine0_replace))) begin
        main_litedramcore_sdram_bankmachine0_produce <= (main_litedramcore_sdram_bankmachine0_produce + 1'd1);
    end
    if (main_litedramcore_sdram_bankmachine0_do_read) begin
        main_litedramcore_sdram_bankmachine0_consume <= (main_litedramcore_sdram_bankmachine0_consume + 1'd1);
    end
    if (((main_litedramcore_sdram_bankmachine0_syncfifo0_we & main_litedramcore_sdram_bankmachine0_syncfifo0_writable) & (~main_litedramcore_sdram_bankmachine0_replace))) begin
        if ((~main_litedramcore_sdram_bankmachine0_do_read)) begin
            main_litedramcore_sdram_bankmachine0_level <= (main_litedramcore_sdram_bankmachine0_level + 1'd1);
        end
    end else begin
        if (main_litedramcore_sdram_bankmachine0_do_read) begin
            main_litedramcore_sdram_bankmachine0_level <= (main_litedramcore_sdram_bankmachine0_level - 1'd1);
        end
    end
    if (((~main_litedramcore_sdram_bankmachine0_pipe_valid_source_valid) | main_litedramcore_sdram_bankmachine0_pipe_valid_source_ready)) begin
        main_litedramcore_sdram_bankmachine0_pipe_valid_source_valid <= main_litedramcore_sdram_bankmachine0_pipe_valid_sink_valid;
        main_litedramcore_sdram_bankmachine0_pipe_valid_source_first <= main_litedramcore_sdram_bankmachine0_pipe_valid_sink_first;
        main_litedramcore_sdram_bankmachine0_pipe_valid_source_last <= main_litedramcore_sdram_bankmachine0_pipe_valid_sink_last;
        main_litedramcore_sdram_bankmachine0_pipe_valid_source_payload_we <= main_litedramcore_sdram_bankmachine0_pipe_valid_sink_payload_we;
        main_litedramcore_sdram_bankmachine0_pipe_valid_source_payload_addr <= main_litedramcore_sdram_bankmachine0_pipe_valid_sink_payload_addr;
    end
    if (main_litedramcore_sdram_bankmachine0_twtpcon_valid) begin
        main_litedramcore_sdram_bankmachine0_twtpcon_count <= 3'd5;
        if (1'd0) begin
            main_litedramcore_sdram_bankmachine0_twtpcon_ready <= 1'd1;
        end else begin
            main_litedramcore_sdram_bankmachine0_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~main_litedramcore_sdram_bankmachine0_twtpcon_ready)) begin
            main_litedramcore_sdram_bankmachine0_twtpcon_count <= (main_litedramcore_sdram_bankmachine0_twtpcon_count - 1'd1);
            if ((main_litedramcore_sdram_bankmachine0_twtpcon_count == 1'd1)) begin
                main_litedramcore_sdram_bankmachine0_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (main_litedramcore_sdram_bankmachine0_trccon_valid) begin
        main_litedramcore_sdram_bankmachine0_trccon_count <= 3'd5;
        if (1'd0) begin
            main_litedramcore_sdram_bankmachine0_trccon_ready <= 1'd1;
        end else begin
            main_litedramcore_sdram_bankmachine0_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~main_litedramcore_sdram_bankmachine0_trccon_ready)) begin
            main_litedramcore_sdram_bankmachine0_trccon_count <= (main_litedramcore_sdram_bankmachine0_trccon_count - 1'd1);
            if ((main_litedramcore_sdram_bankmachine0_trccon_count == 1'd1)) begin
                main_litedramcore_sdram_bankmachine0_trccon_ready <= 1'd1;
            end
        end
    end
    if (main_litedramcore_sdram_bankmachine0_trascon_valid) begin
        main_litedramcore_sdram_bankmachine0_trascon_count <= 3'd4;
        if (1'd0) begin
            main_litedramcore_sdram_bankmachine0_trascon_ready <= 1'd1;
        end else begin
            main_litedramcore_sdram_bankmachine0_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~main_litedramcore_sdram_bankmachine0_trascon_ready)) begin
            main_litedramcore_sdram_bankmachine0_trascon_count <= (main_litedramcore_sdram_bankmachine0_trascon_count - 1'd1);
            if ((main_litedramcore_sdram_bankmachine0_trascon_count == 1'd1)) begin
                main_litedramcore_sdram_bankmachine0_trascon_ready <= 1'd1;
            end
        end
    end
    builder_litedramcore_litedramcore_bankmachine0_state <= builder_litedramcore_litedramcore_bankmachine0_next_state;
    if (main_litedramcore_sdram_bankmachine1_row_close) begin
        main_litedramcore_sdram_bankmachine1_row_opened <= 1'd0;
    end else begin
        if (main_litedramcore_sdram_bankmachine1_row_open) begin
            main_litedramcore_sdram_bankmachine1_row_opened <= 1'd1;
            main_litedramcore_sdram_bankmachine1_row <= main_litedramcore_sdram_bankmachine1_source_source_payload_addr[21:7];
        end
    end
    if (((main_litedramcore_sdram_bankmachine1_syncfifo1_we & main_litedramcore_sdram_bankmachine1_syncfifo1_writable) & (~main_litedramcore_sdram_bankmachine1_replace))) begin
        main_litedramcore_sdram_bankmachine1_produce <= (main_litedramcore_sdram_bankmachine1_produce + 1'd1);
    end
    if (main_litedramcore_sdram_bankmachine1_do_read) begin
        main_litedramcore_sdram_bankmachine1_consume <= (main_litedramcore_sdram_bankmachine1_consume + 1'd1);
    end
    if (((main_litedramcore_sdram_bankmachine1_syncfifo1_we & main_litedramcore_sdram_bankmachine1_syncfifo1_writable) & (~main_litedramcore_sdram_bankmachine1_replace))) begin
        if ((~main_litedramcore_sdram_bankmachine1_do_read)) begin
            main_litedramcore_sdram_bankmachine1_level <= (main_litedramcore_sdram_bankmachine1_level + 1'd1);
        end
    end else begin
        if (main_litedramcore_sdram_bankmachine1_do_read) begin
            main_litedramcore_sdram_bankmachine1_level <= (main_litedramcore_sdram_bankmachine1_level - 1'd1);
        end
    end
    if (((~main_litedramcore_sdram_bankmachine1_pipe_valid_source_valid) | main_litedramcore_sdram_bankmachine1_pipe_valid_source_ready)) begin
        main_litedramcore_sdram_bankmachine1_pipe_valid_source_valid <= main_litedramcore_sdram_bankmachine1_pipe_valid_sink_valid;
        main_litedramcore_sdram_bankmachine1_pipe_valid_source_first <= main_litedramcore_sdram_bankmachine1_pipe_valid_sink_first;
        main_litedramcore_sdram_bankmachine1_pipe_valid_source_last <= main_litedramcore_sdram_bankmachine1_pipe_valid_sink_last;
        main_litedramcore_sdram_bankmachine1_pipe_valid_source_payload_we <= main_litedramcore_sdram_bankmachine1_pipe_valid_sink_payload_we;
        main_litedramcore_sdram_bankmachine1_pipe_valid_source_payload_addr <= main_litedramcore_sdram_bankmachine1_pipe_valid_sink_payload_addr;
    end
    if (main_litedramcore_sdram_bankmachine1_twtpcon_valid) begin
        main_litedramcore_sdram_bankmachine1_twtpcon_count <= 3'd5;
        if (1'd0) begin
            main_litedramcore_sdram_bankmachine1_twtpcon_ready <= 1'd1;
        end else begin
            main_litedramcore_sdram_bankmachine1_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~main_litedramcore_sdram_bankmachine1_twtpcon_ready)) begin
            main_litedramcore_sdram_bankmachine1_twtpcon_count <= (main_litedramcore_sdram_bankmachine1_twtpcon_count - 1'd1);
            if ((main_litedramcore_sdram_bankmachine1_twtpcon_count == 1'd1)) begin
                main_litedramcore_sdram_bankmachine1_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (main_litedramcore_sdram_bankmachine1_trccon_valid) begin
        main_litedramcore_sdram_bankmachine1_trccon_count <= 3'd5;
        if (1'd0) begin
            main_litedramcore_sdram_bankmachine1_trccon_ready <= 1'd1;
        end else begin
            main_litedramcore_sdram_bankmachine1_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~main_litedramcore_sdram_bankmachine1_trccon_ready)) begin
            main_litedramcore_sdram_bankmachine1_trccon_count <= (main_litedramcore_sdram_bankmachine1_trccon_count - 1'd1);
            if ((main_litedramcore_sdram_bankmachine1_trccon_count == 1'd1)) begin
                main_litedramcore_sdram_bankmachine1_trccon_ready <= 1'd1;
            end
        end
    end
    if (main_litedramcore_sdram_bankmachine1_trascon_valid) begin
        main_litedramcore_sdram_bankmachine1_trascon_count <= 3'd4;
        if (1'd0) begin
            main_litedramcore_sdram_bankmachine1_trascon_ready <= 1'd1;
        end else begin
            main_litedramcore_sdram_bankmachine1_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~main_litedramcore_sdram_bankmachine1_trascon_ready)) begin
            main_litedramcore_sdram_bankmachine1_trascon_count <= (main_litedramcore_sdram_bankmachine1_trascon_count - 1'd1);
            if ((main_litedramcore_sdram_bankmachine1_trascon_count == 1'd1)) begin
                main_litedramcore_sdram_bankmachine1_trascon_ready <= 1'd1;
            end
        end
    end
    builder_litedramcore_litedramcore_bankmachine1_state <= builder_litedramcore_litedramcore_bankmachine1_next_state;
    if (main_litedramcore_sdram_bankmachine2_row_close) begin
        main_litedramcore_sdram_bankmachine2_row_opened <= 1'd0;
    end else begin
        if (main_litedramcore_sdram_bankmachine2_row_open) begin
            main_litedramcore_sdram_bankmachine2_row_opened <= 1'd1;
            main_litedramcore_sdram_bankmachine2_row <= main_litedramcore_sdram_bankmachine2_source_source_payload_addr[21:7];
        end
    end
    if (((main_litedramcore_sdram_bankmachine2_syncfifo2_we & main_litedramcore_sdram_bankmachine2_syncfifo2_writable) & (~main_litedramcore_sdram_bankmachine2_replace))) begin
        main_litedramcore_sdram_bankmachine2_produce <= (main_litedramcore_sdram_bankmachine2_produce + 1'd1);
    end
    if (main_litedramcore_sdram_bankmachine2_do_read) begin
        main_litedramcore_sdram_bankmachine2_consume <= (main_litedramcore_sdram_bankmachine2_consume + 1'd1);
    end
    if (((main_litedramcore_sdram_bankmachine2_syncfifo2_we & main_litedramcore_sdram_bankmachine2_syncfifo2_writable) & (~main_litedramcore_sdram_bankmachine2_replace))) begin
        if ((~main_litedramcore_sdram_bankmachine2_do_read)) begin
            main_litedramcore_sdram_bankmachine2_level <= (main_litedramcore_sdram_bankmachine2_level + 1'd1);
        end
    end else begin
        if (main_litedramcore_sdram_bankmachine2_do_read) begin
            main_litedramcore_sdram_bankmachine2_level <= (main_litedramcore_sdram_bankmachine2_level - 1'd1);
        end
    end
    if (((~main_litedramcore_sdram_bankmachine2_pipe_valid_source_valid) | main_litedramcore_sdram_bankmachine2_pipe_valid_source_ready)) begin
        main_litedramcore_sdram_bankmachine2_pipe_valid_source_valid <= main_litedramcore_sdram_bankmachine2_pipe_valid_sink_valid;
        main_litedramcore_sdram_bankmachine2_pipe_valid_source_first <= main_litedramcore_sdram_bankmachine2_pipe_valid_sink_first;
        main_litedramcore_sdram_bankmachine2_pipe_valid_source_last <= main_litedramcore_sdram_bankmachine2_pipe_valid_sink_last;
        main_litedramcore_sdram_bankmachine2_pipe_valid_source_payload_we <= main_litedramcore_sdram_bankmachine2_pipe_valid_sink_payload_we;
        main_litedramcore_sdram_bankmachine2_pipe_valid_source_payload_addr <= main_litedramcore_sdram_bankmachine2_pipe_valid_sink_payload_addr;
    end
    if (main_litedramcore_sdram_bankmachine2_twtpcon_valid) begin
        main_litedramcore_sdram_bankmachine2_twtpcon_count <= 3'd5;
        if (1'd0) begin
            main_litedramcore_sdram_bankmachine2_twtpcon_ready <= 1'd1;
        end else begin
            main_litedramcore_sdram_bankmachine2_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~main_litedramcore_sdram_bankmachine2_twtpcon_ready)) begin
            main_litedramcore_sdram_bankmachine2_twtpcon_count <= (main_litedramcore_sdram_bankmachine2_twtpcon_count - 1'd1);
            if ((main_litedramcore_sdram_bankmachine2_twtpcon_count == 1'd1)) begin
                main_litedramcore_sdram_bankmachine2_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (main_litedramcore_sdram_bankmachine2_trccon_valid) begin
        main_litedramcore_sdram_bankmachine2_trccon_count <= 3'd5;
        if (1'd0) begin
            main_litedramcore_sdram_bankmachine2_trccon_ready <= 1'd1;
        end else begin
            main_litedramcore_sdram_bankmachine2_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~main_litedramcore_sdram_bankmachine2_trccon_ready)) begin
            main_litedramcore_sdram_bankmachine2_trccon_count <= (main_litedramcore_sdram_bankmachine2_trccon_count - 1'd1);
            if ((main_litedramcore_sdram_bankmachine2_trccon_count == 1'd1)) begin
                main_litedramcore_sdram_bankmachine2_trccon_ready <= 1'd1;
            end
        end
    end
    if (main_litedramcore_sdram_bankmachine2_trascon_valid) begin
        main_litedramcore_sdram_bankmachine2_trascon_count <= 3'd4;
        if (1'd0) begin
            main_litedramcore_sdram_bankmachine2_trascon_ready <= 1'd1;
        end else begin
            main_litedramcore_sdram_bankmachine2_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~main_litedramcore_sdram_bankmachine2_trascon_ready)) begin
            main_litedramcore_sdram_bankmachine2_trascon_count <= (main_litedramcore_sdram_bankmachine2_trascon_count - 1'd1);
            if ((main_litedramcore_sdram_bankmachine2_trascon_count == 1'd1)) begin
                main_litedramcore_sdram_bankmachine2_trascon_ready <= 1'd1;
            end
        end
    end
    builder_litedramcore_litedramcore_bankmachine2_state <= builder_litedramcore_litedramcore_bankmachine2_next_state;
    if (main_litedramcore_sdram_bankmachine3_row_close) begin
        main_litedramcore_sdram_bankmachine3_row_opened <= 1'd0;
    end else begin
        if (main_litedramcore_sdram_bankmachine3_row_open) begin
            main_litedramcore_sdram_bankmachine3_row_opened <= 1'd1;
            main_litedramcore_sdram_bankmachine3_row <= main_litedramcore_sdram_bankmachine3_source_source_payload_addr[21:7];
        end
    end
    if (((main_litedramcore_sdram_bankmachine3_syncfifo3_we & main_litedramcore_sdram_bankmachine3_syncfifo3_writable) & (~main_litedramcore_sdram_bankmachine3_replace))) begin
        main_litedramcore_sdram_bankmachine3_produce <= (main_litedramcore_sdram_bankmachine3_produce + 1'd1);
    end
    if (main_litedramcore_sdram_bankmachine3_do_read) begin
        main_litedramcore_sdram_bankmachine3_consume <= (main_litedramcore_sdram_bankmachine3_consume + 1'd1);
    end
    if (((main_litedramcore_sdram_bankmachine3_syncfifo3_we & main_litedramcore_sdram_bankmachine3_syncfifo3_writable) & (~main_litedramcore_sdram_bankmachine3_replace))) begin
        if ((~main_litedramcore_sdram_bankmachine3_do_read)) begin
            main_litedramcore_sdram_bankmachine3_level <= (main_litedramcore_sdram_bankmachine3_level + 1'd1);
        end
    end else begin
        if (main_litedramcore_sdram_bankmachine3_do_read) begin
            main_litedramcore_sdram_bankmachine3_level <= (main_litedramcore_sdram_bankmachine3_level - 1'd1);
        end
    end
    if (((~main_litedramcore_sdram_bankmachine3_pipe_valid_source_valid) | main_litedramcore_sdram_bankmachine3_pipe_valid_source_ready)) begin
        main_litedramcore_sdram_bankmachine3_pipe_valid_source_valid <= main_litedramcore_sdram_bankmachine3_pipe_valid_sink_valid;
        main_litedramcore_sdram_bankmachine3_pipe_valid_source_first <= main_litedramcore_sdram_bankmachine3_pipe_valid_sink_first;
        main_litedramcore_sdram_bankmachine3_pipe_valid_source_last <= main_litedramcore_sdram_bankmachine3_pipe_valid_sink_last;
        main_litedramcore_sdram_bankmachine3_pipe_valid_source_payload_we <= main_litedramcore_sdram_bankmachine3_pipe_valid_sink_payload_we;
        main_litedramcore_sdram_bankmachine3_pipe_valid_source_payload_addr <= main_litedramcore_sdram_bankmachine3_pipe_valid_sink_payload_addr;
    end
    if (main_litedramcore_sdram_bankmachine3_twtpcon_valid) begin
        main_litedramcore_sdram_bankmachine3_twtpcon_count <= 3'd5;
        if (1'd0) begin
            main_litedramcore_sdram_bankmachine3_twtpcon_ready <= 1'd1;
        end else begin
            main_litedramcore_sdram_bankmachine3_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~main_litedramcore_sdram_bankmachine3_twtpcon_ready)) begin
            main_litedramcore_sdram_bankmachine3_twtpcon_count <= (main_litedramcore_sdram_bankmachine3_twtpcon_count - 1'd1);
            if ((main_litedramcore_sdram_bankmachine3_twtpcon_count == 1'd1)) begin
                main_litedramcore_sdram_bankmachine3_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (main_litedramcore_sdram_bankmachine3_trccon_valid) begin
        main_litedramcore_sdram_bankmachine3_trccon_count <= 3'd5;
        if (1'd0) begin
            main_litedramcore_sdram_bankmachine3_trccon_ready <= 1'd1;
        end else begin
            main_litedramcore_sdram_bankmachine3_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~main_litedramcore_sdram_bankmachine3_trccon_ready)) begin
            main_litedramcore_sdram_bankmachine3_trccon_count <= (main_litedramcore_sdram_bankmachine3_trccon_count - 1'd1);
            if ((main_litedramcore_sdram_bankmachine3_trccon_count == 1'd1)) begin
                main_litedramcore_sdram_bankmachine3_trccon_ready <= 1'd1;
            end
        end
    end
    if (main_litedramcore_sdram_bankmachine3_trascon_valid) begin
        main_litedramcore_sdram_bankmachine3_trascon_count <= 3'd4;
        if (1'd0) begin
            main_litedramcore_sdram_bankmachine3_trascon_ready <= 1'd1;
        end else begin
            main_litedramcore_sdram_bankmachine3_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~main_litedramcore_sdram_bankmachine3_trascon_ready)) begin
            main_litedramcore_sdram_bankmachine3_trascon_count <= (main_litedramcore_sdram_bankmachine3_trascon_count - 1'd1);
            if ((main_litedramcore_sdram_bankmachine3_trascon_count == 1'd1)) begin
                main_litedramcore_sdram_bankmachine3_trascon_ready <= 1'd1;
            end
        end
    end
    builder_litedramcore_litedramcore_bankmachine3_state <= builder_litedramcore_litedramcore_bankmachine3_next_state;
    if (main_litedramcore_sdram_bankmachine4_row_close) begin
        main_litedramcore_sdram_bankmachine4_row_opened <= 1'd0;
    end else begin
        if (main_litedramcore_sdram_bankmachine4_row_open) begin
            main_litedramcore_sdram_bankmachine4_row_opened <= 1'd1;
            main_litedramcore_sdram_bankmachine4_row <= main_litedramcore_sdram_bankmachine4_source_source_payload_addr[21:7];
        end
    end
    if (((main_litedramcore_sdram_bankmachine4_syncfifo4_we & main_litedramcore_sdram_bankmachine4_syncfifo4_writable) & (~main_litedramcore_sdram_bankmachine4_replace))) begin
        main_litedramcore_sdram_bankmachine4_produce <= (main_litedramcore_sdram_bankmachine4_produce + 1'd1);
    end
    if (main_litedramcore_sdram_bankmachine4_do_read) begin
        main_litedramcore_sdram_bankmachine4_consume <= (main_litedramcore_sdram_bankmachine4_consume + 1'd1);
    end
    if (((main_litedramcore_sdram_bankmachine4_syncfifo4_we & main_litedramcore_sdram_bankmachine4_syncfifo4_writable) & (~main_litedramcore_sdram_bankmachine4_replace))) begin
        if ((~main_litedramcore_sdram_bankmachine4_do_read)) begin
            main_litedramcore_sdram_bankmachine4_level <= (main_litedramcore_sdram_bankmachine4_level + 1'd1);
        end
    end else begin
        if (main_litedramcore_sdram_bankmachine4_do_read) begin
            main_litedramcore_sdram_bankmachine4_level <= (main_litedramcore_sdram_bankmachine4_level - 1'd1);
        end
    end
    if (((~main_litedramcore_sdram_bankmachine4_pipe_valid_source_valid) | main_litedramcore_sdram_bankmachine4_pipe_valid_source_ready)) begin
        main_litedramcore_sdram_bankmachine4_pipe_valid_source_valid <= main_litedramcore_sdram_bankmachine4_pipe_valid_sink_valid;
        main_litedramcore_sdram_bankmachine4_pipe_valid_source_first <= main_litedramcore_sdram_bankmachine4_pipe_valid_sink_first;
        main_litedramcore_sdram_bankmachine4_pipe_valid_source_last <= main_litedramcore_sdram_bankmachine4_pipe_valid_sink_last;
        main_litedramcore_sdram_bankmachine4_pipe_valid_source_payload_we <= main_litedramcore_sdram_bankmachine4_pipe_valid_sink_payload_we;
        main_litedramcore_sdram_bankmachine4_pipe_valid_source_payload_addr <= main_litedramcore_sdram_bankmachine4_pipe_valid_sink_payload_addr;
    end
    if (main_litedramcore_sdram_bankmachine4_twtpcon_valid) begin
        main_litedramcore_sdram_bankmachine4_twtpcon_count <= 3'd5;
        if (1'd0) begin
            main_litedramcore_sdram_bankmachine4_twtpcon_ready <= 1'd1;
        end else begin
            main_litedramcore_sdram_bankmachine4_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~main_litedramcore_sdram_bankmachine4_twtpcon_ready)) begin
            main_litedramcore_sdram_bankmachine4_twtpcon_count <= (main_litedramcore_sdram_bankmachine4_twtpcon_count - 1'd1);
            if ((main_litedramcore_sdram_bankmachine4_twtpcon_count == 1'd1)) begin
                main_litedramcore_sdram_bankmachine4_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (main_litedramcore_sdram_bankmachine4_trccon_valid) begin
        main_litedramcore_sdram_bankmachine4_trccon_count <= 3'd5;
        if (1'd0) begin
            main_litedramcore_sdram_bankmachine4_trccon_ready <= 1'd1;
        end else begin
            main_litedramcore_sdram_bankmachine4_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~main_litedramcore_sdram_bankmachine4_trccon_ready)) begin
            main_litedramcore_sdram_bankmachine4_trccon_count <= (main_litedramcore_sdram_bankmachine4_trccon_count - 1'd1);
            if ((main_litedramcore_sdram_bankmachine4_trccon_count == 1'd1)) begin
                main_litedramcore_sdram_bankmachine4_trccon_ready <= 1'd1;
            end
        end
    end
    if (main_litedramcore_sdram_bankmachine4_trascon_valid) begin
        main_litedramcore_sdram_bankmachine4_trascon_count <= 3'd4;
        if (1'd0) begin
            main_litedramcore_sdram_bankmachine4_trascon_ready <= 1'd1;
        end else begin
            main_litedramcore_sdram_bankmachine4_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~main_litedramcore_sdram_bankmachine4_trascon_ready)) begin
            main_litedramcore_sdram_bankmachine4_trascon_count <= (main_litedramcore_sdram_bankmachine4_trascon_count - 1'd1);
            if ((main_litedramcore_sdram_bankmachine4_trascon_count == 1'd1)) begin
                main_litedramcore_sdram_bankmachine4_trascon_ready <= 1'd1;
            end
        end
    end
    builder_litedramcore_litedramcore_bankmachine4_state <= builder_litedramcore_litedramcore_bankmachine4_next_state;
    if (main_litedramcore_sdram_bankmachine5_row_close) begin
        main_litedramcore_sdram_bankmachine5_row_opened <= 1'd0;
    end else begin
        if (main_litedramcore_sdram_bankmachine5_row_open) begin
            main_litedramcore_sdram_bankmachine5_row_opened <= 1'd1;
            main_litedramcore_sdram_bankmachine5_row <= main_litedramcore_sdram_bankmachine5_source_source_payload_addr[21:7];
        end
    end
    if (((main_litedramcore_sdram_bankmachine5_syncfifo5_we & main_litedramcore_sdram_bankmachine5_syncfifo5_writable) & (~main_litedramcore_sdram_bankmachine5_replace))) begin
        main_litedramcore_sdram_bankmachine5_produce <= (main_litedramcore_sdram_bankmachine5_produce + 1'd1);
    end
    if (main_litedramcore_sdram_bankmachine5_do_read) begin
        main_litedramcore_sdram_bankmachine5_consume <= (main_litedramcore_sdram_bankmachine5_consume + 1'd1);
    end
    if (((main_litedramcore_sdram_bankmachine5_syncfifo5_we & main_litedramcore_sdram_bankmachine5_syncfifo5_writable) & (~main_litedramcore_sdram_bankmachine5_replace))) begin
        if ((~main_litedramcore_sdram_bankmachine5_do_read)) begin
            main_litedramcore_sdram_bankmachine5_level <= (main_litedramcore_sdram_bankmachine5_level + 1'd1);
        end
    end else begin
        if (main_litedramcore_sdram_bankmachine5_do_read) begin
            main_litedramcore_sdram_bankmachine5_level <= (main_litedramcore_sdram_bankmachine5_level - 1'd1);
        end
    end
    if (((~main_litedramcore_sdram_bankmachine5_pipe_valid_source_valid) | main_litedramcore_sdram_bankmachine5_pipe_valid_source_ready)) begin
        main_litedramcore_sdram_bankmachine5_pipe_valid_source_valid <= main_litedramcore_sdram_bankmachine5_pipe_valid_sink_valid;
        main_litedramcore_sdram_bankmachine5_pipe_valid_source_first <= main_litedramcore_sdram_bankmachine5_pipe_valid_sink_first;
        main_litedramcore_sdram_bankmachine5_pipe_valid_source_last <= main_litedramcore_sdram_bankmachine5_pipe_valid_sink_last;
        main_litedramcore_sdram_bankmachine5_pipe_valid_source_payload_we <= main_litedramcore_sdram_bankmachine5_pipe_valid_sink_payload_we;
        main_litedramcore_sdram_bankmachine5_pipe_valid_source_payload_addr <= main_litedramcore_sdram_bankmachine5_pipe_valid_sink_payload_addr;
    end
    if (main_litedramcore_sdram_bankmachine5_twtpcon_valid) begin
        main_litedramcore_sdram_bankmachine5_twtpcon_count <= 3'd5;
        if (1'd0) begin
            main_litedramcore_sdram_bankmachine5_twtpcon_ready <= 1'd1;
        end else begin
            main_litedramcore_sdram_bankmachine5_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~main_litedramcore_sdram_bankmachine5_twtpcon_ready)) begin
            main_litedramcore_sdram_bankmachine5_twtpcon_count <= (main_litedramcore_sdram_bankmachine5_twtpcon_count - 1'd1);
            if ((main_litedramcore_sdram_bankmachine5_twtpcon_count == 1'd1)) begin
                main_litedramcore_sdram_bankmachine5_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (main_litedramcore_sdram_bankmachine5_trccon_valid) begin
        main_litedramcore_sdram_bankmachine5_trccon_count <= 3'd5;
        if (1'd0) begin
            main_litedramcore_sdram_bankmachine5_trccon_ready <= 1'd1;
        end else begin
            main_litedramcore_sdram_bankmachine5_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~main_litedramcore_sdram_bankmachine5_trccon_ready)) begin
            main_litedramcore_sdram_bankmachine5_trccon_count <= (main_litedramcore_sdram_bankmachine5_trccon_count - 1'd1);
            if ((main_litedramcore_sdram_bankmachine5_trccon_count == 1'd1)) begin
                main_litedramcore_sdram_bankmachine5_trccon_ready <= 1'd1;
            end
        end
    end
    if (main_litedramcore_sdram_bankmachine5_trascon_valid) begin
        main_litedramcore_sdram_bankmachine5_trascon_count <= 3'd4;
        if (1'd0) begin
            main_litedramcore_sdram_bankmachine5_trascon_ready <= 1'd1;
        end else begin
            main_litedramcore_sdram_bankmachine5_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~main_litedramcore_sdram_bankmachine5_trascon_ready)) begin
            main_litedramcore_sdram_bankmachine5_trascon_count <= (main_litedramcore_sdram_bankmachine5_trascon_count - 1'd1);
            if ((main_litedramcore_sdram_bankmachine5_trascon_count == 1'd1)) begin
                main_litedramcore_sdram_bankmachine5_trascon_ready <= 1'd1;
            end
        end
    end
    builder_litedramcore_litedramcore_bankmachine5_state <= builder_litedramcore_litedramcore_bankmachine5_next_state;
    if (main_litedramcore_sdram_bankmachine6_row_close) begin
        main_litedramcore_sdram_bankmachine6_row_opened <= 1'd0;
    end else begin
        if (main_litedramcore_sdram_bankmachine6_row_open) begin
            main_litedramcore_sdram_bankmachine6_row_opened <= 1'd1;
            main_litedramcore_sdram_bankmachine6_row <= main_litedramcore_sdram_bankmachine6_source_source_payload_addr[21:7];
        end
    end
    if (((main_litedramcore_sdram_bankmachine6_syncfifo6_we & main_litedramcore_sdram_bankmachine6_syncfifo6_writable) & (~main_litedramcore_sdram_bankmachine6_replace))) begin
        main_litedramcore_sdram_bankmachine6_produce <= (main_litedramcore_sdram_bankmachine6_produce + 1'd1);
    end
    if (main_litedramcore_sdram_bankmachine6_do_read) begin
        main_litedramcore_sdram_bankmachine6_consume <= (main_litedramcore_sdram_bankmachine6_consume + 1'd1);
    end
    if (((main_litedramcore_sdram_bankmachine6_syncfifo6_we & main_litedramcore_sdram_bankmachine6_syncfifo6_writable) & (~main_litedramcore_sdram_bankmachine6_replace))) begin
        if ((~main_litedramcore_sdram_bankmachine6_do_read)) begin
            main_litedramcore_sdram_bankmachine6_level <= (main_litedramcore_sdram_bankmachine6_level + 1'd1);
        end
    end else begin
        if (main_litedramcore_sdram_bankmachine6_do_read) begin
            main_litedramcore_sdram_bankmachine6_level <= (main_litedramcore_sdram_bankmachine6_level - 1'd1);
        end
    end
    if (((~main_litedramcore_sdram_bankmachine6_pipe_valid_source_valid) | main_litedramcore_sdram_bankmachine6_pipe_valid_source_ready)) begin
        main_litedramcore_sdram_bankmachine6_pipe_valid_source_valid <= main_litedramcore_sdram_bankmachine6_pipe_valid_sink_valid;
        main_litedramcore_sdram_bankmachine6_pipe_valid_source_first <= main_litedramcore_sdram_bankmachine6_pipe_valid_sink_first;
        main_litedramcore_sdram_bankmachine6_pipe_valid_source_last <= main_litedramcore_sdram_bankmachine6_pipe_valid_sink_last;
        main_litedramcore_sdram_bankmachine6_pipe_valid_source_payload_we <= main_litedramcore_sdram_bankmachine6_pipe_valid_sink_payload_we;
        main_litedramcore_sdram_bankmachine6_pipe_valid_source_payload_addr <= main_litedramcore_sdram_bankmachine6_pipe_valid_sink_payload_addr;
    end
    if (main_litedramcore_sdram_bankmachine6_twtpcon_valid) begin
        main_litedramcore_sdram_bankmachine6_twtpcon_count <= 3'd5;
        if (1'd0) begin
            main_litedramcore_sdram_bankmachine6_twtpcon_ready <= 1'd1;
        end else begin
            main_litedramcore_sdram_bankmachine6_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~main_litedramcore_sdram_bankmachine6_twtpcon_ready)) begin
            main_litedramcore_sdram_bankmachine6_twtpcon_count <= (main_litedramcore_sdram_bankmachine6_twtpcon_count - 1'd1);
            if ((main_litedramcore_sdram_bankmachine6_twtpcon_count == 1'd1)) begin
                main_litedramcore_sdram_bankmachine6_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (main_litedramcore_sdram_bankmachine6_trccon_valid) begin
        main_litedramcore_sdram_bankmachine6_trccon_count <= 3'd5;
        if (1'd0) begin
            main_litedramcore_sdram_bankmachine6_trccon_ready <= 1'd1;
        end else begin
            main_litedramcore_sdram_bankmachine6_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~main_litedramcore_sdram_bankmachine6_trccon_ready)) begin
            main_litedramcore_sdram_bankmachine6_trccon_count <= (main_litedramcore_sdram_bankmachine6_trccon_count - 1'd1);
            if ((main_litedramcore_sdram_bankmachine6_trccon_count == 1'd1)) begin
                main_litedramcore_sdram_bankmachine6_trccon_ready <= 1'd1;
            end
        end
    end
    if (main_litedramcore_sdram_bankmachine6_trascon_valid) begin
        main_litedramcore_sdram_bankmachine6_trascon_count <= 3'd4;
        if (1'd0) begin
            main_litedramcore_sdram_bankmachine6_trascon_ready <= 1'd1;
        end else begin
            main_litedramcore_sdram_bankmachine6_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~main_litedramcore_sdram_bankmachine6_trascon_ready)) begin
            main_litedramcore_sdram_bankmachine6_trascon_count <= (main_litedramcore_sdram_bankmachine6_trascon_count - 1'd1);
            if ((main_litedramcore_sdram_bankmachine6_trascon_count == 1'd1)) begin
                main_litedramcore_sdram_bankmachine6_trascon_ready <= 1'd1;
            end
        end
    end
    builder_litedramcore_litedramcore_bankmachine6_state <= builder_litedramcore_litedramcore_bankmachine6_next_state;
    if (main_litedramcore_sdram_bankmachine7_row_close) begin
        main_litedramcore_sdram_bankmachine7_row_opened <= 1'd0;
    end else begin
        if (main_litedramcore_sdram_bankmachine7_row_open) begin
            main_litedramcore_sdram_bankmachine7_row_opened <= 1'd1;
            main_litedramcore_sdram_bankmachine7_row <= main_litedramcore_sdram_bankmachine7_source_source_payload_addr[21:7];
        end
    end
    if (((main_litedramcore_sdram_bankmachine7_syncfifo7_we & main_litedramcore_sdram_bankmachine7_syncfifo7_writable) & (~main_litedramcore_sdram_bankmachine7_replace))) begin
        main_litedramcore_sdram_bankmachine7_produce <= (main_litedramcore_sdram_bankmachine7_produce + 1'd1);
    end
    if (main_litedramcore_sdram_bankmachine7_do_read) begin
        main_litedramcore_sdram_bankmachine7_consume <= (main_litedramcore_sdram_bankmachine7_consume + 1'd1);
    end
    if (((main_litedramcore_sdram_bankmachine7_syncfifo7_we & main_litedramcore_sdram_bankmachine7_syncfifo7_writable) & (~main_litedramcore_sdram_bankmachine7_replace))) begin
        if ((~main_litedramcore_sdram_bankmachine7_do_read)) begin
            main_litedramcore_sdram_bankmachine7_level <= (main_litedramcore_sdram_bankmachine7_level + 1'd1);
        end
    end else begin
        if (main_litedramcore_sdram_bankmachine7_do_read) begin
            main_litedramcore_sdram_bankmachine7_level <= (main_litedramcore_sdram_bankmachine7_level - 1'd1);
        end
    end
    if (((~main_litedramcore_sdram_bankmachine7_pipe_valid_source_valid) | main_litedramcore_sdram_bankmachine7_pipe_valid_source_ready)) begin
        main_litedramcore_sdram_bankmachine7_pipe_valid_source_valid <= main_litedramcore_sdram_bankmachine7_pipe_valid_sink_valid;
        main_litedramcore_sdram_bankmachine7_pipe_valid_source_first <= main_litedramcore_sdram_bankmachine7_pipe_valid_sink_first;
        main_litedramcore_sdram_bankmachine7_pipe_valid_source_last <= main_litedramcore_sdram_bankmachine7_pipe_valid_sink_last;
        main_litedramcore_sdram_bankmachine7_pipe_valid_source_payload_we <= main_litedramcore_sdram_bankmachine7_pipe_valid_sink_payload_we;
        main_litedramcore_sdram_bankmachine7_pipe_valid_source_payload_addr <= main_litedramcore_sdram_bankmachine7_pipe_valid_sink_payload_addr;
    end
    if (main_litedramcore_sdram_bankmachine7_twtpcon_valid) begin
        main_litedramcore_sdram_bankmachine7_twtpcon_count <= 3'd5;
        if (1'd0) begin
            main_litedramcore_sdram_bankmachine7_twtpcon_ready <= 1'd1;
        end else begin
            main_litedramcore_sdram_bankmachine7_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~main_litedramcore_sdram_bankmachine7_twtpcon_ready)) begin
            main_litedramcore_sdram_bankmachine7_twtpcon_count <= (main_litedramcore_sdram_bankmachine7_twtpcon_count - 1'd1);
            if ((main_litedramcore_sdram_bankmachine7_twtpcon_count == 1'd1)) begin
                main_litedramcore_sdram_bankmachine7_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (main_litedramcore_sdram_bankmachine7_trccon_valid) begin
        main_litedramcore_sdram_bankmachine7_trccon_count <= 3'd5;
        if (1'd0) begin
            main_litedramcore_sdram_bankmachine7_trccon_ready <= 1'd1;
        end else begin
            main_litedramcore_sdram_bankmachine7_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~main_litedramcore_sdram_bankmachine7_trccon_ready)) begin
            main_litedramcore_sdram_bankmachine7_trccon_count <= (main_litedramcore_sdram_bankmachine7_trccon_count - 1'd1);
            if ((main_litedramcore_sdram_bankmachine7_trccon_count == 1'd1)) begin
                main_litedramcore_sdram_bankmachine7_trccon_ready <= 1'd1;
            end
        end
    end
    if (main_litedramcore_sdram_bankmachine7_trascon_valid) begin
        main_litedramcore_sdram_bankmachine7_trascon_count <= 3'd4;
        if (1'd0) begin
            main_litedramcore_sdram_bankmachine7_trascon_ready <= 1'd1;
        end else begin
            main_litedramcore_sdram_bankmachine7_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~main_litedramcore_sdram_bankmachine7_trascon_ready)) begin
            main_litedramcore_sdram_bankmachine7_trascon_count <= (main_litedramcore_sdram_bankmachine7_trascon_count - 1'd1);
            if ((main_litedramcore_sdram_bankmachine7_trascon_count == 1'd1)) begin
                main_litedramcore_sdram_bankmachine7_trascon_ready <= 1'd1;
            end
        end
    end
    builder_litedramcore_litedramcore_bankmachine7_state <= builder_litedramcore_litedramcore_bankmachine7_next_state;
    if ((~main_litedramcore_sdram_en0)) begin
        main_litedramcore_sdram_time0 <= 5'd31;
    end else begin
        if ((~main_litedramcore_sdram_max_time0)) begin
            main_litedramcore_sdram_time0 <= (main_litedramcore_sdram_time0 - 1'd1);
        end
    end
    if ((~main_litedramcore_sdram_en1)) begin
        main_litedramcore_sdram_time1 <= 4'd15;
    end else begin
        if ((~main_litedramcore_sdram_max_time1)) begin
            main_litedramcore_sdram_time1 <= (main_litedramcore_sdram_time1 - 1'd1);
        end
    end
    if (main_litedramcore_sdram_choose_cmd_ce) begin
        case (main_litedramcore_sdram_choose_cmd_grant)
            1'd0: begin
                if (main_litedramcore_sdram_choose_cmd_request[1]) begin
                    main_litedramcore_sdram_choose_cmd_grant <= 1'd1;
                end else begin
                    if (main_litedramcore_sdram_choose_cmd_request[2]) begin
                        main_litedramcore_sdram_choose_cmd_grant <= 2'd2;
                    end else begin
                        if (main_litedramcore_sdram_choose_cmd_request[3]) begin
                            main_litedramcore_sdram_choose_cmd_grant <= 2'd3;
                        end else begin
                            if (main_litedramcore_sdram_choose_cmd_request[4]) begin
                                main_litedramcore_sdram_choose_cmd_grant <= 3'd4;
                            end else begin
                                if (main_litedramcore_sdram_choose_cmd_request[5]) begin
                                    main_litedramcore_sdram_choose_cmd_grant <= 3'd5;
                                end else begin
                                    if (main_litedramcore_sdram_choose_cmd_request[6]) begin
                                        main_litedramcore_sdram_choose_cmd_grant <= 3'd6;
                                    end else begin
                                        if (main_litedramcore_sdram_choose_cmd_request[7]) begin
                                            main_litedramcore_sdram_choose_cmd_grant <= 3'd7;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            1'd1: begin
                if (main_litedramcore_sdram_choose_cmd_request[2]) begin
                    main_litedramcore_sdram_choose_cmd_grant <= 2'd2;
                end else begin
                    if (main_litedramcore_sdram_choose_cmd_request[3]) begin
                        main_litedramcore_sdram_choose_cmd_grant <= 2'd3;
                    end else begin
                        if (main_litedramcore_sdram_choose_cmd_request[4]) begin
                            main_litedramcore_sdram_choose_cmd_grant <= 3'd4;
                        end else begin
                            if (main_litedramcore_sdram_choose_cmd_request[5]) begin
                                main_litedramcore_sdram_choose_cmd_grant <= 3'd5;
                            end else begin
                                if (main_litedramcore_sdram_choose_cmd_request[6]) begin
                                    main_litedramcore_sdram_choose_cmd_grant <= 3'd6;
                                end else begin
                                    if (main_litedramcore_sdram_choose_cmd_request[7]) begin
                                        main_litedramcore_sdram_choose_cmd_grant <= 3'd7;
                                    end else begin
                                        if (main_litedramcore_sdram_choose_cmd_request[0]) begin
                                            main_litedramcore_sdram_choose_cmd_grant <= 1'd0;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            2'd2: begin
                if (main_litedramcore_sdram_choose_cmd_request[3]) begin
                    main_litedramcore_sdram_choose_cmd_grant <= 2'd3;
                end else begin
                    if (main_litedramcore_sdram_choose_cmd_request[4]) begin
                        main_litedramcore_sdram_choose_cmd_grant <= 3'd4;
                    end else begin
                        if (main_litedramcore_sdram_choose_cmd_request[5]) begin
                            main_litedramcore_sdram_choose_cmd_grant <= 3'd5;
                        end else begin
                            if (main_litedramcore_sdram_choose_cmd_request[6]) begin
                                main_litedramcore_sdram_choose_cmd_grant <= 3'd6;
                            end else begin
                                if (main_litedramcore_sdram_choose_cmd_request[7]) begin
                                    main_litedramcore_sdram_choose_cmd_grant <= 3'd7;
                                end else begin
                                    if (main_litedramcore_sdram_choose_cmd_request[0]) begin
                                        main_litedramcore_sdram_choose_cmd_grant <= 1'd0;
                                    end else begin
                                        if (main_litedramcore_sdram_choose_cmd_request[1]) begin
                                            main_litedramcore_sdram_choose_cmd_grant <= 1'd1;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            2'd3: begin
                if (main_litedramcore_sdram_choose_cmd_request[4]) begin
                    main_litedramcore_sdram_choose_cmd_grant <= 3'd4;
                end else begin
                    if (main_litedramcore_sdram_choose_cmd_request[5]) begin
                        main_litedramcore_sdram_choose_cmd_grant <= 3'd5;
                    end else begin
                        if (main_litedramcore_sdram_choose_cmd_request[6]) begin
                            main_litedramcore_sdram_choose_cmd_grant <= 3'd6;
                        end else begin
                            if (main_litedramcore_sdram_choose_cmd_request[7]) begin
                                main_litedramcore_sdram_choose_cmd_grant <= 3'd7;
                            end else begin
                                if (main_litedramcore_sdram_choose_cmd_request[0]) begin
                                    main_litedramcore_sdram_choose_cmd_grant <= 1'd0;
                                end else begin
                                    if (main_litedramcore_sdram_choose_cmd_request[1]) begin
                                        main_litedramcore_sdram_choose_cmd_grant <= 1'd1;
                                    end else begin
                                        if (main_litedramcore_sdram_choose_cmd_request[2]) begin
                                            main_litedramcore_sdram_choose_cmd_grant <= 2'd2;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            3'd4: begin
                if (main_litedramcore_sdram_choose_cmd_request[5]) begin
                    main_litedramcore_sdram_choose_cmd_grant <= 3'd5;
                end else begin
                    if (main_litedramcore_sdram_choose_cmd_request[6]) begin
                        main_litedramcore_sdram_choose_cmd_grant <= 3'd6;
                    end else begin
                        if (main_litedramcore_sdram_choose_cmd_request[7]) begin
                            main_litedramcore_sdram_choose_cmd_grant <= 3'd7;
                        end else begin
                            if (main_litedramcore_sdram_choose_cmd_request[0]) begin
                                main_litedramcore_sdram_choose_cmd_grant <= 1'd0;
                            end else begin
                                if (main_litedramcore_sdram_choose_cmd_request[1]) begin
                                    main_litedramcore_sdram_choose_cmd_grant <= 1'd1;
                                end else begin
                                    if (main_litedramcore_sdram_choose_cmd_request[2]) begin
                                        main_litedramcore_sdram_choose_cmd_grant <= 2'd2;
                                    end else begin
                                        if (main_litedramcore_sdram_choose_cmd_request[3]) begin
                                            main_litedramcore_sdram_choose_cmd_grant <= 2'd3;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            3'd5: begin
                if (main_litedramcore_sdram_choose_cmd_request[6]) begin
                    main_litedramcore_sdram_choose_cmd_grant <= 3'd6;
                end else begin
                    if (main_litedramcore_sdram_choose_cmd_request[7]) begin
                        main_litedramcore_sdram_choose_cmd_grant <= 3'd7;
                    end else begin
                        if (main_litedramcore_sdram_choose_cmd_request[0]) begin
                            main_litedramcore_sdram_choose_cmd_grant <= 1'd0;
                        end else begin
                            if (main_litedramcore_sdram_choose_cmd_request[1]) begin
                                main_litedramcore_sdram_choose_cmd_grant <= 1'd1;
                            end else begin
                                if (main_litedramcore_sdram_choose_cmd_request[2]) begin
                                    main_litedramcore_sdram_choose_cmd_grant <= 2'd2;
                                end else begin
                                    if (main_litedramcore_sdram_choose_cmd_request[3]) begin
                                        main_litedramcore_sdram_choose_cmd_grant <= 2'd3;
                                    end else begin
                                        if (main_litedramcore_sdram_choose_cmd_request[4]) begin
                                            main_litedramcore_sdram_choose_cmd_grant <= 3'd4;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            3'd6: begin
                if (main_litedramcore_sdram_choose_cmd_request[7]) begin
                    main_litedramcore_sdram_choose_cmd_grant <= 3'd7;
                end else begin
                    if (main_litedramcore_sdram_choose_cmd_request[0]) begin
                        main_litedramcore_sdram_choose_cmd_grant <= 1'd0;
                    end else begin
                        if (main_litedramcore_sdram_choose_cmd_request[1]) begin
                            main_litedramcore_sdram_choose_cmd_grant <= 1'd1;
                        end else begin
                            if (main_litedramcore_sdram_choose_cmd_request[2]) begin
                                main_litedramcore_sdram_choose_cmd_grant <= 2'd2;
                            end else begin
                                if (main_litedramcore_sdram_choose_cmd_request[3]) begin
                                    main_litedramcore_sdram_choose_cmd_grant <= 2'd3;
                                end else begin
                                    if (main_litedramcore_sdram_choose_cmd_request[4]) begin
                                        main_litedramcore_sdram_choose_cmd_grant <= 3'd4;
                                    end else begin
                                        if (main_litedramcore_sdram_choose_cmd_request[5]) begin
                                            main_litedramcore_sdram_choose_cmd_grant <= 3'd5;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            3'd7: begin
                if (main_litedramcore_sdram_choose_cmd_request[0]) begin
                    main_litedramcore_sdram_choose_cmd_grant <= 1'd0;
                end else begin
                    if (main_litedramcore_sdram_choose_cmd_request[1]) begin
                        main_litedramcore_sdram_choose_cmd_grant <= 1'd1;
                    end else begin
                        if (main_litedramcore_sdram_choose_cmd_request[2]) begin
                            main_litedramcore_sdram_choose_cmd_grant <= 2'd2;
                        end else begin
                            if (main_litedramcore_sdram_choose_cmd_request[3]) begin
                                main_litedramcore_sdram_choose_cmd_grant <= 2'd3;
                            end else begin
                                if (main_litedramcore_sdram_choose_cmd_request[4]) begin
                                    main_litedramcore_sdram_choose_cmd_grant <= 3'd4;
                                end else begin
                                    if (main_litedramcore_sdram_choose_cmd_request[5]) begin
                                        main_litedramcore_sdram_choose_cmd_grant <= 3'd5;
                                    end else begin
                                        if (main_litedramcore_sdram_choose_cmd_request[6]) begin
                                            main_litedramcore_sdram_choose_cmd_grant <= 3'd6;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        endcase
    end
    if (main_litedramcore_sdram_choose_req_ce) begin
        case (main_litedramcore_sdram_choose_req_grant)
            1'd0: begin
                if (main_litedramcore_sdram_choose_req_request[1]) begin
                    main_litedramcore_sdram_choose_req_grant <= 1'd1;
                end else begin
                    if (main_litedramcore_sdram_choose_req_request[2]) begin
                        main_litedramcore_sdram_choose_req_grant <= 2'd2;
                    end else begin
                        if (main_litedramcore_sdram_choose_req_request[3]) begin
                            main_litedramcore_sdram_choose_req_grant <= 2'd3;
                        end else begin
                            if (main_litedramcore_sdram_choose_req_request[4]) begin
                                main_litedramcore_sdram_choose_req_grant <= 3'd4;
                            end else begin
                                if (main_litedramcore_sdram_choose_req_request[5]) begin
                                    main_litedramcore_sdram_choose_req_grant <= 3'd5;
                                end else begin
                                    if (main_litedramcore_sdram_choose_req_request[6]) begin
                                        main_litedramcore_sdram_choose_req_grant <= 3'd6;
                                    end else begin
                                        if (main_litedramcore_sdram_choose_req_request[7]) begin
                                            main_litedramcore_sdram_choose_req_grant <= 3'd7;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            1'd1: begin
                if (main_litedramcore_sdram_choose_req_request[2]) begin
                    main_litedramcore_sdram_choose_req_grant <= 2'd2;
                end else begin
                    if (main_litedramcore_sdram_choose_req_request[3]) begin
                        main_litedramcore_sdram_choose_req_grant <= 2'd3;
                    end else begin
                        if (main_litedramcore_sdram_choose_req_request[4]) begin
                            main_litedramcore_sdram_choose_req_grant <= 3'd4;
                        end else begin
                            if (main_litedramcore_sdram_choose_req_request[5]) begin
                                main_litedramcore_sdram_choose_req_grant <= 3'd5;
                            end else begin
                                if (main_litedramcore_sdram_choose_req_request[6]) begin
                                    main_litedramcore_sdram_choose_req_grant <= 3'd6;
                                end else begin
                                    if (main_litedramcore_sdram_choose_req_request[7]) begin
                                        main_litedramcore_sdram_choose_req_grant <= 3'd7;
                                    end else begin
                                        if (main_litedramcore_sdram_choose_req_request[0]) begin
                                            main_litedramcore_sdram_choose_req_grant <= 1'd0;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            2'd2: begin
                if (main_litedramcore_sdram_choose_req_request[3]) begin
                    main_litedramcore_sdram_choose_req_grant <= 2'd3;
                end else begin
                    if (main_litedramcore_sdram_choose_req_request[4]) begin
                        main_litedramcore_sdram_choose_req_grant <= 3'd4;
                    end else begin
                        if (main_litedramcore_sdram_choose_req_request[5]) begin
                            main_litedramcore_sdram_choose_req_grant <= 3'd5;
                        end else begin
                            if (main_litedramcore_sdram_choose_req_request[6]) begin
                                main_litedramcore_sdram_choose_req_grant <= 3'd6;
                            end else begin
                                if (main_litedramcore_sdram_choose_req_request[7]) begin
                                    main_litedramcore_sdram_choose_req_grant <= 3'd7;
                                end else begin
                                    if (main_litedramcore_sdram_choose_req_request[0]) begin
                                        main_litedramcore_sdram_choose_req_grant <= 1'd0;
                                    end else begin
                                        if (main_litedramcore_sdram_choose_req_request[1]) begin
                                            main_litedramcore_sdram_choose_req_grant <= 1'd1;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            2'd3: begin
                if (main_litedramcore_sdram_choose_req_request[4]) begin
                    main_litedramcore_sdram_choose_req_grant <= 3'd4;
                end else begin
                    if (main_litedramcore_sdram_choose_req_request[5]) begin
                        main_litedramcore_sdram_choose_req_grant <= 3'd5;
                    end else begin
                        if (main_litedramcore_sdram_choose_req_request[6]) begin
                            main_litedramcore_sdram_choose_req_grant <= 3'd6;
                        end else begin
                            if (main_litedramcore_sdram_choose_req_request[7]) begin
                                main_litedramcore_sdram_choose_req_grant <= 3'd7;
                            end else begin
                                if (main_litedramcore_sdram_choose_req_request[0]) begin
                                    main_litedramcore_sdram_choose_req_grant <= 1'd0;
                                end else begin
                                    if (main_litedramcore_sdram_choose_req_request[1]) begin
                                        main_litedramcore_sdram_choose_req_grant <= 1'd1;
                                    end else begin
                                        if (main_litedramcore_sdram_choose_req_request[2]) begin
                                            main_litedramcore_sdram_choose_req_grant <= 2'd2;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            3'd4: begin
                if (main_litedramcore_sdram_choose_req_request[5]) begin
                    main_litedramcore_sdram_choose_req_grant <= 3'd5;
                end else begin
                    if (main_litedramcore_sdram_choose_req_request[6]) begin
                        main_litedramcore_sdram_choose_req_grant <= 3'd6;
                    end else begin
                        if (main_litedramcore_sdram_choose_req_request[7]) begin
                            main_litedramcore_sdram_choose_req_grant <= 3'd7;
                        end else begin
                            if (main_litedramcore_sdram_choose_req_request[0]) begin
                                main_litedramcore_sdram_choose_req_grant <= 1'd0;
                            end else begin
                                if (main_litedramcore_sdram_choose_req_request[1]) begin
                                    main_litedramcore_sdram_choose_req_grant <= 1'd1;
                                end else begin
                                    if (main_litedramcore_sdram_choose_req_request[2]) begin
                                        main_litedramcore_sdram_choose_req_grant <= 2'd2;
                                    end else begin
                                        if (main_litedramcore_sdram_choose_req_request[3]) begin
                                            main_litedramcore_sdram_choose_req_grant <= 2'd3;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            3'd5: begin
                if (main_litedramcore_sdram_choose_req_request[6]) begin
                    main_litedramcore_sdram_choose_req_grant <= 3'd6;
                end else begin
                    if (main_litedramcore_sdram_choose_req_request[7]) begin
                        main_litedramcore_sdram_choose_req_grant <= 3'd7;
                    end else begin
                        if (main_litedramcore_sdram_choose_req_request[0]) begin
                            main_litedramcore_sdram_choose_req_grant <= 1'd0;
                        end else begin
                            if (main_litedramcore_sdram_choose_req_request[1]) begin
                                main_litedramcore_sdram_choose_req_grant <= 1'd1;
                            end else begin
                                if (main_litedramcore_sdram_choose_req_request[2]) begin
                                    main_litedramcore_sdram_choose_req_grant <= 2'd2;
                                end else begin
                                    if (main_litedramcore_sdram_choose_req_request[3]) begin
                                        main_litedramcore_sdram_choose_req_grant <= 2'd3;
                                    end else begin
                                        if (main_litedramcore_sdram_choose_req_request[4]) begin
                                            main_litedramcore_sdram_choose_req_grant <= 3'd4;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            3'd6: begin
                if (main_litedramcore_sdram_choose_req_request[7]) begin
                    main_litedramcore_sdram_choose_req_grant <= 3'd7;
                end else begin
                    if (main_litedramcore_sdram_choose_req_request[0]) begin
                        main_litedramcore_sdram_choose_req_grant <= 1'd0;
                    end else begin
                        if (main_litedramcore_sdram_choose_req_request[1]) begin
                            main_litedramcore_sdram_choose_req_grant <= 1'd1;
                        end else begin
                            if (main_litedramcore_sdram_choose_req_request[2]) begin
                                main_litedramcore_sdram_choose_req_grant <= 2'd2;
                            end else begin
                                if (main_litedramcore_sdram_choose_req_request[3]) begin
                                    main_litedramcore_sdram_choose_req_grant <= 2'd3;
                                end else begin
                                    if (main_litedramcore_sdram_choose_req_request[4]) begin
                                        main_litedramcore_sdram_choose_req_grant <= 3'd4;
                                    end else begin
                                        if (main_litedramcore_sdram_choose_req_request[5]) begin
                                            main_litedramcore_sdram_choose_req_grant <= 3'd5;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            3'd7: begin
                if (main_litedramcore_sdram_choose_req_request[0]) begin
                    main_litedramcore_sdram_choose_req_grant <= 1'd0;
                end else begin
                    if (main_litedramcore_sdram_choose_req_request[1]) begin
                        main_litedramcore_sdram_choose_req_grant <= 1'd1;
                    end else begin
                        if (main_litedramcore_sdram_choose_req_request[2]) begin
                            main_litedramcore_sdram_choose_req_grant <= 2'd2;
                        end else begin
                            if (main_litedramcore_sdram_choose_req_request[3]) begin
                                main_litedramcore_sdram_choose_req_grant <= 2'd3;
                            end else begin
                                if (main_litedramcore_sdram_choose_req_request[4]) begin
                                    main_litedramcore_sdram_choose_req_grant <= 3'd4;
                                end else begin
                                    if (main_litedramcore_sdram_choose_req_request[5]) begin
                                        main_litedramcore_sdram_choose_req_grant <= 3'd5;
                                    end else begin
                                        if (main_litedramcore_sdram_choose_req_request[6]) begin
                                            main_litedramcore_sdram_choose_req_grant <= 3'd6;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        endcase
    end
    main_litedramcore_sdram_dfi_p0_cs_n <= 1'd0;
    main_litedramcore_sdram_dfi_p0_bank <= builder_array_muxed0;
    main_litedramcore_sdram_dfi_p0_address <= builder_array_muxed1;
    main_litedramcore_sdram_dfi_p0_cas_n <= (~builder_array_muxed2);
    main_litedramcore_sdram_dfi_p0_ras_n <= (~builder_array_muxed3);
    main_litedramcore_sdram_dfi_p0_we_n <= (~builder_array_muxed4);
    main_litedramcore_sdram_dfi_p0_rddata_en <= builder_array_muxed5;
    main_litedramcore_sdram_dfi_p0_wrdata_en <= builder_array_muxed6;
    main_litedramcore_sdram_dfi_p1_cs_n <= 1'd0;
    main_litedramcore_sdram_dfi_p1_bank <= builder_array_muxed7;
    main_litedramcore_sdram_dfi_p1_address <= builder_array_muxed8;
    main_litedramcore_sdram_dfi_p1_cas_n <= (~builder_array_muxed9);
    main_litedramcore_sdram_dfi_p1_ras_n <= (~builder_array_muxed10);
    main_litedramcore_sdram_dfi_p1_we_n <= (~builder_array_muxed11);
    main_litedramcore_sdram_dfi_p1_rddata_en <= builder_array_muxed12;
    main_litedramcore_sdram_dfi_p1_wrdata_en <= builder_array_muxed13;
    main_litedramcore_sdram_dfi_p2_cs_n <= 1'd0;
    main_litedramcore_sdram_dfi_p2_bank <= builder_array_muxed14;
    main_litedramcore_sdram_dfi_p2_address <= builder_array_muxed15;
    main_litedramcore_sdram_dfi_p2_cas_n <= (~builder_array_muxed16);
    main_litedramcore_sdram_dfi_p2_ras_n <= (~builder_array_muxed17);
    main_litedramcore_sdram_dfi_p2_we_n <= (~builder_array_muxed18);
    main_litedramcore_sdram_dfi_p2_rddata_en <= builder_array_muxed19;
    main_litedramcore_sdram_dfi_p2_wrdata_en <= builder_array_muxed20;
    main_litedramcore_sdram_dfi_p3_cs_n <= 1'd0;
    main_litedramcore_sdram_dfi_p3_bank <= builder_array_muxed21;
    main_litedramcore_sdram_dfi_p3_address <= builder_array_muxed22;
    main_litedramcore_sdram_dfi_p3_cas_n <= (~builder_array_muxed23);
    main_litedramcore_sdram_dfi_p3_ras_n <= (~builder_array_muxed24);
    main_litedramcore_sdram_dfi_p3_we_n <= (~builder_array_muxed25);
    main_litedramcore_sdram_dfi_p3_rddata_en <= builder_array_muxed26;
    main_litedramcore_sdram_dfi_p3_wrdata_en <= builder_array_muxed27;
    if (main_litedramcore_sdram_trrdcon_valid) begin
        main_litedramcore_sdram_trrdcon_count <= 1'd1;
        if (1'd0) begin
            main_litedramcore_sdram_trrdcon_ready <= 1'd1;
        end else begin
            main_litedramcore_sdram_trrdcon_ready <= 1'd0;
        end
    end else begin
        if ((~main_litedramcore_sdram_trrdcon_ready)) begin
            main_litedramcore_sdram_trrdcon_count <= (main_litedramcore_sdram_trrdcon_count - 1'd1);
            if ((main_litedramcore_sdram_trrdcon_count == 1'd1)) begin
                main_litedramcore_sdram_trrdcon_ready <= 1'd1;
            end
        end
    end
    main_litedramcore_sdram_tfawcon_window <= {main_litedramcore_sdram_tfawcon_window, main_litedramcore_sdram_tfawcon_valid};
    if ((main_litedramcore_sdram_tfawcon_count < 3'd4)) begin
        if ((main_litedramcore_sdram_tfawcon_count == 2'd3)) begin
            main_litedramcore_sdram_tfawcon_ready <= (~main_litedramcore_sdram_tfawcon_valid);
        end else begin
            main_litedramcore_sdram_tfawcon_ready <= 1'd1;
        end
    end
    if (main_litedramcore_sdram_tccdcon_valid) begin
        main_litedramcore_sdram_tccdcon_count <= 1'd0;
        if (1'd1) begin
            main_litedramcore_sdram_tccdcon_ready <= 1'd1;
        end else begin
            main_litedramcore_sdram_tccdcon_ready <= 1'd0;
        end
    end else begin
        if ((~main_litedramcore_sdram_tccdcon_ready)) begin
            main_litedramcore_sdram_tccdcon_count <= (main_litedramcore_sdram_tccdcon_count - 1'd1);
            if ((main_litedramcore_sdram_tccdcon_count == 1'd1)) begin
                main_litedramcore_sdram_tccdcon_ready <= 1'd1;
            end
        end
    end
    if (main_litedramcore_sdram_twtrcon_valid) begin
        main_litedramcore_sdram_twtrcon_count <= 3'd4;
        if (1'd0) begin
            main_litedramcore_sdram_twtrcon_ready <= 1'd1;
        end else begin
            main_litedramcore_sdram_twtrcon_ready <= 1'd0;
        end
    end else begin
        if ((~main_litedramcore_sdram_twtrcon_ready)) begin
            main_litedramcore_sdram_twtrcon_count <= (main_litedramcore_sdram_twtrcon_count - 1'd1);
            if ((main_litedramcore_sdram_twtrcon_count == 1'd1)) begin
                main_litedramcore_sdram_twtrcon_ready <= 1'd1;
            end
        end
    end
    builder_litedramcore_litedramcore_multiplexer_state <= builder_litedramcore_litedramcore_multiplexer_next_state;
    builder_litedramcore_litedramcore_new_master_wdata_ready0 <= ((((((((1'd0 | ((builder_litedramcore_litedramcore_roundrobin0_grant == 1'd0) & main_litedramcore_sdram_interface_bank0_wdata_ready)) | ((builder_litedramcore_litedramcore_roundrobin1_grant == 1'd0) & main_litedramcore_sdram_interface_bank1_wdata_ready)) | ((builder_litedramcore_litedramcore_roundrobin2_grant == 1'd0) & main_litedramcore_sdram_interface_bank2_wdata_ready)) | ((builder_litedramcore_litedramcore_roundrobin3_grant == 1'd0) & main_litedramcore_sdram_interface_bank3_wdata_ready)) | ((builder_litedramcore_litedramcore_roundrobin4_grant == 1'd0) & main_litedramcore_sdram_interface_bank4_wdata_ready)) | ((builder_litedramcore_litedramcore_roundrobin5_grant == 1'd0) & main_litedramcore_sdram_interface_bank5_wdata_ready)) | ((builder_litedramcore_litedramcore_roundrobin6_grant == 1'd0) & main_litedramcore_sdram_interface_bank6_wdata_ready)) | ((builder_litedramcore_litedramcore_roundrobin7_grant == 1'd0) & main_litedramcore_sdram_interface_bank7_wdata_ready));
    builder_litedramcore_litedramcore_new_master_wdata_ready1 <= builder_litedramcore_litedramcore_new_master_wdata_ready0;
    builder_litedramcore_litedramcore_new_master_wdata_ready2 <= ((((((((1'd0 | ((builder_litedramcore_litedramcore_roundrobin0_grant == 1'd1) & main_litedramcore_sdram_interface_bank0_wdata_ready)) | ((builder_litedramcore_litedramcore_roundrobin1_grant == 1'd1) & main_litedramcore_sdram_interface_bank1_wdata_ready)) | ((builder_litedramcore_litedramcore_roundrobin2_grant == 1'd1) & main_litedramcore_sdram_interface_bank2_wdata_ready)) | ((builder_litedramcore_litedramcore_roundrobin3_grant == 1'd1) & main_litedramcore_sdram_interface_bank3_wdata_ready)) | ((builder_litedramcore_litedramcore_roundrobin4_grant == 1'd1) & main_litedramcore_sdram_interface_bank4_wdata_ready)) | ((builder_litedramcore_litedramcore_roundrobin5_grant == 1'd1) & main_litedramcore_sdram_interface_bank5_wdata_ready)) | ((builder_litedramcore_litedramcore_roundrobin6_grant == 1'd1) & main_litedramcore_sdram_interface_bank6_wdata_ready)) | ((builder_litedramcore_litedramcore_roundrobin7_grant == 1'd1) & main_litedramcore_sdram_interface_bank7_wdata_ready));
    builder_litedramcore_litedramcore_new_master_wdata_ready3 <= builder_litedramcore_litedramcore_new_master_wdata_ready2;
    builder_litedramcore_litedramcore_new_master_rdata_valid0 <= ((((((((1'd0 | ((builder_litedramcore_litedramcore_roundrobin0_grant == 1'd0) & main_litedramcore_sdram_interface_bank0_rdata_valid)) | ((builder_litedramcore_litedramcore_roundrobin1_grant == 1'd0) & main_litedramcore_sdram_interface_bank1_rdata_valid)) | ((builder_litedramcore_litedramcore_roundrobin2_grant == 1'd0) & main_litedramcore_sdram_interface_bank2_rdata_valid)) | ((builder_litedramcore_litedramcore_roundrobin3_grant == 1'd0) & main_litedramcore_sdram_interface_bank3_rdata_valid)) | ((builder_litedramcore_litedramcore_roundrobin4_grant == 1'd0) & main_litedramcore_sdram_interface_bank4_rdata_valid)) | ((builder_litedramcore_litedramcore_roundrobin5_grant == 1'd0) & main_litedramcore_sdram_interface_bank5_rdata_valid)) | ((builder_litedramcore_litedramcore_roundrobin6_grant == 1'd0) & main_litedramcore_sdram_interface_bank6_rdata_valid)) | ((builder_litedramcore_litedramcore_roundrobin7_grant == 1'd0) & main_litedramcore_sdram_interface_bank7_rdata_valid));
    builder_litedramcore_litedramcore_new_master_rdata_valid1 <= builder_litedramcore_litedramcore_new_master_rdata_valid0;
    builder_litedramcore_litedramcore_new_master_rdata_valid2 <= builder_litedramcore_litedramcore_new_master_rdata_valid1;
    builder_litedramcore_litedramcore_new_master_rdata_valid3 <= builder_litedramcore_litedramcore_new_master_rdata_valid2;
    builder_litedramcore_litedramcore_new_master_rdata_valid4 <= builder_litedramcore_litedramcore_new_master_rdata_valid3;
    builder_litedramcore_litedramcore_new_master_rdata_valid5 <= builder_litedramcore_litedramcore_new_master_rdata_valid4;
    builder_litedramcore_litedramcore_new_master_rdata_valid6 <= builder_litedramcore_litedramcore_new_master_rdata_valid5;
    builder_litedramcore_litedramcore_new_master_rdata_valid7 <= builder_litedramcore_litedramcore_new_master_rdata_valid6;
    builder_litedramcore_litedramcore_new_master_rdata_valid8 <= builder_litedramcore_litedramcore_new_master_rdata_valid7;
    builder_litedramcore_litedramcore_new_master_rdata_valid9 <= ((((((((1'd0 | ((builder_litedramcore_litedramcore_roundrobin0_grant == 1'd1) & main_litedramcore_sdram_interface_bank0_rdata_valid)) | ((builder_litedramcore_litedramcore_roundrobin1_grant == 1'd1) & main_litedramcore_sdram_interface_bank1_rdata_valid)) | ((builder_litedramcore_litedramcore_roundrobin2_grant == 1'd1) & main_litedramcore_sdram_interface_bank2_rdata_valid)) | ((builder_litedramcore_litedramcore_roundrobin3_grant == 1'd1) & main_litedramcore_sdram_interface_bank3_rdata_valid)) | ((builder_litedramcore_litedramcore_roundrobin4_grant == 1'd1) & main_litedramcore_sdram_interface_bank4_rdata_valid)) | ((builder_litedramcore_litedramcore_roundrobin5_grant == 1'd1) & main_litedramcore_sdram_interface_bank5_rdata_valid)) | ((builder_litedramcore_litedramcore_roundrobin6_grant == 1'd1) & main_litedramcore_sdram_interface_bank6_rdata_valid)) | ((builder_litedramcore_litedramcore_roundrobin7_grant == 1'd1) & main_litedramcore_sdram_interface_bank7_rdata_valid));
    builder_litedramcore_litedramcore_new_master_rdata_valid10 <= builder_litedramcore_litedramcore_new_master_rdata_valid9;
    builder_litedramcore_litedramcore_new_master_rdata_valid11 <= builder_litedramcore_litedramcore_new_master_rdata_valid10;
    builder_litedramcore_litedramcore_new_master_rdata_valid12 <= builder_litedramcore_litedramcore_new_master_rdata_valid11;
    builder_litedramcore_litedramcore_new_master_rdata_valid13 <= builder_litedramcore_litedramcore_new_master_rdata_valid12;
    builder_litedramcore_litedramcore_new_master_rdata_valid14 <= builder_litedramcore_litedramcore_new_master_rdata_valid13;
    builder_litedramcore_litedramcore_new_master_rdata_valid15 <= builder_litedramcore_litedramcore_new_master_rdata_valid14;
    builder_litedramcore_litedramcore_new_master_rdata_valid16 <= builder_litedramcore_litedramcore_new_master_rdata_valid15;
    builder_litedramcore_litedramcore_new_master_rdata_valid17 <= builder_litedramcore_litedramcore_new_master_rdata_valid16;
    if (main_user_port_litedramnativeportconverter_wdata_finished) begin
        main_user_port_litedramnativeportconverter_read_lock <= 1'd0;
        main_user_port_litedramnativeportconverter_read_unlocked <= 1'd1;
    end else begin
        if (((main_user_port_litedramnativeportconverter_rw_collision & (~main_user_port_port_cmd_valid)) & (~main_user_port_litedramnativeportconverter_read_unlocked))) begin
            main_user_port_litedramnativeportconverter_read_lock <= 1'd1;
        end
    end
    if ((main_user_port_new_port_cmd_valid & main_user_port_new_port_cmd_ready)) begin
        main_user_port_litedramnativeportconverter_read_unlocked <= 1'd0;
    end
    if ((main_user_port_litedramnativeportconverter_rdata_converter_source_valid & main_user_port_litedramnativeportconverter_rdata_converter_source_ready)) begin
        main_user_port_litedramnativeportconverter_rdata_chunk <= {main_user_port_litedramnativeportconverter_rdata_chunk[0], main_user_port_litedramnativeportconverter_rdata_chunk[1]};
    end
    if ((main_user_port_litedramnativeportconverter_wdata_converter_sink_valid & main_user_port_litedramnativeportconverter_wdata_converter_sink_ready)) begin
        main_user_port_litedramnativeportconverter_wdata_chunk <= {main_user_port_litedramnativeportconverter_wdata_chunk[0], main_user_port_litedramnativeportconverter_wdata_chunk[1]};
    end
    if (((main_user_port_litedramnativeportconverter_cmd_buffer_source_valid & main_user_port_litedramnativeportconverter_cmd_buffer_source_payload_we) & main_user_port_litedramnativeportconverter_wdata_chunk[1])) begin
        main_user_port_litedramnativeportconverter_wdata_sel <= {{8{main_user_port_litedramnativeportconverter_cmd_buffer_source_payload_sel[1]}}, {8{main_user_port_litedramnativeportconverter_cmd_buffer_source_payload_sel[0]}}};
    end
    builder_litedramcore_litedramcore_state <= builder_litedramcore_litedramcore_next_state;
    if (main_user_port_litedramnativeportconverter_cmd_addr_litedramcore_next_value_ce0) begin
        main_user_port_litedramnativeportconverter_cmd_addr <= main_user_port_litedramnativeportconverter_cmd_addr_litedramcore_next_value0;
    end
    if (main_user_port_litedramnativeportconverter_cmd_we_litedramcore_next_value_ce1) begin
        main_user_port_litedramnativeportconverter_cmd_we <= main_user_port_litedramnativeportconverter_cmd_we_litedramcore_next_value1;
    end
    if (main_user_port_litedramnativeportconverter_cmd_last_litedramcore_next_value_ce2) begin
        main_user_port_litedramnativeportconverter_cmd_last <= main_user_port_litedramnativeportconverter_cmd_last_litedramcore_next_value2;
    end
    if (main_user_port_litedramnativeportconverter_sel_litedramcore_next_value_ce3) begin
        main_user_port_litedramnativeportconverter_sel <= main_user_port_litedramnativeportconverter_sel_litedramcore_next_value3;
    end
    if (((~main_user_port_litedramnativeportconverter_rdata_fifo_pipe_valid_source_valid) | main_user_port_litedramnativeportconverter_rdata_fifo_pipe_valid_source_ready)) begin
        main_user_port_litedramnativeportconverter_rdata_fifo_pipe_valid_source_valid <= main_user_port_litedramnativeportconverter_rdata_fifo_pipe_valid_sink_valid;
        main_user_port_litedramnativeportconverter_rdata_fifo_pipe_valid_source_first <= main_user_port_litedramnativeportconverter_rdata_fifo_pipe_valid_sink_first;
        main_user_port_litedramnativeportconverter_rdata_fifo_pipe_valid_source_last <= main_user_port_litedramnativeportconverter_rdata_fifo_pipe_valid_sink_last;
        main_user_port_litedramnativeportconverter_rdata_fifo_pipe_valid_source_payload_data <= main_user_port_litedramnativeportconverter_rdata_fifo_pipe_valid_sink_payload_data;
    end
    if ((main_user_port_litedramnativeportconverter_rdata_converter_converter_source_valid & main_user_port_litedramnativeportconverter_rdata_converter_converter_source_ready)) begin
        if (main_user_port_litedramnativeportconverter_rdata_converter_converter_last) begin
            main_user_port_litedramnativeportconverter_rdata_converter_converter_mux <= 1'd0;
        end else begin
            main_user_port_litedramnativeportconverter_rdata_converter_converter_mux <= (main_user_port_litedramnativeportconverter_rdata_converter_converter_mux + 1'd1);
        end
    end
    if (main_user_port_litedramnativeportconverter_wdata_converter_converter_source_ready) begin
        main_user_port_litedramnativeportconverter_wdata_converter_converter_strobe_all <= 1'd0;
    end
    if (main_user_port_litedramnativeportconverter_wdata_converter_converter_load_part) begin
        if (((main_user_port_litedramnativeportconverter_wdata_converter_converter_demux == 1'd1) | main_user_port_litedramnativeportconverter_wdata_converter_converter_sink_last)) begin
            main_user_port_litedramnativeportconverter_wdata_converter_converter_demux <= 1'd0;
            main_user_port_litedramnativeportconverter_wdata_converter_converter_strobe_all <= 1'd1;
        end else begin
            main_user_port_litedramnativeportconverter_wdata_converter_converter_demux <= (main_user_port_litedramnativeportconverter_wdata_converter_converter_demux + 1'd1);
        end
    end
    if ((main_user_port_litedramnativeportconverter_wdata_converter_converter_source_valid & main_user_port_litedramnativeportconverter_wdata_converter_converter_source_ready)) begin
        if ((main_user_port_litedramnativeportconverter_wdata_converter_converter_sink_valid & main_user_port_litedramnativeportconverter_wdata_converter_converter_sink_ready)) begin
            main_user_port_litedramnativeportconverter_wdata_converter_converter_source_first <= main_user_port_litedramnativeportconverter_wdata_converter_converter_sink_first;
            main_user_port_litedramnativeportconverter_wdata_converter_converter_source_last <= main_user_port_litedramnativeportconverter_wdata_converter_converter_sink_last;
        end else begin
            main_user_port_litedramnativeportconverter_wdata_converter_converter_source_first <= 1'd0;
            main_user_port_litedramnativeportconverter_wdata_converter_converter_source_last <= 1'd0;
        end
    end else begin
        if ((main_user_port_litedramnativeportconverter_wdata_converter_converter_sink_valid & main_user_port_litedramnativeportconverter_wdata_converter_converter_sink_ready)) begin
            main_user_port_litedramnativeportconverter_wdata_converter_converter_source_first <= (main_user_port_litedramnativeportconverter_wdata_converter_converter_sink_first | main_user_port_litedramnativeportconverter_wdata_converter_converter_source_first);
            main_user_port_litedramnativeportconverter_wdata_converter_converter_source_last <= (main_user_port_litedramnativeportconverter_wdata_converter_converter_sink_last | main_user_port_litedramnativeportconverter_wdata_converter_converter_source_last);
        end
    end
    if (main_user_port_litedramnativeportconverter_wdata_converter_converter_load_part) begin
        case (main_user_port_litedramnativeportconverter_wdata_converter_converter_demux)
            1'd0: begin
                main_user_port_litedramnativeportconverter_wdata_converter_converter_source_payload_data[71:0] <= main_user_port_litedramnativeportconverter_wdata_converter_converter_sink_payload_data;
            end
            1'd1: begin
                main_user_port_litedramnativeportconverter_wdata_converter_converter_source_payload_data[143:72] <= main_user_port_litedramnativeportconverter_wdata_converter_converter_sink_payload_data;
            end
        endcase
    end
    if (main_user_port_litedramnativeportconverter_wdata_converter_converter_load_part) begin
        main_user_port_litedramnativeportconverter_wdata_converter_converter_source_payload_valid_token_count <= (main_user_port_litedramnativeportconverter_wdata_converter_converter_demux + 1'd1);
    end
    if (((~main_user_port_litedramnativeportconverter_wdata_fifo_pipe_valid_source_valid) | main_user_port_litedramnativeportconverter_wdata_fifo_pipe_valid_source_ready)) begin
        main_user_port_litedramnativeportconverter_wdata_fifo_pipe_valid_source_valid <= main_user_port_litedramnativeportconverter_wdata_fifo_pipe_valid_sink_valid;
        main_user_port_litedramnativeportconverter_wdata_fifo_pipe_valid_source_first <= main_user_port_litedramnativeportconverter_wdata_fifo_pipe_valid_sink_first;
        main_user_port_litedramnativeportconverter_wdata_fifo_pipe_valid_source_last <= main_user_port_litedramnativeportconverter_wdata_fifo_pipe_valid_sink_last;
        main_user_port_litedramnativeportconverter_wdata_fifo_pipe_valid_source_payload_data <= main_user_port_litedramnativeportconverter_wdata_fifo_pipe_valid_sink_payload_data;
        main_user_port_litedramnativeportconverter_wdata_fifo_pipe_valid_source_payload_we <= main_user_port_litedramnativeportconverter_wdata_fifo_pipe_valid_sink_payload_we;
    end
    if (((~main_user_port_litedramnativeportconverter_wdata_buffer_pipe_valid_source_valid) | main_user_port_litedramnativeportconverter_wdata_buffer_pipe_valid_source_ready)) begin
        main_user_port_litedramnativeportconverter_wdata_buffer_pipe_valid_source_valid <= main_user_port_litedramnativeportconverter_wdata_buffer_pipe_valid_sink_valid;
        main_user_port_litedramnativeportconverter_wdata_buffer_pipe_valid_source_first <= main_user_port_litedramnativeportconverter_wdata_buffer_pipe_valid_sink_first;
        main_user_port_litedramnativeportconverter_wdata_buffer_pipe_valid_source_last <= main_user_port_litedramnativeportconverter_wdata_buffer_pipe_valid_sink_last;
        main_user_port_litedramnativeportconverter_wdata_buffer_pipe_valid_source_payload_data <= main_user_port_litedramnativeportconverter_wdata_buffer_pipe_valid_sink_payload_data;
        main_user_port_litedramnativeportconverter_wdata_buffer_pipe_valid_source_payload_we <= main_user_port_litedramnativeportconverter_wdata_buffer_pipe_valid_sink_payload_we;
    end
    if (builder_litedramcore_litedramcore_roundrobin0_ce) begin
        case (builder_litedramcore_litedramcore_roundrobin0_grant)
            1'd0: begin
                if (builder_litedramcore_litedramcore_roundrobin0_request[1]) begin
                    builder_litedramcore_litedramcore_roundrobin0_grant <= 1'd1;
                end
            end
            1'd1: begin
                if (builder_litedramcore_litedramcore_roundrobin0_request[0]) begin
                    builder_litedramcore_litedramcore_roundrobin0_grant <= 1'd0;
                end
            end
        endcase
    end
    if (builder_litedramcore_litedramcore_roundrobin1_ce) begin
        case (builder_litedramcore_litedramcore_roundrobin1_grant)
            1'd0: begin
                if (builder_litedramcore_litedramcore_roundrobin1_request[1]) begin
                    builder_litedramcore_litedramcore_roundrobin1_grant <= 1'd1;
                end
            end
            1'd1: begin
                if (builder_litedramcore_litedramcore_roundrobin1_request[0]) begin
                    builder_litedramcore_litedramcore_roundrobin1_grant <= 1'd0;
                end
            end
        endcase
    end
    if (builder_litedramcore_litedramcore_roundrobin2_ce) begin
        case (builder_litedramcore_litedramcore_roundrobin2_grant)
            1'd0: begin
                if (builder_litedramcore_litedramcore_roundrobin2_request[1]) begin
                    builder_litedramcore_litedramcore_roundrobin2_grant <= 1'd1;
                end
            end
            1'd1: begin
                if (builder_litedramcore_litedramcore_roundrobin2_request[0]) begin
                    builder_litedramcore_litedramcore_roundrobin2_grant <= 1'd0;
                end
            end
        endcase
    end
    if (builder_litedramcore_litedramcore_roundrobin3_ce) begin
        case (builder_litedramcore_litedramcore_roundrobin3_grant)
            1'd0: begin
                if (builder_litedramcore_litedramcore_roundrobin3_request[1]) begin
                    builder_litedramcore_litedramcore_roundrobin3_grant <= 1'd1;
                end
            end
            1'd1: begin
                if (builder_litedramcore_litedramcore_roundrobin3_request[0]) begin
                    builder_litedramcore_litedramcore_roundrobin3_grant <= 1'd0;
                end
            end
        endcase
    end
    if (builder_litedramcore_litedramcore_roundrobin4_ce) begin
        case (builder_litedramcore_litedramcore_roundrobin4_grant)
            1'd0: begin
                if (builder_litedramcore_litedramcore_roundrobin4_request[1]) begin
                    builder_litedramcore_litedramcore_roundrobin4_grant <= 1'd1;
                end
            end
            1'd1: begin
                if (builder_litedramcore_litedramcore_roundrobin4_request[0]) begin
                    builder_litedramcore_litedramcore_roundrobin4_grant <= 1'd0;
                end
            end
        endcase
    end
    if (builder_litedramcore_litedramcore_roundrobin5_ce) begin
        case (builder_litedramcore_litedramcore_roundrobin5_grant)
            1'd0: begin
                if (builder_litedramcore_litedramcore_roundrobin5_request[1]) begin
                    builder_litedramcore_litedramcore_roundrobin5_grant <= 1'd1;
                end
            end
            1'd1: begin
                if (builder_litedramcore_litedramcore_roundrobin5_request[0]) begin
                    builder_litedramcore_litedramcore_roundrobin5_grant <= 1'd0;
                end
            end
        endcase
    end
    if (builder_litedramcore_litedramcore_roundrobin6_ce) begin
        case (builder_litedramcore_litedramcore_roundrobin6_grant)
            1'd0: begin
                if (builder_litedramcore_litedramcore_roundrobin6_request[1]) begin
                    builder_litedramcore_litedramcore_roundrobin6_grant <= 1'd1;
                end
            end
            1'd1: begin
                if (builder_litedramcore_litedramcore_roundrobin6_request[0]) begin
                    builder_litedramcore_litedramcore_roundrobin6_grant <= 1'd0;
                end
            end
        endcase
    end
    if (builder_litedramcore_litedramcore_roundrobin7_ce) begin
        case (builder_litedramcore_litedramcore_roundrobin7_grant)
            1'd0: begin
                if (builder_litedramcore_litedramcore_roundrobin7_request[1]) begin
                    builder_litedramcore_litedramcore_roundrobin7_grant <= 1'd1;
                end
            end
            1'd1: begin
                if (builder_litedramcore_litedramcore_roundrobin7_request[0]) begin
                    builder_litedramcore_litedramcore_roundrobin7_grant <= 1'd0;
                end
            end
        endcase
    end
    main_litedramcore_adr_offset_r <= main_litedramcore_wb_sdram_adr[1:0];
    builder_litedramcore_fullmemorywe_state <= builder_litedramcore_fullmemorywe_next_state;
    builder_litedramcore_litedramwishbone2native_state <= builder_litedramcore_litedramwishbone2native_next_state;
    if (main_litedramcore_aborted_litedramwishbone2native_next_value_ce) begin
        main_litedramcore_aborted <= main_litedramcore_aborted_litedramwishbone2native_next_value;
    end
    if (main_write_w_buffer_queue) begin
        if ((~main_write_w_buffer_dequeue)) begin
            main_write_w_buffer_level2 <= (main_write_w_buffer_level2 + 1'd1);
        end
    end else begin
        if (main_write_w_buffer_dequeue) begin
            main_write_w_buffer_level2 <= (main_write_w_buffer_level2 - 1'd1);
        end
    end
    if (((~main_write_pipe_valid_source_valid) | main_write_pipe_valid_source_ready)) begin
        main_write_pipe_valid_source_valid <= main_write_pipe_valid_sink_valid;
        main_write_pipe_valid_source_first <= main_write_pipe_valid_sink_first;
        main_write_pipe_valid_source_last <= main_write_pipe_valid_sink_last;
        main_write_pipe_valid_source_payload_addr <= main_write_pipe_valid_sink_payload_addr;
        main_write_pipe_valid_source_payload_burst <= main_write_pipe_valid_sink_payload_burst;
        main_write_pipe_valid_source_payload_len <= main_write_pipe_valid_sink_payload_len;
        main_write_pipe_valid_source_payload_size <= main_write_pipe_valid_sink_payload_size;
        main_write_pipe_valid_source_payload_lock <= main_write_pipe_valid_sink_payload_lock;
        main_write_pipe_valid_source_payload_prot <= main_write_pipe_valid_sink_payload_prot;
        main_write_pipe_valid_source_payload_cache <= main_write_pipe_valid_sink_payload_cache;
        main_write_pipe_valid_source_payload_qos <= main_write_pipe_valid_sink_payload_qos;
        main_write_pipe_valid_source_payload_region <= main_write_pipe_valid_sink_payload_region;
        main_write_pipe_valid_source_param_id <= main_write_pipe_valid_sink_param_id;
        main_write_pipe_valid_source_param_dest <= main_write_pipe_valid_sink_param_dest;
        main_write_pipe_valid_source_param_user <= main_write_pipe_valid_sink_param_user;
    end
    if ((main_write_aw_valid & main_write_aw_ready)) begin
        if (main_write_aw_last) begin
            main_write_beat_count <= 1'd0;
            main_write_beat_offset <= 1'd0;
        end else begin
            main_write_beat_count <= (main_write_beat_count + 1'd1);
            if ((((main_write_source_source_payload_burst == 1'd1) & 1'd1) | ((main_write_source_source_payload_burst == 2'd2) & 1'd1))) begin
                main_write_beat_offset <= (main_write_beat_offset + $signed({1'd0, main_write_beat_size}));
            end
        end
        if (((main_write_source_source_payload_burst == 2'd2) & 1'd1)) begin
            if (((main_write_aw_payload_addr & main_write_beat_wrap) == main_write_beat_wrap)) begin
                main_write_beat_offset <= (main_write_beat_offset - $signed({1'd0, main_write_beat_wrap}));
            end
        end
    end
    if (main_write_w_buffer_syncfifo_re) begin
        main_write_w_buffer_readable <= 1'd1;
    end else begin
        if (main_write_w_buffer_re) begin
            main_write_w_buffer_readable <= 1'd0;
        end
    end
    if (((main_write_w_buffer_syncfifo_we & main_write_w_buffer_syncfifo_writable) & (~main_write_w_buffer_replace))) begin
        main_write_w_buffer_produce <= (main_write_w_buffer_produce + 1'd1);
    end
    if (main_write_w_buffer_do_read) begin
        main_write_w_buffer_consume <= (main_write_w_buffer_consume + 1'd1);
    end
    if (((main_write_w_buffer_syncfifo_we & main_write_w_buffer_syncfifo_writable) & (~main_write_w_buffer_replace))) begin
        if ((~main_write_w_buffer_do_read)) begin
            main_write_w_buffer_level0 <= (main_write_w_buffer_level0 + 1'd1);
        end
    end else begin
        if (main_write_w_buffer_do_read) begin
            main_write_w_buffer_level0 <= (main_write_w_buffer_level0 - 1'd1);
        end
    end
    if (((main_write_id_buffer_syncfifo_we & main_write_id_buffer_syncfifo_writable) & (~main_write_id_buffer_replace))) begin
        main_write_id_buffer_produce <= (main_write_id_buffer_produce + 1'd1);
    end
    if (main_write_id_buffer_do_read) begin
        main_write_id_buffer_consume <= (main_write_id_buffer_consume + 1'd1);
    end
    if (((main_write_id_buffer_syncfifo_we & main_write_id_buffer_syncfifo_writable) & (~main_write_id_buffer_replace))) begin
        if ((~main_write_id_buffer_do_read)) begin
            main_write_id_buffer_level <= (main_write_id_buffer_level + 1'd1);
        end
    end else begin
        if (main_write_id_buffer_do_read) begin
            main_write_id_buffer_level <= (main_write_id_buffer_level - 1'd1);
        end
    end
    if (((main_write_resp_buffer_syncfifo_we & main_write_resp_buffer_syncfifo_writable) & (~main_write_resp_buffer_replace))) begin
        main_write_resp_buffer_produce <= (main_write_resp_buffer_produce + 1'd1);
    end
    if (main_write_resp_buffer_do_read) begin
        main_write_resp_buffer_consume <= (main_write_resp_buffer_consume + 1'd1);
    end
    if (((main_write_resp_buffer_syncfifo_we & main_write_resp_buffer_syncfifo_writable) & (~main_write_resp_buffer_replace))) begin
        if ((~main_write_resp_buffer_do_read)) begin
            main_write_resp_buffer_level <= (main_write_resp_buffer_level + 1'd1);
        end
    end else begin
        if (main_write_resp_buffer_do_read) begin
            main_write_resp_buffer_level <= (main_write_resp_buffer_level - 1'd1);
        end
    end
    if (main_read_r_buffer_queue) begin
        if ((~main_read_r_buffer_dequeue)) begin
            main_read_r_buffer_level2 <= (main_read_r_buffer_level2 + 1'd1);
        end
    end else begin
        if (main_read_r_buffer_dequeue) begin
            main_read_r_buffer_level2 <= (main_read_r_buffer_level2 - 1'd1);
        end
    end
    if (((~main_read_pipe_valid_source_valid) | main_read_pipe_valid_source_ready)) begin
        main_read_pipe_valid_source_valid <= main_read_pipe_valid_sink_valid;
        main_read_pipe_valid_source_first <= main_read_pipe_valid_sink_first;
        main_read_pipe_valid_source_last <= main_read_pipe_valid_sink_last;
        main_read_pipe_valid_source_payload_addr <= main_read_pipe_valid_sink_payload_addr;
        main_read_pipe_valid_source_payload_burst <= main_read_pipe_valid_sink_payload_burst;
        main_read_pipe_valid_source_payload_len <= main_read_pipe_valid_sink_payload_len;
        main_read_pipe_valid_source_payload_size <= main_read_pipe_valid_sink_payload_size;
        main_read_pipe_valid_source_payload_lock <= main_read_pipe_valid_sink_payload_lock;
        main_read_pipe_valid_source_payload_prot <= main_read_pipe_valid_sink_payload_prot;
        main_read_pipe_valid_source_payload_cache <= main_read_pipe_valid_sink_payload_cache;
        main_read_pipe_valid_source_payload_qos <= main_read_pipe_valid_sink_payload_qos;
        main_read_pipe_valid_source_payload_region <= main_read_pipe_valid_sink_payload_region;
        main_read_pipe_valid_source_param_id <= main_read_pipe_valid_sink_param_id;
        main_read_pipe_valid_source_param_dest <= main_read_pipe_valid_sink_param_dest;
        main_read_pipe_valid_source_param_user <= main_read_pipe_valid_sink_param_user;
    end
    if ((main_read_ar_valid & main_read_ar_ready)) begin
        if (main_read_ar_last) begin
            main_read_beat_count <= 1'd0;
            main_read_beat_offset <= 1'd0;
        end else begin
            main_read_beat_count <= (main_read_beat_count + 1'd1);
            if ((((main_read_source_source_payload_burst == 1'd1) & 1'd1) | ((main_read_source_source_payload_burst == 2'd2) & 1'd1))) begin
                main_read_beat_offset <= (main_read_beat_offset + $signed({1'd0, main_read_beat_size}));
            end
        end
        if (((main_read_source_source_payload_burst == 2'd2) & 1'd1)) begin
            if (((main_read_ar_payload_addr & main_read_beat_wrap) == main_read_beat_wrap)) begin
                main_read_beat_offset <= (main_read_beat_offset - $signed({1'd0, main_read_beat_wrap}));
            end
        end
    end
    if (main_read_r_buffer_syncfifo_re) begin
        main_read_r_buffer_readable <= 1'd1;
    end else begin
        if (main_read_r_buffer_re) begin
            main_read_r_buffer_readable <= 1'd0;
        end
    end
    if (((main_read_r_buffer_syncfifo_we & main_read_r_buffer_syncfifo_writable) & (~main_read_r_buffer_replace))) begin
        main_read_r_buffer_produce <= (main_read_r_buffer_produce + 1'd1);
    end
    if (main_read_r_buffer_do_read) begin
        main_read_r_buffer_consume <= (main_read_r_buffer_consume + 1'd1);
    end
    if (((main_read_r_buffer_syncfifo_we & main_read_r_buffer_syncfifo_writable) & (~main_read_r_buffer_replace))) begin
        if ((~main_read_r_buffer_do_read)) begin
            main_read_r_buffer_level0 <= (main_read_r_buffer_level0 + 1'd1);
        end
    end else begin
        if (main_read_r_buffer_do_read) begin
            main_read_r_buffer_level0 <= (main_read_r_buffer_level0 - 1'd1);
        end
    end
    if (((main_read_id_buffer_syncfifo_we & main_read_id_buffer_syncfifo_writable) & (~main_read_id_buffer_replace))) begin
        main_read_id_buffer_produce <= (main_read_id_buffer_produce + 1'd1);
    end
    if (main_read_id_buffer_do_read) begin
        main_read_id_buffer_consume <= (main_read_id_buffer_consume + 1'd1);
    end
    if (((main_read_id_buffer_syncfifo_we & main_read_id_buffer_syncfifo_writable) & (~main_read_id_buffer_replace))) begin
        if ((~main_read_id_buffer_do_read)) begin
            main_read_id_buffer_level <= (main_read_id_buffer_level + 1'd1);
        end
    end else begin
        if (main_read_id_buffer_do_read) begin
            main_read_id_buffer_level <= (main_read_id_buffer_level - 1'd1);
        end
    end
    if (main_ce) begin
        case (main_grant)
            1'd0: begin
                if (main_request[1]) begin
                    main_grant <= 1'd1;
                end
            end
            1'd1: begin
                if (main_request[0]) begin
                    main_grant <= 1'd0;
                end
            end
        endcase
    end
    builder_litedramcore_wishbone2csr_state <= builder_litedramcore_wishbone2csr_next_state;
    if (builder_litedramcore_dat_w_wishbone2csr_next_value_ce0) begin
        builder_litedramcore_dat_w <= builder_litedramcore_dat_w_wishbone2csr_next_value0;
    end
    if (builder_litedramcore_adr_wishbone2csr_next_value_ce1) begin
        builder_litedramcore_adr <= builder_litedramcore_adr_wishbone2csr_next_value1;
    end
    if (builder_litedramcore_we_wishbone2csr_next_value_ce2) begin
        builder_litedramcore_we <= builder_litedramcore_we_wishbone2csr_next_value2;
    end
    builder_interface0_bank_bus_dat_r <= 1'd0;
    if (builder_csrbank0_sel) begin
        case (builder_interface0_bank_bus_adr[8:0])
            1'd0: begin
                builder_interface0_bank_bus_dat_r <= builder_csrbank0_reset0_w;
            end
            1'd1: begin
                builder_interface0_bank_bus_dat_r <= builder_csrbank0_scratch0_w;
            end
            2'd2: begin
                builder_interface0_bank_bus_dat_r <= builder_csrbank0_bus_errors_w;
            end
        endcase
    end
    if (builder_csrbank0_reset0_re) begin
        main_litedramcore_reset_storage[1:0] <= builder_csrbank0_reset0_r;
    end
    main_litedramcore_reset_re <= builder_csrbank0_reset0_re;
    if (builder_csrbank0_scratch0_re) begin
        main_litedramcore_scratch_storage[31:0] <= builder_csrbank0_scratch0_r;
    end
    main_litedramcore_scratch_re <= builder_csrbank0_scratch0_re;
    main_litedramcore_bus_errors_re <= builder_csrbank0_bus_errors_re;
    builder_interface1_bank_bus_dat_r <= 1'd0;
    if (builder_csrbank1_sel) begin
        case (builder_interface1_bank_bus_adr[8:0])
            1'd0: begin
                builder_interface1_bank_bus_dat_r <= builder_csrbank1_init_done0_w;
            end
            1'd1: begin
                builder_interface1_bank_bus_dat_r <= builder_csrbank1_init_error0_w;
            end
        endcase
    end
    if (builder_csrbank1_init_done0_re) begin
        main_init_done_storage <= builder_csrbank1_init_done0_r;
    end
    main_init_done_re <= builder_csrbank1_init_done0_re;
    if (builder_csrbank1_init_error0_re) begin
        main_init_error_storage <= builder_csrbank1_init_error0_r;
    end
    main_init_error_re <= builder_csrbank1_init_error0_re;
    builder_interface2_bank_bus_dat_r <= 1'd0;
    if (builder_csrbank2_sel) begin
        case (builder_interface2_bank_bus_adr[8:0])
            1'd0: begin
                builder_interface2_bank_bus_dat_r <= builder_csrbank2_rst0_w;
            end
            1'd1: begin
                builder_interface2_bank_bus_dat_r <= builder_csrbank2_dly_sel0_w;
            end
            2'd2: begin
                builder_interface2_bank_bus_dat_r <= builder_csrbank2_half_sys8x_taps0_w;
            end
            2'd3: begin
                builder_interface2_bank_bus_dat_r <= builder_csrbank2_wlevel_en0_w;
            end
            3'd4: begin
                builder_interface2_bank_bus_dat_r <= main_a7ddrphy_wlevel_strobe_w;
            end
            3'd5: begin
                builder_interface2_bank_bus_dat_r <= main_a7ddrphy_rdly_dq_rst_w;
            end
            3'd6: begin
                builder_interface2_bank_bus_dat_r <= main_a7ddrphy_rdly_dq_inc_w;
            end
            3'd7: begin
                builder_interface2_bank_bus_dat_r <= main_a7ddrphy_rdly_dq_bitslip_rst_w;
            end
            4'd8: begin
                builder_interface2_bank_bus_dat_r <= main_a7ddrphy_rdly_dq_bitslip_w;
            end
            4'd9: begin
                builder_interface2_bank_bus_dat_r <= main_a7ddrphy_wdly_dq_bitslip_rst_w;
            end
            4'd10: begin
                builder_interface2_bank_bus_dat_r <= main_a7ddrphy_wdly_dq_bitslip_w;
            end
            4'd11: begin
                builder_interface2_bank_bus_dat_r <= builder_csrbank2_rdphase0_w;
            end
            4'd12: begin
                builder_interface2_bank_bus_dat_r <= builder_csrbank2_wrphase0_w;
            end
        endcase
    end
    if (builder_csrbank2_rst0_re) begin
        main_a7ddrphy_rst_storage <= builder_csrbank2_rst0_r;
    end
    main_a7ddrphy_rst_re <= builder_csrbank2_rst0_re;
    if (builder_csrbank2_dly_sel0_re) begin
        main_a7ddrphy_dly_sel_storage[1:0] <= builder_csrbank2_dly_sel0_r;
    end
    main_a7ddrphy_dly_sel_re <= builder_csrbank2_dly_sel0_re;
    if (builder_csrbank2_half_sys8x_taps0_re) begin
        main_a7ddrphy_half_sys8x_taps_storage[4:0] <= builder_csrbank2_half_sys8x_taps0_r;
    end
    main_a7ddrphy_half_sys8x_taps_re <= builder_csrbank2_half_sys8x_taps0_re;
    if (builder_csrbank2_wlevel_en0_re) begin
        main_a7ddrphy_wlevel_en_storage <= builder_csrbank2_wlevel_en0_r;
    end
    main_a7ddrphy_wlevel_en_re <= builder_csrbank2_wlevel_en0_re;
    if (builder_csrbank2_rdphase0_re) begin
        main_a7ddrphy_rdphase_storage[1:0] <= builder_csrbank2_rdphase0_r;
    end
    main_a7ddrphy_rdphase_re <= builder_csrbank2_rdphase0_re;
    if (builder_csrbank2_wrphase0_re) begin
        main_a7ddrphy_wrphase_storage[1:0] <= builder_csrbank2_wrphase0_r;
    end
    main_a7ddrphy_wrphase_re <= builder_csrbank2_wrphase0_re;
    builder_interface3_bank_bus_dat_r <= 1'd0;
    if (builder_csrbank3_sel) begin
        case (builder_interface3_bank_bus_adr[8:0])
            1'd0: begin
                builder_interface3_bank_bus_dat_r <= builder_csrbank3_dfii_control0_w;
            end
            1'd1: begin
                builder_interface3_bank_bus_dat_r <= builder_csrbank3_dfii_pi0_command0_w;
            end
            2'd2: begin
                builder_interface3_bank_bus_dat_r <= main_litedramcore_sdram_phaseinjector0_command_issue_w;
            end
            2'd3: begin
                builder_interface3_bank_bus_dat_r <= builder_csrbank3_dfii_pi0_address0_w;
            end
            3'd4: begin
                builder_interface3_bank_bus_dat_r <= builder_csrbank3_dfii_pi0_baddress0_w;
            end
            3'd5: begin
                builder_interface3_bank_bus_dat_r <= builder_csrbank3_dfii_pi0_wrdata0_w;
            end
            3'd6: begin
                builder_interface3_bank_bus_dat_r <= builder_csrbank3_dfii_pi0_rddata_w;
            end
            3'd7: begin
                builder_interface3_bank_bus_dat_r <= builder_csrbank3_dfii_pi1_command0_w;
            end
            4'd8: begin
                builder_interface3_bank_bus_dat_r <= main_litedramcore_sdram_phaseinjector1_command_issue_w;
            end
            4'd9: begin
                builder_interface3_bank_bus_dat_r <= builder_csrbank3_dfii_pi1_address0_w;
            end
            4'd10: begin
                builder_interface3_bank_bus_dat_r <= builder_csrbank3_dfii_pi1_baddress0_w;
            end
            4'd11: begin
                builder_interface3_bank_bus_dat_r <= builder_csrbank3_dfii_pi1_wrdata0_w;
            end
            4'd12: begin
                builder_interface3_bank_bus_dat_r <= builder_csrbank3_dfii_pi1_rddata_w;
            end
            4'd13: begin
                builder_interface3_bank_bus_dat_r <= builder_csrbank3_dfii_pi2_command0_w;
            end
            4'd14: begin
                builder_interface3_bank_bus_dat_r <= main_litedramcore_sdram_phaseinjector2_command_issue_w;
            end
            4'd15: begin
                builder_interface3_bank_bus_dat_r <= builder_csrbank3_dfii_pi2_address0_w;
            end
            5'd16: begin
                builder_interface3_bank_bus_dat_r <= builder_csrbank3_dfii_pi2_baddress0_w;
            end
            5'd17: begin
                builder_interface3_bank_bus_dat_r <= builder_csrbank3_dfii_pi2_wrdata0_w;
            end
            5'd18: begin
                builder_interface3_bank_bus_dat_r <= builder_csrbank3_dfii_pi2_rddata_w;
            end
            5'd19: begin
                builder_interface3_bank_bus_dat_r <= builder_csrbank3_dfii_pi3_command0_w;
            end
            5'd20: begin
                builder_interface3_bank_bus_dat_r <= main_litedramcore_sdram_phaseinjector3_command_issue_w;
            end
            5'd21: begin
                builder_interface3_bank_bus_dat_r <= builder_csrbank3_dfii_pi3_address0_w;
            end
            5'd22: begin
                builder_interface3_bank_bus_dat_r <= builder_csrbank3_dfii_pi3_baddress0_w;
            end
            5'd23: begin
                builder_interface3_bank_bus_dat_r <= builder_csrbank3_dfii_pi3_wrdata0_w;
            end
            5'd24: begin
                builder_interface3_bank_bus_dat_r <= builder_csrbank3_dfii_pi3_rddata_w;
            end
        endcase
    end
    if (builder_csrbank3_dfii_control0_re) begin
        main_litedramcore_sdram_storage[3:0] <= builder_csrbank3_dfii_control0_r;
    end
    main_litedramcore_sdram_re <= builder_csrbank3_dfii_control0_re;
    if (builder_csrbank3_dfii_pi0_command0_re) begin
        main_litedramcore_sdram_phaseinjector0_command_storage[7:0] <= builder_csrbank3_dfii_pi0_command0_r;
    end
    main_litedramcore_sdram_phaseinjector0_command_re <= builder_csrbank3_dfii_pi0_command0_re;
    if (builder_csrbank3_dfii_pi0_address0_re) begin
        main_litedramcore_sdram_phaseinjector0_address_storage[14:0] <= builder_csrbank3_dfii_pi0_address0_r;
    end
    main_litedramcore_sdram_phaseinjector0_address_re <= builder_csrbank3_dfii_pi0_address0_re;
    if (builder_csrbank3_dfii_pi0_baddress0_re) begin
        main_litedramcore_sdram_phaseinjector0_baddress_storage[2:0] <= builder_csrbank3_dfii_pi0_baddress0_r;
    end
    main_litedramcore_sdram_phaseinjector0_baddress_re <= builder_csrbank3_dfii_pi0_baddress0_re;
    if (builder_csrbank3_dfii_pi0_wrdata0_re) begin
        main_litedramcore_sdram_phaseinjector0_wrdata_storage[31:0] <= builder_csrbank3_dfii_pi0_wrdata0_r;
    end
    main_litedramcore_sdram_phaseinjector0_wrdata_re <= builder_csrbank3_dfii_pi0_wrdata0_re;
    main_litedramcore_sdram_phaseinjector0_rddata_re <= builder_csrbank3_dfii_pi0_rddata_re;
    if (builder_csrbank3_dfii_pi1_command0_re) begin
        main_litedramcore_sdram_phaseinjector1_command_storage[7:0] <= builder_csrbank3_dfii_pi1_command0_r;
    end
    main_litedramcore_sdram_phaseinjector1_command_re <= builder_csrbank3_dfii_pi1_command0_re;
    if (builder_csrbank3_dfii_pi1_address0_re) begin
        main_litedramcore_sdram_phaseinjector1_address_storage[14:0] <= builder_csrbank3_dfii_pi1_address0_r;
    end
    main_litedramcore_sdram_phaseinjector1_address_re <= builder_csrbank3_dfii_pi1_address0_re;
    if (builder_csrbank3_dfii_pi1_baddress0_re) begin
        main_litedramcore_sdram_phaseinjector1_baddress_storage[2:0] <= builder_csrbank3_dfii_pi1_baddress0_r;
    end
    main_litedramcore_sdram_phaseinjector1_baddress_re <= builder_csrbank3_dfii_pi1_baddress0_re;
    if (builder_csrbank3_dfii_pi1_wrdata0_re) begin
        main_litedramcore_sdram_phaseinjector1_wrdata_storage[31:0] <= builder_csrbank3_dfii_pi1_wrdata0_r;
    end
    main_litedramcore_sdram_phaseinjector1_wrdata_re <= builder_csrbank3_dfii_pi1_wrdata0_re;
    main_litedramcore_sdram_phaseinjector1_rddata_re <= builder_csrbank3_dfii_pi1_rddata_re;
    if (builder_csrbank3_dfii_pi2_command0_re) begin
        main_litedramcore_sdram_phaseinjector2_command_storage[7:0] <= builder_csrbank3_dfii_pi2_command0_r;
    end
    main_litedramcore_sdram_phaseinjector2_command_re <= builder_csrbank3_dfii_pi2_command0_re;
    if (builder_csrbank3_dfii_pi2_address0_re) begin
        main_litedramcore_sdram_phaseinjector2_address_storage[14:0] <= builder_csrbank3_dfii_pi2_address0_r;
    end
    main_litedramcore_sdram_phaseinjector2_address_re <= builder_csrbank3_dfii_pi2_address0_re;
    if (builder_csrbank3_dfii_pi2_baddress0_re) begin
        main_litedramcore_sdram_phaseinjector2_baddress_storage[2:0] <= builder_csrbank3_dfii_pi2_baddress0_r;
    end
    main_litedramcore_sdram_phaseinjector2_baddress_re <= builder_csrbank3_dfii_pi2_baddress0_re;
    if (builder_csrbank3_dfii_pi2_wrdata0_re) begin
        main_litedramcore_sdram_phaseinjector2_wrdata_storage[31:0] <= builder_csrbank3_dfii_pi2_wrdata0_r;
    end
    main_litedramcore_sdram_phaseinjector2_wrdata_re <= builder_csrbank3_dfii_pi2_wrdata0_re;
    main_litedramcore_sdram_phaseinjector2_rddata_re <= builder_csrbank3_dfii_pi2_rddata_re;
    if (builder_csrbank3_dfii_pi3_command0_re) begin
        main_litedramcore_sdram_phaseinjector3_command_storage[7:0] <= builder_csrbank3_dfii_pi3_command0_r;
    end
    main_litedramcore_sdram_phaseinjector3_command_re <= builder_csrbank3_dfii_pi3_command0_re;
    if (builder_csrbank3_dfii_pi3_address0_re) begin
        main_litedramcore_sdram_phaseinjector3_address_storage[14:0] <= builder_csrbank3_dfii_pi3_address0_r;
    end
    main_litedramcore_sdram_phaseinjector3_address_re <= builder_csrbank3_dfii_pi3_address0_re;
    if (builder_csrbank3_dfii_pi3_baddress0_re) begin
        main_litedramcore_sdram_phaseinjector3_baddress_storage[2:0] <= builder_csrbank3_dfii_pi3_baddress0_r;
    end
    main_litedramcore_sdram_phaseinjector3_baddress_re <= builder_csrbank3_dfii_pi3_baddress0_re;
    if (builder_csrbank3_dfii_pi3_wrdata0_re) begin
        main_litedramcore_sdram_phaseinjector3_wrdata_storage[31:0] <= builder_csrbank3_dfii_pi3_wrdata0_r;
    end
    main_litedramcore_sdram_phaseinjector3_wrdata_re <= builder_csrbank3_dfii_pi3_wrdata0_re;
    main_litedramcore_sdram_phaseinjector3_rddata_re <= builder_csrbank3_dfii_pi3_rddata_re;
    builder_interface4_bank_bus_dat_r <= 1'd0;
    if (builder_csrbank4_sel) begin
        case (builder_interface4_bank_bus_adr[8:0])
            1'd0: begin
                builder_interface4_bank_bus_dat_r <= builder_csrbank4_load0_w;
            end
            1'd1: begin
                builder_interface4_bank_bus_dat_r <= builder_csrbank4_reload0_w;
            end
            2'd2: begin
                builder_interface4_bank_bus_dat_r <= builder_csrbank4_en0_w;
            end
            2'd3: begin
                builder_interface4_bank_bus_dat_r <= builder_csrbank4_update_value0_w;
            end
            3'd4: begin
                builder_interface4_bank_bus_dat_r <= builder_csrbank4_value_w;
            end
            3'd5: begin
                builder_interface4_bank_bus_dat_r <= builder_csrbank4_ev_status_w;
            end
            3'd6: begin
                builder_interface4_bank_bus_dat_r <= builder_csrbank4_ev_pending_w;
            end
            3'd7: begin
                builder_interface4_bank_bus_dat_r <= builder_csrbank4_ev_enable0_w;
            end
        endcase
    end
    if (builder_csrbank4_load0_re) begin
        main_litedramcore_load_storage[31:0] <= builder_csrbank4_load0_r;
    end
    main_litedramcore_load_re <= builder_csrbank4_load0_re;
    if (builder_csrbank4_reload0_re) begin
        main_litedramcore_reload_storage[31:0] <= builder_csrbank4_reload0_r;
    end
    main_litedramcore_reload_re <= builder_csrbank4_reload0_re;
    if (builder_csrbank4_en0_re) begin
        main_litedramcore_en_storage <= builder_csrbank4_en0_r;
    end
    main_litedramcore_en_re <= builder_csrbank4_en0_re;
    if (builder_csrbank4_update_value0_re) begin
        main_litedramcore_update_value_storage <= builder_csrbank4_update_value0_r;
    end
    main_litedramcore_update_value_re <= builder_csrbank4_update_value0_re;
    main_litedramcore_value_re <= builder_csrbank4_value_re;
    main_litedramcore_status_re <= builder_csrbank4_ev_status_re;
    if (builder_csrbank4_ev_pending_re) begin
        main_litedramcore_pending_r <= builder_csrbank4_ev_pending_r;
    end
    main_litedramcore_pending_re <= builder_csrbank4_ev_pending_re;
    if (builder_csrbank4_ev_enable0_re) begin
        main_litedramcore_enable_storage <= builder_csrbank4_ev_enable0_r;
    end
    main_litedramcore_enable_re <= builder_csrbank4_ev_enable0_re;
    builder_interface5_bank_bus_dat_r <= 1'd0;
    if (builder_csrbank5_sel) begin
        case (builder_interface5_bank_bus_adr[8:0])
            1'd0: begin
                builder_interface5_bank_bus_dat_r <= main_uart_rxtx_w;
            end
            1'd1: begin
                builder_interface5_bank_bus_dat_r <= builder_csrbank5_txfull_w;
            end
            2'd2: begin
                builder_interface5_bank_bus_dat_r <= builder_csrbank5_rxempty_w;
            end
            2'd3: begin
                builder_interface5_bank_bus_dat_r <= builder_csrbank5_ev_status_w;
            end
            3'd4: begin
                builder_interface5_bank_bus_dat_r <= builder_csrbank5_ev_pending_w;
            end
            3'd5: begin
                builder_interface5_bank_bus_dat_r <= builder_csrbank5_ev_enable0_w;
            end
            3'd6: begin
                builder_interface5_bank_bus_dat_r <= builder_csrbank5_txempty_w;
            end
            3'd7: begin
                builder_interface5_bank_bus_dat_r <= builder_csrbank5_rxfull_w;
            end
        endcase
    end
    main_uart_txfull_re <= builder_csrbank5_txfull_re;
    main_uart_rxempty_re <= builder_csrbank5_rxempty_re;
    main_uart_status_re <= builder_csrbank5_ev_status_re;
    if (builder_csrbank5_ev_pending_re) begin
        main_uart_pending_r[1:0] <= builder_csrbank5_ev_pending_r;
    end
    main_uart_pending_re <= builder_csrbank5_ev_pending_re;
    if (builder_csrbank5_ev_enable0_re) begin
        main_uart_enable_storage[1:0] <= builder_csrbank5_ev_enable0_r;
    end
    main_uart_enable_re <= builder_csrbank5_ev_enable0_re;
    main_uart_txempty_re <= builder_csrbank5_txempty_re;
    main_uart_rxfull_re <= builder_csrbank5_rxfull_re;
    if (sys_rst) begin
        main_litedramcore_reset_storage <= 2'd0;
        main_litedramcore_reset_re <= 1'd0;
        main_litedramcore_scratch_storage <= 32'd305419896;
        main_litedramcore_scratch_re <= 1'd0;
        main_litedramcore_bus_errors_re <= 1'd0;
        main_litedramcore_bus_errors <= 32'd0;
        main_litedramcore_litedramcore_ram_bus_ack <= 1'd0;
        main_litedramcore_ram_bus_ram_bus_ack <= 1'd0;
        main_litedramcore_load_storage <= 32'd0;
        main_litedramcore_load_re <= 1'd0;
        main_litedramcore_reload_storage <= 32'd0;
        main_litedramcore_reload_re <= 1'd0;
        main_litedramcore_en_storage <= 1'd0;
        main_litedramcore_en_re <= 1'd0;
        main_litedramcore_update_value_storage <= 1'd0;
        main_litedramcore_update_value_re <= 1'd0;
        main_litedramcore_value_status <= 32'd0;
        main_litedramcore_value_re <= 1'd0;
        main_litedramcore_zero_pending <= 1'd0;
        main_litedramcore_zero_trigger_d <= 1'd0;
        main_litedramcore_status_re <= 1'd0;
        main_litedramcore_pending_re <= 1'd0;
        main_litedramcore_pending_r <= 1'd0;
        main_litedramcore_enable_storage <= 1'd0;
        main_litedramcore_enable_re <= 1'd0;
        main_litedramcore_value <= 32'd0;
        uart_tx <= 1'd1;
        main_tx_tick <= 1'd0;
        main_rx_tick <= 1'd0;
        main_rx_rx_d <= 1'd0;
        main_uart_txfull_re <= 1'd0;
        main_uart_rxempty_re <= 1'd0;
        main_uart_tx_pending <= 1'd0;
        main_uart_tx_trigger_d <= 1'd0;
        main_uart_rx_pending <= 1'd0;
        main_uart_rx_trigger_d <= 1'd0;
        main_uart_status_re <= 1'd0;
        main_uart_pending_re <= 1'd0;
        main_uart_pending_r <= 2'd0;
        main_uart_enable_storage <= 2'd0;
        main_uart_enable_re <= 1'd0;
        main_uart_txempty_re <= 1'd0;
        main_uart_rxfull_re <= 1'd0;
        main_uart_tx_fifo_readable <= 1'd0;
        main_uart_tx_fifo_level0 <= 5'd0;
        main_uart_tx_fifo_produce <= 4'd0;
        main_uart_tx_fifo_consume <= 4'd0;
        main_uart_rx_fifo_readable <= 1'd0;
        main_uart_rx_fifo_level0 <= 5'd0;
        main_uart_rx_fifo_produce <= 4'd0;
        main_uart_rx_fifo_consume <= 4'd0;
        main_a7ddrphy_rst_storage <= 1'd0;
        main_a7ddrphy_rst_re <= 1'd0;
        main_a7ddrphy_dly_sel_storage <= 2'd0;
        main_a7ddrphy_dly_sel_re <= 1'd0;
        main_a7ddrphy_half_sys8x_taps_storage <= 5'd8;
        main_a7ddrphy_half_sys8x_taps_re <= 1'd0;
        main_a7ddrphy_wlevel_en_storage <= 1'd0;
        main_a7ddrphy_wlevel_en_re <= 1'd0;
        main_a7ddrphy_rdphase_storage <= 2'd2;
        main_a7ddrphy_rdphase_re <= 1'd0;
        main_a7ddrphy_wrphase_storage <= 2'd3;
        main_a7ddrphy_wrphase_re <= 1'd0;
        main_a7ddrphy_dqs_oe_delay_tappeddelayline_tappeddelayline0 <= 1'd0;
        main_a7ddrphy_dqs_oe_delay_tappeddelayline_tappeddelayline1 <= 1'd0;
        main_a7ddrphy_dqspattern_o1 <= 8'd0;
        main_a7ddrphy_bitslip0_value0 <= 3'd7;
        main_a7ddrphy_bitslip1_value0 <= 3'd7;
        main_a7ddrphy_bitslip0_value1 <= 3'd7;
        main_a7ddrphy_bitslip1_value1 <= 3'd7;
        main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline0 <= 1'd0;
        main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1 <= 1'd0;
        main_a7ddrphy_bitslip0_value2 <= 3'd7;
        main_a7ddrphy_bitslip0_value3 <= 3'd7;
        main_a7ddrphy_bitslip1_value2 <= 3'd7;
        main_a7ddrphy_bitslip1_value3 <= 3'd7;
        main_a7ddrphy_bitslip2_value0 <= 3'd7;
        main_a7ddrphy_bitslip2_value1 <= 3'd7;
        main_a7ddrphy_bitslip3_value0 <= 3'd7;
        main_a7ddrphy_bitslip3_value1 <= 3'd7;
        main_a7ddrphy_bitslip4_value0 <= 3'd7;
        main_a7ddrphy_bitslip4_value1 <= 3'd7;
        main_a7ddrphy_bitslip5_value0 <= 3'd7;
        main_a7ddrphy_bitslip5_value1 <= 3'd7;
        main_a7ddrphy_bitslip6_value0 <= 3'd7;
        main_a7ddrphy_bitslip6_value1 <= 3'd7;
        main_a7ddrphy_bitslip7_value0 <= 3'd7;
        main_a7ddrphy_bitslip7_value1 <= 3'd7;
        main_a7ddrphy_bitslip8_value0 <= 3'd7;
        main_a7ddrphy_bitslip8_value1 <= 3'd7;
        main_a7ddrphy_bitslip9_value0 <= 3'd7;
        main_a7ddrphy_bitslip9_value1 <= 3'd7;
        main_a7ddrphy_bitslip10_value0 <= 3'd7;
        main_a7ddrphy_bitslip10_value1 <= 3'd7;
        main_a7ddrphy_bitslip11_value0 <= 3'd7;
        main_a7ddrphy_bitslip11_value1 <= 3'd7;
        main_a7ddrphy_bitslip12_value0 <= 3'd7;
        main_a7ddrphy_bitslip12_value1 <= 3'd7;
        main_a7ddrphy_bitslip13_value0 <= 3'd7;
        main_a7ddrphy_bitslip13_value1 <= 3'd7;
        main_a7ddrphy_bitslip14_value0 <= 3'd7;
        main_a7ddrphy_bitslip14_value1 <= 3'd7;
        main_a7ddrphy_bitslip15_value0 <= 3'd7;
        main_a7ddrphy_bitslip15_value1 <= 3'd7;
        main_a7ddrphy_rddata_en_tappeddelayline0 <= 1'd0;
        main_a7ddrphy_rddata_en_tappeddelayline1 <= 1'd0;
        main_a7ddrphy_rddata_en_tappeddelayline2 <= 1'd0;
        main_a7ddrphy_rddata_en_tappeddelayline3 <= 1'd0;
        main_a7ddrphy_rddata_en_tappeddelayline4 <= 1'd0;
        main_a7ddrphy_rddata_en_tappeddelayline5 <= 1'd0;
        main_a7ddrphy_rddata_en_tappeddelayline6 <= 1'd0;
        main_a7ddrphy_rddata_en_tappeddelayline7 <= 1'd0;
        main_a7ddrphy_wrdata_en_tappeddelayline0 <= 1'd0;
        main_a7ddrphy_wrdata_en_tappeddelayline1 <= 1'd0;
        main_a7ddrphy_wrdata_en_tappeddelayline2 <= 1'd0;
        main_litedramcore_sdram_storage <= 4'd1;
        main_litedramcore_sdram_re <= 1'd0;
        main_litedramcore_sdram_phaseinjector0_command_storage <= 8'd0;
        main_litedramcore_sdram_phaseinjector0_command_re <= 1'd0;
        main_litedramcore_sdram_phaseinjector0_address_re <= 1'd0;
        main_litedramcore_sdram_phaseinjector0_baddress_re <= 1'd0;
        main_litedramcore_sdram_phaseinjector0_wrdata_re <= 1'd0;
        main_litedramcore_sdram_phaseinjector0_rddata_status <= 32'd0;
        main_litedramcore_sdram_phaseinjector0_rddata_re <= 1'd0;
        main_litedramcore_sdram_phaseinjector1_command_storage <= 8'd0;
        main_litedramcore_sdram_phaseinjector1_command_re <= 1'd0;
        main_litedramcore_sdram_phaseinjector1_address_re <= 1'd0;
        main_litedramcore_sdram_phaseinjector1_baddress_re <= 1'd0;
        main_litedramcore_sdram_phaseinjector1_wrdata_re <= 1'd0;
        main_litedramcore_sdram_phaseinjector1_rddata_status <= 32'd0;
        main_litedramcore_sdram_phaseinjector1_rddata_re <= 1'd0;
        main_litedramcore_sdram_phaseinjector2_command_storage <= 8'd0;
        main_litedramcore_sdram_phaseinjector2_command_re <= 1'd0;
        main_litedramcore_sdram_phaseinjector2_address_re <= 1'd0;
        main_litedramcore_sdram_phaseinjector2_baddress_re <= 1'd0;
        main_litedramcore_sdram_phaseinjector2_wrdata_re <= 1'd0;
        main_litedramcore_sdram_phaseinjector2_rddata_status <= 32'd0;
        main_litedramcore_sdram_phaseinjector2_rddata_re <= 1'd0;
        main_litedramcore_sdram_phaseinjector3_command_storage <= 8'd0;
        main_litedramcore_sdram_phaseinjector3_command_re <= 1'd0;
        main_litedramcore_sdram_phaseinjector3_address_re <= 1'd0;
        main_litedramcore_sdram_phaseinjector3_baddress_re <= 1'd0;
        main_litedramcore_sdram_phaseinjector3_wrdata_re <= 1'd0;
        main_litedramcore_sdram_phaseinjector3_rddata_status <= 32'd0;
        main_litedramcore_sdram_phaseinjector3_rddata_re <= 1'd0;
        main_litedramcore_sdram_dfi_p0_address <= 15'd0;
        main_litedramcore_sdram_dfi_p0_bank <= 3'd0;
        main_litedramcore_sdram_dfi_p0_cas_n <= 1'd1;
        main_litedramcore_sdram_dfi_p0_cs_n <= 1'd1;
        main_litedramcore_sdram_dfi_p0_ras_n <= 1'd1;
        main_litedramcore_sdram_dfi_p0_we_n <= 1'd1;
        main_litedramcore_sdram_dfi_p0_wrdata_en <= 1'd0;
        main_litedramcore_sdram_dfi_p0_rddata_en <= 1'd0;
        main_litedramcore_sdram_dfi_p1_address <= 15'd0;
        main_litedramcore_sdram_dfi_p1_bank <= 3'd0;
        main_litedramcore_sdram_dfi_p1_cas_n <= 1'd1;
        main_litedramcore_sdram_dfi_p1_cs_n <= 1'd1;
        main_litedramcore_sdram_dfi_p1_ras_n <= 1'd1;
        main_litedramcore_sdram_dfi_p1_we_n <= 1'd1;
        main_litedramcore_sdram_dfi_p1_wrdata_en <= 1'd0;
        main_litedramcore_sdram_dfi_p1_rddata_en <= 1'd0;
        main_litedramcore_sdram_dfi_p2_address <= 15'd0;
        main_litedramcore_sdram_dfi_p2_bank <= 3'd0;
        main_litedramcore_sdram_dfi_p2_cas_n <= 1'd1;
        main_litedramcore_sdram_dfi_p2_cs_n <= 1'd1;
        main_litedramcore_sdram_dfi_p2_ras_n <= 1'd1;
        main_litedramcore_sdram_dfi_p2_we_n <= 1'd1;
        main_litedramcore_sdram_dfi_p2_wrdata_en <= 1'd0;
        main_litedramcore_sdram_dfi_p2_rddata_en <= 1'd0;
        main_litedramcore_sdram_dfi_p3_address <= 15'd0;
        main_litedramcore_sdram_dfi_p3_bank <= 3'd0;
        main_litedramcore_sdram_dfi_p3_cas_n <= 1'd1;
        main_litedramcore_sdram_dfi_p3_cs_n <= 1'd1;
        main_litedramcore_sdram_dfi_p3_ras_n <= 1'd1;
        main_litedramcore_sdram_dfi_p3_we_n <= 1'd1;
        main_litedramcore_sdram_dfi_p3_wrdata_en <= 1'd0;
        main_litedramcore_sdram_dfi_p3_rddata_en <= 1'd0;
        main_litedramcore_sdram_cmd_payload_a <= 15'd0;
        main_litedramcore_sdram_cmd_payload_ba <= 3'd0;
        main_litedramcore_sdram_cmd_payload_cas <= 1'd0;
        main_litedramcore_sdram_cmd_payload_ras <= 1'd0;
        main_litedramcore_sdram_cmd_payload_we <= 1'd0;
        main_litedramcore_sdram_timer_count1 <= 10'd781;
        main_litedramcore_sdram_postponer_req_o <= 1'd0;
        main_litedramcore_sdram_postponer_count <= 1'd0;
        main_litedramcore_sdram_sequencer_done1 <= 1'd0;
        main_litedramcore_sdram_sequencer_counter <= 6'd0;
        main_litedramcore_sdram_sequencer_count <= 1'd0;
        main_litedramcore_sdram_zqcs_timer_count1 <= 27'd99999999;
        main_litedramcore_sdram_zqcs_executer_done <= 1'd0;
        main_litedramcore_sdram_zqcs_executer_counter <= 5'd0;
        main_litedramcore_sdram_bankmachine0_level <= 5'd0;
        main_litedramcore_sdram_bankmachine0_produce <= 4'd0;
        main_litedramcore_sdram_bankmachine0_consume <= 4'd0;
        main_litedramcore_sdram_bankmachine0_pipe_valid_source_valid <= 1'd0;
        main_litedramcore_sdram_bankmachine0_pipe_valid_source_payload_we <= 1'd0;
        main_litedramcore_sdram_bankmachine0_pipe_valid_source_payload_addr <= 22'd0;
        main_litedramcore_sdram_bankmachine0_row <= 15'd0;
        main_litedramcore_sdram_bankmachine0_row_opened <= 1'd0;
        main_litedramcore_sdram_bankmachine0_twtpcon_ready <= 1'd0;
        main_litedramcore_sdram_bankmachine0_twtpcon_count <= 3'd0;
        main_litedramcore_sdram_bankmachine0_trccon_ready <= 1'd0;
        main_litedramcore_sdram_bankmachine0_trccon_count <= 3'd0;
        main_litedramcore_sdram_bankmachine0_trascon_ready <= 1'd0;
        main_litedramcore_sdram_bankmachine0_trascon_count <= 3'd0;
        main_litedramcore_sdram_bankmachine1_level <= 5'd0;
        main_litedramcore_sdram_bankmachine1_produce <= 4'd0;
        main_litedramcore_sdram_bankmachine1_consume <= 4'd0;
        main_litedramcore_sdram_bankmachine1_pipe_valid_source_valid <= 1'd0;
        main_litedramcore_sdram_bankmachine1_pipe_valid_source_payload_we <= 1'd0;
        main_litedramcore_sdram_bankmachine1_pipe_valid_source_payload_addr <= 22'd0;
        main_litedramcore_sdram_bankmachine1_row <= 15'd0;
        main_litedramcore_sdram_bankmachine1_row_opened <= 1'd0;
        main_litedramcore_sdram_bankmachine1_twtpcon_ready <= 1'd0;
        main_litedramcore_sdram_bankmachine1_twtpcon_count <= 3'd0;
        main_litedramcore_sdram_bankmachine1_trccon_ready <= 1'd0;
        main_litedramcore_sdram_bankmachine1_trccon_count <= 3'd0;
        main_litedramcore_sdram_bankmachine1_trascon_ready <= 1'd0;
        main_litedramcore_sdram_bankmachine1_trascon_count <= 3'd0;
        main_litedramcore_sdram_bankmachine2_level <= 5'd0;
        main_litedramcore_sdram_bankmachine2_produce <= 4'd0;
        main_litedramcore_sdram_bankmachine2_consume <= 4'd0;
        main_litedramcore_sdram_bankmachine2_pipe_valid_source_valid <= 1'd0;
        main_litedramcore_sdram_bankmachine2_pipe_valid_source_payload_we <= 1'd0;
        main_litedramcore_sdram_bankmachine2_pipe_valid_source_payload_addr <= 22'd0;
        main_litedramcore_sdram_bankmachine2_row <= 15'd0;
        main_litedramcore_sdram_bankmachine2_row_opened <= 1'd0;
        main_litedramcore_sdram_bankmachine2_twtpcon_ready <= 1'd0;
        main_litedramcore_sdram_bankmachine2_twtpcon_count <= 3'd0;
        main_litedramcore_sdram_bankmachine2_trccon_ready <= 1'd0;
        main_litedramcore_sdram_bankmachine2_trccon_count <= 3'd0;
        main_litedramcore_sdram_bankmachine2_trascon_ready <= 1'd0;
        main_litedramcore_sdram_bankmachine2_trascon_count <= 3'd0;
        main_litedramcore_sdram_bankmachine3_level <= 5'd0;
        main_litedramcore_sdram_bankmachine3_produce <= 4'd0;
        main_litedramcore_sdram_bankmachine3_consume <= 4'd0;
        main_litedramcore_sdram_bankmachine3_pipe_valid_source_valid <= 1'd0;
        main_litedramcore_sdram_bankmachine3_pipe_valid_source_payload_we <= 1'd0;
        main_litedramcore_sdram_bankmachine3_pipe_valid_source_payload_addr <= 22'd0;
        main_litedramcore_sdram_bankmachine3_row <= 15'd0;
        main_litedramcore_sdram_bankmachine3_row_opened <= 1'd0;
        main_litedramcore_sdram_bankmachine3_twtpcon_ready <= 1'd0;
        main_litedramcore_sdram_bankmachine3_twtpcon_count <= 3'd0;
        main_litedramcore_sdram_bankmachine3_trccon_ready <= 1'd0;
        main_litedramcore_sdram_bankmachine3_trccon_count <= 3'd0;
        main_litedramcore_sdram_bankmachine3_trascon_ready <= 1'd0;
        main_litedramcore_sdram_bankmachine3_trascon_count <= 3'd0;
        main_litedramcore_sdram_bankmachine4_level <= 5'd0;
        main_litedramcore_sdram_bankmachine4_produce <= 4'd0;
        main_litedramcore_sdram_bankmachine4_consume <= 4'd0;
        main_litedramcore_sdram_bankmachine4_pipe_valid_source_valid <= 1'd0;
        main_litedramcore_sdram_bankmachine4_pipe_valid_source_payload_we <= 1'd0;
        main_litedramcore_sdram_bankmachine4_pipe_valid_source_payload_addr <= 22'd0;
        main_litedramcore_sdram_bankmachine4_row <= 15'd0;
        main_litedramcore_sdram_bankmachine4_row_opened <= 1'd0;
        main_litedramcore_sdram_bankmachine4_twtpcon_ready <= 1'd0;
        main_litedramcore_sdram_bankmachine4_twtpcon_count <= 3'd0;
        main_litedramcore_sdram_bankmachine4_trccon_ready <= 1'd0;
        main_litedramcore_sdram_bankmachine4_trccon_count <= 3'd0;
        main_litedramcore_sdram_bankmachine4_trascon_ready <= 1'd0;
        main_litedramcore_sdram_bankmachine4_trascon_count <= 3'd0;
        main_litedramcore_sdram_bankmachine5_level <= 5'd0;
        main_litedramcore_sdram_bankmachine5_produce <= 4'd0;
        main_litedramcore_sdram_bankmachine5_consume <= 4'd0;
        main_litedramcore_sdram_bankmachine5_pipe_valid_source_valid <= 1'd0;
        main_litedramcore_sdram_bankmachine5_pipe_valid_source_payload_we <= 1'd0;
        main_litedramcore_sdram_bankmachine5_pipe_valid_source_payload_addr <= 22'd0;
        main_litedramcore_sdram_bankmachine5_row <= 15'd0;
        main_litedramcore_sdram_bankmachine5_row_opened <= 1'd0;
        main_litedramcore_sdram_bankmachine5_twtpcon_ready <= 1'd0;
        main_litedramcore_sdram_bankmachine5_twtpcon_count <= 3'd0;
        main_litedramcore_sdram_bankmachine5_trccon_ready <= 1'd0;
        main_litedramcore_sdram_bankmachine5_trccon_count <= 3'd0;
        main_litedramcore_sdram_bankmachine5_trascon_ready <= 1'd0;
        main_litedramcore_sdram_bankmachine5_trascon_count <= 3'd0;
        main_litedramcore_sdram_bankmachine6_level <= 5'd0;
        main_litedramcore_sdram_bankmachine6_produce <= 4'd0;
        main_litedramcore_sdram_bankmachine6_consume <= 4'd0;
        main_litedramcore_sdram_bankmachine6_pipe_valid_source_valid <= 1'd0;
        main_litedramcore_sdram_bankmachine6_pipe_valid_source_payload_we <= 1'd0;
        main_litedramcore_sdram_bankmachine6_pipe_valid_source_payload_addr <= 22'd0;
        main_litedramcore_sdram_bankmachine6_row <= 15'd0;
        main_litedramcore_sdram_bankmachine6_row_opened <= 1'd0;
        main_litedramcore_sdram_bankmachine6_twtpcon_ready <= 1'd0;
        main_litedramcore_sdram_bankmachine6_twtpcon_count <= 3'd0;
        main_litedramcore_sdram_bankmachine6_trccon_ready <= 1'd0;
        main_litedramcore_sdram_bankmachine6_trccon_count <= 3'd0;
        main_litedramcore_sdram_bankmachine6_trascon_ready <= 1'd0;
        main_litedramcore_sdram_bankmachine6_trascon_count <= 3'd0;
        main_litedramcore_sdram_bankmachine7_level <= 5'd0;
        main_litedramcore_sdram_bankmachine7_produce <= 4'd0;
        main_litedramcore_sdram_bankmachine7_consume <= 4'd0;
        main_litedramcore_sdram_bankmachine7_pipe_valid_source_valid <= 1'd0;
        main_litedramcore_sdram_bankmachine7_pipe_valid_source_payload_we <= 1'd0;
        main_litedramcore_sdram_bankmachine7_pipe_valid_source_payload_addr <= 22'd0;
        main_litedramcore_sdram_bankmachine7_row <= 15'd0;
        main_litedramcore_sdram_bankmachine7_row_opened <= 1'd0;
        main_litedramcore_sdram_bankmachine7_twtpcon_ready <= 1'd0;
        main_litedramcore_sdram_bankmachine7_twtpcon_count <= 3'd0;
        main_litedramcore_sdram_bankmachine7_trccon_ready <= 1'd0;
        main_litedramcore_sdram_bankmachine7_trccon_count <= 3'd0;
        main_litedramcore_sdram_bankmachine7_trascon_ready <= 1'd0;
        main_litedramcore_sdram_bankmachine7_trascon_count <= 3'd0;
        main_litedramcore_sdram_choose_cmd_grant <= 3'd0;
        main_litedramcore_sdram_choose_req_grant <= 3'd0;
        main_litedramcore_sdram_trrdcon_ready <= 1'd0;
        main_litedramcore_sdram_trrdcon_count <= 1'd0;
        main_litedramcore_sdram_tfawcon_ready <= 1'd1;
        main_litedramcore_sdram_tfawcon_window <= 5'd0;
        main_litedramcore_sdram_tccdcon_ready <= 1'd0;
        main_litedramcore_sdram_tccdcon_count <= 1'd0;
        main_litedramcore_sdram_twtrcon_ready <= 1'd0;
        main_litedramcore_sdram_twtrcon_count <= 3'd0;
        main_litedramcore_sdram_time0 <= 5'd0;
        main_litedramcore_sdram_time1 <= 4'd0;
        main_litedramcore_aborted <= 1'd0;
        main_init_done_storage <= 1'd0;
        main_init_done_re <= 1'd0;
        main_init_error_storage <= 1'd0;
        main_init_error_re <= 1'd0;
        main_user_enable <= 1'd0;
        main_user_port_litedramnativeportconverter_sel <= 2'd0;
        main_user_port_litedramnativeportconverter_cmd_addr <= 26'd0;
        main_user_port_litedramnativeportconverter_cmd_we <= 1'd0;
        main_user_port_litedramnativeportconverter_cmd_last <= 1'd0;
        main_user_port_litedramnativeportconverter_read_lock <= 1'd0;
        main_user_port_litedramnativeportconverter_read_unlocked <= 1'd0;
        main_user_port_litedramnativeportconverter_rdata_fifo_pipe_valid_source_valid <= 1'd0;
        main_user_port_litedramnativeportconverter_rdata_fifo_pipe_valid_source_payload_data <= 128'd0;
        main_user_port_litedramnativeportconverter_rdata_converter_converter_mux <= 1'd0;
        main_user_port_litedramnativeportconverter_rdata_chunk <= 2'd1;
        main_user_port_litedramnativeportconverter_wdata_fifo_pipe_valid_source_valid <= 1'd0;
        main_user_port_litedramnativeportconverter_wdata_fifo_pipe_valid_source_payload_data <= 64'd0;
        main_user_port_litedramnativeportconverter_wdata_fifo_pipe_valid_source_payload_we <= 8'd0;
        main_user_port_litedramnativeportconverter_wdata_buffer_pipe_valid_source_valid <= 1'd0;
        main_user_port_litedramnativeportconverter_wdata_buffer_pipe_valid_source_payload_data <= 128'd0;
        main_user_port_litedramnativeportconverter_wdata_buffer_pipe_valid_source_payload_we <= 16'd0;
        main_user_port_litedramnativeportconverter_wdata_converter_converter_source_payload_data <= 144'd0;
        main_user_port_litedramnativeportconverter_wdata_converter_converter_source_payload_valid_token_count <= 2'd0;
        main_user_port_litedramnativeportconverter_wdata_converter_converter_demux <= 1'd0;
        main_user_port_litedramnativeportconverter_wdata_converter_converter_strobe_all <= 1'd0;
        main_user_port_litedramnativeportconverter_wdata_chunk <= 2'd1;
        main_user_port_litedramnativeportconverter_wdata_sel <= 16'd0;
        main_write_pipe_valid_source_valid <= 1'd0;
        main_write_pipe_valid_source_payload_addr <= 29'd0;
        main_write_pipe_valid_source_payload_burst <= 2'd0;
        main_write_pipe_valid_source_payload_len <= 8'd0;
        main_write_pipe_valid_source_payload_size <= 3'd0;
        main_write_pipe_valid_source_payload_lock <= 1'd0;
        main_write_pipe_valid_source_payload_prot <= 3'd0;
        main_write_pipe_valid_source_payload_cache <= 4'd0;
        main_write_pipe_valid_source_payload_qos <= 4'd0;
        main_write_pipe_valid_source_payload_region <= 4'd0;
        main_write_beat_count <= 8'd0;
        main_write_beat_offset <= 13'd0;
        main_write_w_buffer_readable <= 1'd0;
        main_write_w_buffer_level0 <= 5'd0;
        main_write_w_buffer_produce <= 4'd0;
        main_write_w_buffer_consume <= 4'd0;
        main_write_id_buffer_level <= 5'd0;
        main_write_id_buffer_produce <= 4'd0;
        main_write_id_buffer_consume <= 4'd0;
        main_write_resp_buffer_level <= 5'd0;
        main_write_resp_buffer_produce <= 4'd0;
        main_write_resp_buffer_consume <= 4'd0;
        main_write_w_buffer_level2 <= 5'd0;
        main_read_pipe_valid_source_valid <= 1'd0;
        main_read_pipe_valid_source_payload_addr <= 29'd0;
        main_read_pipe_valid_source_payload_burst <= 2'd0;
        main_read_pipe_valid_source_payload_len <= 8'd0;
        main_read_pipe_valid_source_payload_size <= 3'd0;
        main_read_pipe_valid_source_payload_lock <= 1'd0;
        main_read_pipe_valid_source_payload_prot <= 3'd0;
        main_read_pipe_valid_source_payload_cache <= 4'd0;
        main_read_pipe_valid_source_payload_qos <= 4'd0;
        main_read_pipe_valid_source_payload_region <= 4'd0;
        main_read_beat_count <= 8'd0;
        main_read_beat_offset <= 13'd0;
        main_read_r_buffer_readable <= 1'd0;
        main_read_r_buffer_level0 <= 5'd0;
        main_read_r_buffer_produce <= 4'd0;
        main_read_r_buffer_consume <= 4'd0;
        main_read_r_buffer_level2 <= 5'd0;
        main_read_id_buffer_level <= 5'd0;
        main_read_id_buffer_produce <= 4'd0;
        main_read_id_buffer_consume <= 4'd0;
        main_grant <= 1'd0;
        builder_litedramcore_we <= 1'd0;
        builder_grant <= 1'd0;
        builder_slave_sel_r <= 4'd0;
        builder_count <= 20'd1000000;
        builder_litedramcore_rs232phytx_state <= 1'd0;
        builder_litedramcore_rs232phyrx_state <= 1'd0;
        builder_litedramcore_litedramcore_refresher_state <= 2'd0;
        builder_litedramcore_litedramcore_bankmachine0_state <= 4'd0;
        builder_litedramcore_litedramcore_bankmachine1_state <= 4'd0;
        builder_litedramcore_litedramcore_bankmachine2_state <= 4'd0;
        builder_litedramcore_litedramcore_bankmachine3_state <= 4'd0;
        builder_litedramcore_litedramcore_bankmachine4_state <= 4'd0;
        builder_litedramcore_litedramcore_bankmachine5_state <= 4'd0;
        builder_litedramcore_litedramcore_bankmachine6_state <= 4'd0;
        builder_litedramcore_litedramcore_bankmachine7_state <= 4'd0;
        builder_litedramcore_litedramcore_multiplexer_state <= 4'd0;
        builder_litedramcore_litedramcore_state <= 2'd0;
        builder_litedramcore_litedramcore_roundrobin0_grant <= 1'd0;
        builder_litedramcore_litedramcore_roundrobin1_grant <= 1'd0;
        builder_litedramcore_litedramcore_roundrobin2_grant <= 1'd0;
        builder_litedramcore_litedramcore_roundrobin3_grant <= 1'd0;
        builder_litedramcore_litedramcore_roundrobin4_grant <= 1'd0;
        builder_litedramcore_litedramcore_roundrobin5_grant <= 1'd0;
        builder_litedramcore_litedramcore_roundrobin6_grant <= 1'd0;
        builder_litedramcore_litedramcore_roundrobin7_grant <= 1'd0;
        builder_litedramcore_litedramcore_new_master_wdata_ready0 <= 1'd0;
        builder_litedramcore_litedramcore_new_master_wdata_ready1 <= 1'd0;
        builder_litedramcore_litedramcore_new_master_wdata_ready2 <= 1'd0;
        builder_litedramcore_litedramcore_new_master_wdata_ready3 <= 1'd0;
        builder_litedramcore_litedramcore_new_master_rdata_valid0 <= 1'd0;
        builder_litedramcore_litedramcore_new_master_rdata_valid1 <= 1'd0;
        builder_litedramcore_litedramcore_new_master_rdata_valid2 <= 1'd0;
        builder_litedramcore_litedramcore_new_master_rdata_valid3 <= 1'd0;
        builder_litedramcore_litedramcore_new_master_rdata_valid4 <= 1'd0;
        builder_litedramcore_litedramcore_new_master_rdata_valid5 <= 1'd0;
        builder_litedramcore_litedramcore_new_master_rdata_valid6 <= 1'd0;
        builder_litedramcore_litedramcore_new_master_rdata_valid7 <= 1'd0;
        builder_litedramcore_litedramcore_new_master_rdata_valid8 <= 1'd0;
        builder_litedramcore_litedramcore_new_master_rdata_valid9 <= 1'd0;
        builder_litedramcore_litedramcore_new_master_rdata_valid10 <= 1'd0;
        builder_litedramcore_litedramcore_new_master_rdata_valid11 <= 1'd0;
        builder_litedramcore_litedramcore_new_master_rdata_valid12 <= 1'd0;
        builder_litedramcore_litedramcore_new_master_rdata_valid13 <= 1'd0;
        builder_litedramcore_litedramcore_new_master_rdata_valid14 <= 1'd0;
        builder_litedramcore_litedramcore_new_master_rdata_valid15 <= 1'd0;
        builder_litedramcore_litedramcore_new_master_rdata_valid16 <= 1'd0;
        builder_litedramcore_litedramcore_new_master_rdata_valid17 <= 1'd0;
        builder_litedramcore_fullmemorywe_state <= 2'd0;
        builder_litedramcore_litedramwishbone2native_state <= 2'd0;
        builder_litedramcore_wishbone2csr_state <= 2'd0;
    end
    builder_regs0 <= uart_rx;
    builder_regs1 <= builder_regs0;
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Memory rom: 7111-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [31:0] rom[0:7110];
initial begin
	$readmemh("litedram_core.init", rom);
end
reg [31:0] rom_dat0;
always @(posedge sys_clk) begin
	rom_dat0 <= rom[main_litedramcore_litedramcore_adr];
end
assign main_litedramcore_litedramcore_dat_r = rom_dat0;


//------------------------------------------------------------------------------
// Memory sram: 2048-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] sram[0:2047];
initial begin
	$readmemh("mem_1.init", sram);
end
reg [10:0] sram_adr0;
always @(posedge sys_clk) begin
	if (main_litedramcore_ram_we[0])
		sram[main_litedramcore_ram_adr][7:0] <= main_litedramcore_ram_dat_w[7:0];
	if (main_litedramcore_ram_we[1])
		sram[main_litedramcore_ram_adr][15:8] <= main_litedramcore_ram_dat_w[15:8];
	if (main_litedramcore_ram_we[2])
		sram[main_litedramcore_ram_adr][23:16] <= main_litedramcore_ram_dat_w[23:16];
	if (main_litedramcore_ram_we[3])
		sram[main_litedramcore_ram_adr][31:24] <= main_litedramcore_ram_dat_w[31:24];
	sram_adr0 <= main_litedramcore_ram_adr;
end
assign main_litedramcore_ram_dat_r = sram[sram_adr0];


//------------------------------------------------------------------------------
// Memory storage: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage[0:15];
reg [9:0] storage_dat0;
reg [9:0] storage_dat1;
always @(posedge sys_clk) begin
	if (main_uart_tx_fifo_wrport_we)
		storage[main_uart_tx_fifo_wrport_adr] <= main_uart_tx_fifo_wrport_dat_w;
	storage_dat0 <= storage[main_uart_tx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (main_uart_tx_fifo_rdport_re)
		storage_dat1 <= storage[main_uart_tx_fifo_rdport_adr];
end
assign main_uart_tx_fifo_wrport_dat_r = storage_dat0;
assign main_uart_tx_fifo_rdport_dat_r = storage_dat1;


//------------------------------------------------------------------------------
// Memory storage_1: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_1[0:15];
reg [9:0] storage_1_dat0;
reg [9:0] storage_1_dat1;
always @(posedge sys_clk) begin
	if (main_uart_rx_fifo_wrport_we)
		storage_1[main_uart_rx_fifo_wrport_adr] <= main_uart_rx_fifo_wrport_dat_w;
	storage_1_dat0 <= storage_1[main_uart_rx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (main_uart_rx_fifo_rdport_re)
		storage_1_dat1 <= storage_1[main_uart_rx_fifo_rdport_adr];
end
assign main_uart_rx_fifo_wrport_dat_r = storage_1_dat0;
assign main_uart_rx_fifo_rdport_dat_r = storage_1_dat1;


BUFG BUFG(
	.I(main_clkout0),
	.O(main_clkout_buf0)
);

BUFG BUFG_1(
	.I(main_clkout1),
	.O(main_clkout_buf1)
);

BUFG BUFG_2(
	.I(main_clkout2),
	.O(main_clkout_buf2)
);

BUFG BUFG_3(
	.I(main_clkout3),
	.O(main_clkout_buf3)
);

IDELAYCTRL IDELAYCTRL(
	.REFCLK(iodelay_clk),
	.RST(main_ic_reset)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(1'd0),
	.D2(1'd1),
	.D3(1'd0),
	.D4(1'd1),
	.D5(1'd0),
	.D6(1'd1),
	.D7(1'd0),
	.D8(1'd1),
	.OCE(1'd1),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.OQ(main_a7ddrphy_sd_clk_se_nodelay)
);

OBUFDS OBUFDS(
	.I(main_a7ddrphy_sd_clk_se_nodelay),
	.O(ddram_clk_p),
	.OB(ddram_clk_n)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_1 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(main_a7ddrphy_dfi_p0_reset_n),
	.D2(main_a7ddrphy_dfi_p0_reset_n),
	.D3(main_a7ddrphy_dfi_p1_reset_n),
	.D4(main_a7ddrphy_dfi_p1_reset_n),
	.D5(main_a7ddrphy_dfi_p2_reset_n),
	.D6(main_a7ddrphy_dfi_p2_reset_n),
	.D7(main_a7ddrphy_dfi_p3_reset_n),
	.D8(main_a7ddrphy_dfi_p3_reset_n),
	.OCE(1'd1),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.OQ(ddram_reset_n)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_2 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(main_a7ddrphy_dfi_p0_cs_n),
	.D2(main_a7ddrphy_dfi_p0_cs_n),
	.D3(main_a7ddrphy_dfi_p1_cs_n),
	.D4(main_a7ddrphy_dfi_p1_cs_n),
	.D5(main_a7ddrphy_dfi_p2_cs_n),
	.D6(main_a7ddrphy_dfi_p2_cs_n),
	.D7(main_a7ddrphy_dfi_p3_cs_n),
	.D8(main_a7ddrphy_dfi_p3_cs_n),
	.OCE(1'd1),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.OQ(ddram_cs_n)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_3 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(main_a7ddrphy_dfi_p0_address[0]),
	.D2(main_a7ddrphy_dfi_p0_address[0]),
	.D3(main_a7ddrphy_dfi_p1_address[0]),
	.D4(main_a7ddrphy_dfi_p1_address[0]),
	.D5(main_a7ddrphy_dfi_p2_address[0]),
	.D6(main_a7ddrphy_dfi_p2_address[0]),
	.D7(main_a7ddrphy_dfi_p3_address[0]),
	.D8(main_a7ddrphy_dfi_p3_address[0]),
	.OCE(1'd1),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.OQ(ddram_a[0])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_4 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(main_a7ddrphy_dfi_p0_address[1]),
	.D2(main_a7ddrphy_dfi_p0_address[1]),
	.D3(main_a7ddrphy_dfi_p1_address[1]),
	.D4(main_a7ddrphy_dfi_p1_address[1]),
	.D5(main_a7ddrphy_dfi_p2_address[1]),
	.D6(main_a7ddrphy_dfi_p2_address[1]),
	.D7(main_a7ddrphy_dfi_p3_address[1]),
	.D8(main_a7ddrphy_dfi_p3_address[1]),
	.OCE(1'd1),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.OQ(ddram_a[1])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_5 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(main_a7ddrphy_dfi_p0_address[2]),
	.D2(main_a7ddrphy_dfi_p0_address[2]),
	.D3(main_a7ddrphy_dfi_p1_address[2]),
	.D4(main_a7ddrphy_dfi_p1_address[2]),
	.D5(main_a7ddrphy_dfi_p2_address[2]),
	.D6(main_a7ddrphy_dfi_p2_address[2]),
	.D7(main_a7ddrphy_dfi_p3_address[2]),
	.D8(main_a7ddrphy_dfi_p3_address[2]),
	.OCE(1'd1),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.OQ(ddram_a[2])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_6 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(main_a7ddrphy_dfi_p0_address[3]),
	.D2(main_a7ddrphy_dfi_p0_address[3]),
	.D3(main_a7ddrphy_dfi_p1_address[3]),
	.D4(main_a7ddrphy_dfi_p1_address[3]),
	.D5(main_a7ddrphy_dfi_p2_address[3]),
	.D6(main_a7ddrphy_dfi_p2_address[3]),
	.D7(main_a7ddrphy_dfi_p3_address[3]),
	.D8(main_a7ddrphy_dfi_p3_address[3]),
	.OCE(1'd1),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.OQ(ddram_a[3])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_7 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(main_a7ddrphy_dfi_p0_address[4]),
	.D2(main_a7ddrphy_dfi_p0_address[4]),
	.D3(main_a7ddrphy_dfi_p1_address[4]),
	.D4(main_a7ddrphy_dfi_p1_address[4]),
	.D5(main_a7ddrphy_dfi_p2_address[4]),
	.D6(main_a7ddrphy_dfi_p2_address[4]),
	.D7(main_a7ddrphy_dfi_p3_address[4]),
	.D8(main_a7ddrphy_dfi_p3_address[4]),
	.OCE(1'd1),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.OQ(ddram_a[4])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_8 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(main_a7ddrphy_dfi_p0_address[5]),
	.D2(main_a7ddrphy_dfi_p0_address[5]),
	.D3(main_a7ddrphy_dfi_p1_address[5]),
	.D4(main_a7ddrphy_dfi_p1_address[5]),
	.D5(main_a7ddrphy_dfi_p2_address[5]),
	.D6(main_a7ddrphy_dfi_p2_address[5]),
	.D7(main_a7ddrphy_dfi_p3_address[5]),
	.D8(main_a7ddrphy_dfi_p3_address[5]),
	.OCE(1'd1),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.OQ(ddram_a[5])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_9 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(main_a7ddrphy_dfi_p0_address[6]),
	.D2(main_a7ddrphy_dfi_p0_address[6]),
	.D3(main_a7ddrphy_dfi_p1_address[6]),
	.D4(main_a7ddrphy_dfi_p1_address[6]),
	.D5(main_a7ddrphy_dfi_p2_address[6]),
	.D6(main_a7ddrphy_dfi_p2_address[6]),
	.D7(main_a7ddrphy_dfi_p3_address[6]),
	.D8(main_a7ddrphy_dfi_p3_address[6]),
	.OCE(1'd1),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.OQ(ddram_a[6])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_10 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(main_a7ddrphy_dfi_p0_address[7]),
	.D2(main_a7ddrphy_dfi_p0_address[7]),
	.D3(main_a7ddrphy_dfi_p1_address[7]),
	.D4(main_a7ddrphy_dfi_p1_address[7]),
	.D5(main_a7ddrphy_dfi_p2_address[7]),
	.D6(main_a7ddrphy_dfi_p2_address[7]),
	.D7(main_a7ddrphy_dfi_p3_address[7]),
	.D8(main_a7ddrphy_dfi_p3_address[7]),
	.OCE(1'd1),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.OQ(ddram_a[7])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_11 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(main_a7ddrphy_dfi_p0_address[8]),
	.D2(main_a7ddrphy_dfi_p0_address[8]),
	.D3(main_a7ddrphy_dfi_p1_address[8]),
	.D4(main_a7ddrphy_dfi_p1_address[8]),
	.D5(main_a7ddrphy_dfi_p2_address[8]),
	.D6(main_a7ddrphy_dfi_p2_address[8]),
	.D7(main_a7ddrphy_dfi_p3_address[8]),
	.D8(main_a7ddrphy_dfi_p3_address[8]),
	.OCE(1'd1),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.OQ(ddram_a[8])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_12 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(main_a7ddrphy_dfi_p0_address[9]),
	.D2(main_a7ddrphy_dfi_p0_address[9]),
	.D3(main_a7ddrphy_dfi_p1_address[9]),
	.D4(main_a7ddrphy_dfi_p1_address[9]),
	.D5(main_a7ddrphy_dfi_p2_address[9]),
	.D6(main_a7ddrphy_dfi_p2_address[9]),
	.D7(main_a7ddrphy_dfi_p3_address[9]),
	.D8(main_a7ddrphy_dfi_p3_address[9]),
	.OCE(1'd1),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.OQ(ddram_a[9])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_13 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(main_a7ddrphy_dfi_p0_address[10]),
	.D2(main_a7ddrphy_dfi_p0_address[10]),
	.D3(main_a7ddrphy_dfi_p1_address[10]),
	.D4(main_a7ddrphy_dfi_p1_address[10]),
	.D5(main_a7ddrphy_dfi_p2_address[10]),
	.D6(main_a7ddrphy_dfi_p2_address[10]),
	.D7(main_a7ddrphy_dfi_p3_address[10]),
	.D8(main_a7ddrphy_dfi_p3_address[10]),
	.OCE(1'd1),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.OQ(ddram_a[10])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_14 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(main_a7ddrphy_dfi_p0_address[11]),
	.D2(main_a7ddrphy_dfi_p0_address[11]),
	.D3(main_a7ddrphy_dfi_p1_address[11]),
	.D4(main_a7ddrphy_dfi_p1_address[11]),
	.D5(main_a7ddrphy_dfi_p2_address[11]),
	.D6(main_a7ddrphy_dfi_p2_address[11]),
	.D7(main_a7ddrphy_dfi_p3_address[11]),
	.D8(main_a7ddrphy_dfi_p3_address[11]),
	.OCE(1'd1),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.OQ(ddram_a[11])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_15 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(main_a7ddrphy_dfi_p0_address[12]),
	.D2(main_a7ddrphy_dfi_p0_address[12]),
	.D3(main_a7ddrphy_dfi_p1_address[12]),
	.D4(main_a7ddrphy_dfi_p1_address[12]),
	.D5(main_a7ddrphy_dfi_p2_address[12]),
	.D6(main_a7ddrphy_dfi_p2_address[12]),
	.D7(main_a7ddrphy_dfi_p3_address[12]),
	.D8(main_a7ddrphy_dfi_p3_address[12]),
	.OCE(1'd1),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.OQ(ddram_a[12])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_16 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(main_a7ddrphy_dfi_p0_address[13]),
	.D2(main_a7ddrphy_dfi_p0_address[13]),
	.D3(main_a7ddrphy_dfi_p1_address[13]),
	.D4(main_a7ddrphy_dfi_p1_address[13]),
	.D5(main_a7ddrphy_dfi_p2_address[13]),
	.D6(main_a7ddrphy_dfi_p2_address[13]),
	.D7(main_a7ddrphy_dfi_p3_address[13]),
	.D8(main_a7ddrphy_dfi_p3_address[13]),
	.OCE(1'd1),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.OQ(ddram_a[13])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_17 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(main_a7ddrphy_dfi_p0_address[14]),
	.D2(main_a7ddrphy_dfi_p0_address[14]),
	.D3(main_a7ddrphy_dfi_p1_address[14]),
	.D4(main_a7ddrphy_dfi_p1_address[14]),
	.D5(main_a7ddrphy_dfi_p2_address[14]),
	.D6(main_a7ddrphy_dfi_p2_address[14]),
	.D7(main_a7ddrphy_dfi_p3_address[14]),
	.D8(main_a7ddrphy_dfi_p3_address[14]),
	.OCE(1'd1),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.OQ(ddram_a[14])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_18 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(main_a7ddrphy_dfi_p0_bank[0]),
	.D2(main_a7ddrphy_dfi_p0_bank[0]),
	.D3(main_a7ddrphy_dfi_p1_bank[0]),
	.D4(main_a7ddrphy_dfi_p1_bank[0]),
	.D5(main_a7ddrphy_dfi_p2_bank[0]),
	.D6(main_a7ddrphy_dfi_p2_bank[0]),
	.D7(main_a7ddrphy_dfi_p3_bank[0]),
	.D8(main_a7ddrphy_dfi_p3_bank[0]),
	.OCE(1'd1),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.OQ(main_a7ddrphy_pads_ba[0])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_19 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(main_a7ddrphy_dfi_p0_bank[1]),
	.D2(main_a7ddrphy_dfi_p0_bank[1]),
	.D3(main_a7ddrphy_dfi_p1_bank[1]),
	.D4(main_a7ddrphy_dfi_p1_bank[1]),
	.D5(main_a7ddrphy_dfi_p2_bank[1]),
	.D6(main_a7ddrphy_dfi_p2_bank[1]),
	.D7(main_a7ddrphy_dfi_p3_bank[1]),
	.D8(main_a7ddrphy_dfi_p3_bank[1]),
	.OCE(1'd1),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.OQ(main_a7ddrphy_pads_ba[1])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_20 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(main_a7ddrphy_dfi_p0_bank[2]),
	.D2(main_a7ddrphy_dfi_p0_bank[2]),
	.D3(main_a7ddrphy_dfi_p1_bank[2]),
	.D4(main_a7ddrphy_dfi_p1_bank[2]),
	.D5(main_a7ddrphy_dfi_p2_bank[2]),
	.D6(main_a7ddrphy_dfi_p2_bank[2]),
	.D7(main_a7ddrphy_dfi_p3_bank[2]),
	.D8(main_a7ddrphy_dfi_p3_bank[2]),
	.OCE(1'd1),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.OQ(main_a7ddrphy_pads_ba[2])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_21 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(main_a7ddrphy_dfi_p0_ras_n),
	.D2(main_a7ddrphy_dfi_p0_ras_n),
	.D3(main_a7ddrphy_dfi_p1_ras_n),
	.D4(main_a7ddrphy_dfi_p1_ras_n),
	.D5(main_a7ddrphy_dfi_p2_ras_n),
	.D6(main_a7ddrphy_dfi_p2_ras_n),
	.D7(main_a7ddrphy_dfi_p3_ras_n),
	.D8(main_a7ddrphy_dfi_p3_ras_n),
	.OCE(1'd1),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.OQ(ddram_ras_n)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_22 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(main_a7ddrphy_dfi_p0_cas_n),
	.D2(main_a7ddrphy_dfi_p0_cas_n),
	.D3(main_a7ddrphy_dfi_p1_cas_n),
	.D4(main_a7ddrphy_dfi_p1_cas_n),
	.D5(main_a7ddrphy_dfi_p2_cas_n),
	.D6(main_a7ddrphy_dfi_p2_cas_n),
	.D7(main_a7ddrphy_dfi_p3_cas_n),
	.D8(main_a7ddrphy_dfi_p3_cas_n),
	.OCE(1'd1),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.OQ(ddram_cas_n)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_23 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(main_a7ddrphy_dfi_p0_we_n),
	.D2(main_a7ddrphy_dfi_p0_we_n),
	.D3(main_a7ddrphy_dfi_p1_we_n),
	.D4(main_a7ddrphy_dfi_p1_we_n),
	.D5(main_a7ddrphy_dfi_p2_we_n),
	.D6(main_a7ddrphy_dfi_p2_we_n),
	.D7(main_a7ddrphy_dfi_p3_we_n),
	.D8(main_a7ddrphy_dfi_p3_we_n),
	.OCE(1'd1),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.OQ(ddram_we_n)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_24 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(main_a7ddrphy_dfi_p0_cke),
	.D2(main_a7ddrphy_dfi_p0_cke),
	.D3(main_a7ddrphy_dfi_p1_cke),
	.D4(main_a7ddrphy_dfi_p1_cke),
	.D5(main_a7ddrphy_dfi_p2_cke),
	.D6(main_a7ddrphy_dfi_p2_cke),
	.D7(main_a7ddrphy_dfi_p3_cke),
	.D8(main_a7ddrphy_dfi_p3_cke),
	.OCE(1'd1),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.OQ(ddram_cke)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_25 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(main_a7ddrphy_dfi_p0_odt),
	.D2(main_a7ddrphy_dfi_p0_odt),
	.D3(main_a7ddrphy_dfi_p1_odt),
	.D4(main_a7ddrphy_dfi_p1_odt),
	.D5(main_a7ddrphy_dfi_p2_odt),
	.D6(main_a7ddrphy_dfi_p2_odt),
	.D7(main_a7ddrphy_dfi_p3_odt),
	.D8(main_a7ddrphy_dfi_p3_odt),
	.OCE(1'd1),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.OQ(ddram_odt)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_26 (
	.CLK(sys4x_dqs_clk),
	.CLKDIV(sys_clk),
	.D1(main_a7ddrphy_bitslip00[0]),
	.D2(main_a7ddrphy_bitslip00[1]),
	.D3(main_a7ddrphy_bitslip00[2]),
	.D4(main_a7ddrphy_bitslip00[3]),
	.D5(main_a7ddrphy_bitslip00[4]),
	.D6(main_a7ddrphy_bitslip00[5]),
	.D7(main_a7ddrphy_bitslip00[6]),
	.D8(main_a7ddrphy_bitslip00[7]),
	.OCE(1'd1),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.T1((~main_a7ddrphy_dqs_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE(1'd1),
	.OFB(main_a7ddrphy0),
	.OQ(main_a7ddrphy_dqs_o_no_delay0),
	.TQ(main_a7ddrphy_dqs_t0)
);

IOBUFDS IOBUFDS(
	.I(main_a7ddrphy_dqs_o_no_delay0),
	.T(main_a7ddrphy_dqs_t0),
	.IO(ddram_dqs_p[0]),
	.IOB(ddram_dqs_n[0])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_27 (
	.CLK(sys4x_dqs_clk),
	.CLKDIV(sys_clk),
	.D1(main_a7ddrphy_bitslip10[0]),
	.D2(main_a7ddrphy_bitslip10[1]),
	.D3(main_a7ddrphy_bitslip10[2]),
	.D4(main_a7ddrphy_bitslip10[3]),
	.D5(main_a7ddrphy_bitslip10[4]),
	.D6(main_a7ddrphy_bitslip10[5]),
	.D7(main_a7ddrphy_bitslip10[6]),
	.D8(main_a7ddrphy_bitslip10[7]),
	.OCE(1'd1),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.T1((~main_a7ddrphy_dqs_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE(1'd1),
	.OFB(main_a7ddrphy1),
	.OQ(main_a7ddrphy_dqs_o_no_delay1),
	.TQ(main_a7ddrphy_dqs_t1)
);

IOBUFDS IOBUFDS_1(
	.I(main_a7ddrphy_dqs_o_no_delay1),
	.T(main_a7ddrphy_dqs_t1),
	.IO(ddram_dqs_p[1]),
	.IOB(ddram_dqs_n[1])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_28 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(main_a7ddrphy_bitslip01[0]),
	.D2(main_a7ddrphy_bitslip01[1]),
	.D3(main_a7ddrphy_bitslip01[2]),
	.D4(main_a7ddrphy_bitslip01[3]),
	.D5(main_a7ddrphy_bitslip01[4]),
	.D6(main_a7ddrphy_bitslip01[5]),
	.D7(main_a7ddrphy_bitslip01[6]),
	.D8(main_a7ddrphy_bitslip01[7]),
	.OCE(1'd1),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.OQ(ddram_dm[0])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_29 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(main_a7ddrphy_bitslip11[0]),
	.D2(main_a7ddrphy_bitslip11[1]),
	.D3(main_a7ddrphy_bitslip11[2]),
	.D4(main_a7ddrphy_bitslip11[3]),
	.D5(main_a7ddrphy_bitslip11[4]),
	.D6(main_a7ddrphy_bitslip11[5]),
	.D7(main_a7ddrphy_bitslip11[6]),
	.D8(main_a7ddrphy_bitslip11[7]),
	.OCE(1'd1),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.OQ(ddram_dm[1])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_30 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(main_a7ddrphy_bitslip02[0]),
	.D2(main_a7ddrphy_bitslip02[1]),
	.D3(main_a7ddrphy_bitslip02[2]),
	.D4(main_a7ddrphy_bitslip02[3]),
	.D5(main_a7ddrphy_bitslip02[4]),
	.D6(main_a7ddrphy_bitslip02[5]),
	.D7(main_a7ddrphy_bitslip02[6]),
	.D8(main_a7ddrphy_bitslip02[7]),
	.OCE(1'd1),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.T1((~main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE(1'd1),
	.OQ(main_a7ddrphy_dq_o_nodelay0),
	.TQ(main_a7ddrphy_dq_t0)
);

ISERDESE2 #(
	.DATA_RATE("DDR"),
	.DATA_WIDTH(4'd8),
	.INTERFACE_TYPE("NETWORKING"),
	.IOBDELAY("IFD"),
	.NUM_CE(1'd1),
	.SERDES_MODE("MASTER")
) ISERDESE2 (
	.BITSLIP(1'd0),
	.CE1(1'd1),
	.CLK(sys4x_clk),
	.CLKB((~sys4x_clk)),
	.CLKDIV(sys_clk),
	.DDLY(main_a7ddrphy_dq_i_delayed0),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.Q1(main_a7ddrphy_bitslip03[7]),
	.Q2(main_a7ddrphy_bitslip03[6]),
	.Q3(main_a7ddrphy_bitslip03[5]),
	.Q4(main_a7ddrphy_bitslip03[4]),
	.Q5(main_a7ddrphy_bitslip03[3]),
	.Q6(main_a7ddrphy_bitslip03[2]),
	.Q7(main_a7ddrphy_bitslip03[1]),
	.Q8(main_a7ddrphy_bitslip03[0])
);

IDELAYE2 #(
	.CINVCTRL_SEL("FALSE"),
	.DELAY_SRC("IDATAIN"),
	.HIGH_PERFORMANCE_MODE("TRUE"),
	.IDELAY_TYPE("VARIABLE"),
	.IDELAY_VALUE(1'd0),
	.PIPE_SEL("FALSE"),
	.REFCLK_FREQUENCY(200.0),
	.SIGNAL_PATTERN("DATA")
) IDELAYE2 (
	.C(sys_clk),
	.CE((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN(main_a7ddrphy_dq_i_nodelay0),
	.INC(1'd1),
	.LD(((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_rst_re) | main_a7ddrphy_rst_storage)),
	.LDPIPEEN(1'd0),
	.DATAOUT(main_a7ddrphy_dq_i_delayed0)
);

IOBUF IOBUF(
	.I(main_a7ddrphy_dq_o_nodelay0),
	.T(main_a7ddrphy_dq_t0),
	.IO(ddram_dq[0]),
	.O(main_a7ddrphy_dq_i_nodelay0)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_31 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(main_a7ddrphy_bitslip12[0]),
	.D2(main_a7ddrphy_bitslip12[1]),
	.D3(main_a7ddrphy_bitslip12[2]),
	.D4(main_a7ddrphy_bitslip12[3]),
	.D5(main_a7ddrphy_bitslip12[4]),
	.D6(main_a7ddrphy_bitslip12[5]),
	.D7(main_a7ddrphy_bitslip12[6]),
	.D8(main_a7ddrphy_bitslip12[7]),
	.OCE(1'd1),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.T1((~main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE(1'd1),
	.OQ(main_a7ddrphy_dq_o_nodelay1),
	.TQ(main_a7ddrphy_dq_t1)
);

ISERDESE2 #(
	.DATA_RATE("DDR"),
	.DATA_WIDTH(4'd8),
	.INTERFACE_TYPE("NETWORKING"),
	.IOBDELAY("IFD"),
	.NUM_CE(1'd1),
	.SERDES_MODE("MASTER")
) ISERDESE2_1 (
	.BITSLIP(1'd0),
	.CE1(1'd1),
	.CLK(sys4x_clk),
	.CLKB((~sys4x_clk)),
	.CLKDIV(sys_clk),
	.DDLY(main_a7ddrphy_dq_i_delayed1),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.Q1(main_a7ddrphy_bitslip13[7]),
	.Q2(main_a7ddrphy_bitslip13[6]),
	.Q3(main_a7ddrphy_bitslip13[5]),
	.Q4(main_a7ddrphy_bitslip13[4]),
	.Q5(main_a7ddrphy_bitslip13[3]),
	.Q6(main_a7ddrphy_bitslip13[2]),
	.Q7(main_a7ddrphy_bitslip13[1]),
	.Q8(main_a7ddrphy_bitslip13[0])
);

IDELAYE2 #(
	.CINVCTRL_SEL("FALSE"),
	.DELAY_SRC("IDATAIN"),
	.HIGH_PERFORMANCE_MODE("TRUE"),
	.IDELAY_TYPE("VARIABLE"),
	.IDELAY_VALUE(1'd0),
	.PIPE_SEL("FALSE"),
	.REFCLK_FREQUENCY(200.0),
	.SIGNAL_PATTERN("DATA")
) IDELAYE2_1 (
	.C(sys_clk),
	.CE((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN(main_a7ddrphy_dq_i_nodelay1),
	.INC(1'd1),
	.LD(((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_rst_re) | main_a7ddrphy_rst_storage)),
	.LDPIPEEN(1'd0),
	.DATAOUT(main_a7ddrphy_dq_i_delayed1)
);

IOBUF IOBUF_1(
	.I(main_a7ddrphy_dq_o_nodelay1),
	.T(main_a7ddrphy_dq_t1),
	.IO(ddram_dq[1]),
	.O(main_a7ddrphy_dq_i_nodelay1)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_32 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(main_a7ddrphy_bitslip20[0]),
	.D2(main_a7ddrphy_bitslip20[1]),
	.D3(main_a7ddrphy_bitslip20[2]),
	.D4(main_a7ddrphy_bitslip20[3]),
	.D5(main_a7ddrphy_bitslip20[4]),
	.D6(main_a7ddrphy_bitslip20[5]),
	.D7(main_a7ddrphy_bitslip20[6]),
	.D8(main_a7ddrphy_bitslip20[7]),
	.OCE(1'd1),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.T1((~main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE(1'd1),
	.OQ(main_a7ddrphy_dq_o_nodelay2),
	.TQ(main_a7ddrphy_dq_t2)
);

ISERDESE2 #(
	.DATA_RATE("DDR"),
	.DATA_WIDTH(4'd8),
	.INTERFACE_TYPE("NETWORKING"),
	.IOBDELAY("IFD"),
	.NUM_CE(1'd1),
	.SERDES_MODE("MASTER")
) ISERDESE2_2 (
	.BITSLIP(1'd0),
	.CE1(1'd1),
	.CLK(sys4x_clk),
	.CLKB((~sys4x_clk)),
	.CLKDIV(sys_clk),
	.DDLY(main_a7ddrphy_dq_i_delayed2),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.Q1(main_a7ddrphy_bitslip21[7]),
	.Q2(main_a7ddrphy_bitslip21[6]),
	.Q3(main_a7ddrphy_bitslip21[5]),
	.Q4(main_a7ddrphy_bitslip21[4]),
	.Q5(main_a7ddrphy_bitslip21[3]),
	.Q6(main_a7ddrphy_bitslip21[2]),
	.Q7(main_a7ddrphy_bitslip21[1]),
	.Q8(main_a7ddrphy_bitslip21[0])
);

IDELAYE2 #(
	.CINVCTRL_SEL("FALSE"),
	.DELAY_SRC("IDATAIN"),
	.HIGH_PERFORMANCE_MODE("TRUE"),
	.IDELAY_TYPE("VARIABLE"),
	.IDELAY_VALUE(1'd0),
	.PIPE_SEL("FALSE"),
	.REFCLK_FREQUENCY(200.0),
	.SIGNAL_PATTERN("DATA")
) IDELAYE2_2 (
	.C(sys_clk),
	.CE((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN(main_a7ddrphy_dq_i_nodelay2),
	.INC(1'd1),
	.LD(((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_rst_re) | main_a7ddrphy_rst_storage)),
	.LDPIPEEN(1'd0),
	.DATAOUT(main_a7ddrphy_dq_i_delayed2)
);

IOBUF IOBUF_2(
	.I(main_a7ddrphy_dq_o_nodelay2),
	.T(main_a7ddrphy_dq_t2),
	.IO(ddram_dq[2]),
	.O(main_a7ddrphy_dq_i_nodelay2)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_33 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(main_a7ddrphy_bitslip30[0]),
	.D2(main_a7ddrphy_bitslip30[1]),
	.D3(main_a7ddrphy_bitslip30[2]),
	.D4(main_a7ddrphy_bitslip30[3]),
	.D5(main_a7ddrphy_bitslip30[4]),
	.D6(main_a7ddrphy_bitslip30[5]),
	.D7(main_a7ddrphy_bitslip30[6]),
	.D8(main_a7ddrphy_bitslip30[7]),
	.OCE(1'd1),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.T1((~main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE(1'd1),
	.OQ(main_a7ddrphy_dq_o_nodelay3),
	.TQ(main_a7ddrphy_dq_t3)
);

ISERDESE2 #(
	.DATA_RATE("DDR"),
	.DATA_WIDTH(4'd8),
	.INTERFACE_TYPE("NETWORKING"),
	.IOBDELAY("IFD"),
	.NUM_CE(1'd1),
	.SERDES_MODE("MASTER")
) ISERDESE2_3 (
	.BITSLIP(1'd0),
	.CE1(1'd1),
	.CLK(sys4x_clk),
	.CLKB((~sys4x_clk)),
	.CLKDIV(sys_clk),
	.DDLY(main_a7ddrphy_dq_i_delayed3),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.Q1(main_a7ddrphy_bitslip31[7]),
	.Q2(main_a7ddrphy_bitslip31[6]),
	.Q3(main_a7ddrphy_bitslip31[5]),
	.Q4(main_a7ddrphy_bitslip31[4]),
	.Q5(main_a7ddrphy_bitslip31[3]),
	.Q6(main_a7ddrphy_bitslip31[2]),
	.Q7(main_a7ddrphy_bitslip31[1]),
	.Q8(main_a7ddrphy_bitslip31[0])
);

IDELAYE2 #(
	.CINVCTRL_SEL("FALSE"),
	.DELAY_SRC("IDATAIN"),
	.HIGH_PERFORMANCE_MODE("TRUE"),
	.IDELAY_TYPE("VARIABLE"),
	.IDELAY_VALUE(1'd0),
	.PIPE_SEL("FALSE"),
	.REFCLK_FREQUENCY(200.0),
	.SIGNAL_PATTERN("DATA")
) IDELAYE2_3 (
	.C(sys_clk),
	.CE((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN(main_a7ddrphy_dq_i_nodelay3),
	.INC(1'd1),
	.LD(((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_rst_re) | main_a7ddrphy_rst_storage)),
	.LDPIPEEN(1'd0),
	.DATAOUT(main_a7ddrphy_dq_i_delayed3)
);

IOBUF IOBUF_3(
	.I(main_a7ddrphy_dq_o_nodelay3),
	.T(main_a7ddrphy_dq_t3),
	.IO(ddram_dq[3]),
	.O(main_a7ddrphy_dq_i_nodelay3)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_34 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(main_a7ddrphy_bitslip40[0]),
	.D2(main_a7ddrphy_bitslip40[1]),
	.D3(main_a7ddrphy_bitslip40[2]),
	.D4(main_a7ddrphy_bitslip40[3]),
	.D5(main_a7ddrphy_bitslip40[4]),
	.D6(main_a7ddrphy_bitslip40[5]),
	.D7(main_a7ddrphy_bitslip40[6]),
	.D8(main_a7ddrphy_bitslip40[7]),
	.OCE(1'd1),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.T1((~main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE(1'd1),
	.OQ(main_a7ddrphy_dq_o_nodelay4),
	.TQ(main_a7ddrphy_dq_t4)
);

ISERDESE2 #(
	.DATA_RATE("DDR"),
	.DATA_WIDTH(4'd8),
	.INTERFACE_TYPE("NETWORKING"),
	.IOBDELAY("IFD"),
	.NUM_CE(1'd1),
	.SERDES_MODE("MASTER")
) ISERDESE2_4 (
	.BITSLIP(1'd0),
	.CE1(1'd1),
	.CLK(sys4x_clk),
	.CLKB((~sys4x_clk)),
	.CLKDIV(sys_clk),
	.DDLY(main_a7ddrphy_dq_i_delayed4),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.Q1(main_a7ddrphy_bitslip41[7]),
	.Q2(main_a7ddrphy_bitslip41[6]),
	.Q3(main_a7ddrphy_bitslip41[5]),
	.Q4(main_a7ddrphy_bitslip41[4]),
	.Q5(main_a7ddrphy_bitslip41[3]),
	.Q6(main_a7ddrphy_bitslip41[2]),
	.Q7(main_a7ddrphy_bitslip41[1]),
	.Q8(main_a7ddrphy_bitslip41[0])
);

IDELAYE2 #(
	.CINVCTRL_SEL("FALSE"),
	.DELAY_SRC("IDATAIN"),
	.HIGH_PERFORMANCE_MODE("TRUE"),
	.IDELAY_TYPE("VARIABLE"),
	.IDELAY_VALUE(1'd0),
	.PIPE_SEL("FALSE"),
	.REFCLK_FREQUENCY(200.0),
	.SIGNAL_PATTERN("DATA")
) IDELAYE2_4 (
	.C(sys_clk),
	.CE((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN(main_a7ddrphy_dq_i_nodelay4),
	.INC(1'd1),
	.LD(((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_rst_re) | main_a7ddrphy_rst_storage)),
	.LDPIPEEN(1'd0),
	.DATAOUT(main_a7ddrphy_dq_i_delayed4)
);

IOBUF IOBUF_4(
	.I(main_a7ddrphy_dq_o_nodelay4),
	.T(main_a7ddrphy_dq_t4),
	.IO(ddram_dq[4]),
	.O(main_a7ddrphy_dq_i_nodelay4)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_35 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(main_a7ddrphy_bitslip50[0]),
	.D2(main_a7ddrphy_bitslip50[1]),
	.D3(main_a7ddrphy_bitslip50[2]),
	.D4(main_a7ddrphy_bitslip50[3]),
	.D5(main_a7ddrphy_bitslip50[4]),
	.D6(main_a7ddrphy_bitslip50[5]),
	.D7(main_a7ddrphy_bitslip50[6]),
	.D8(main_a7ddrphy_bitslip50[7]),
	.OCE(1'd1),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.T1((~main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE(1'd1),
	.OQ(main_a7ddrphy_dq_o_nodelay5),
	.TQ(main_a7ddrphy_dq_t5)
);

ISERDESE2 #(
	.DATA_RATE("DDR"),
	.DATA_WIDTH(4'd8),
	.INTERFACE_TYPE("NETWORKING"),
	.IOBDELAY("IFD"),
	.NUM_CE(1'd1),
	.SERDES_MODE("MASTER")
) ISERDESE2_5 (
	.BITSLIP(1'd0),
	.CE1(1'd1),
	.CLK(sys4x_clk),
	.CLKB((~sys4x_clk)),
	.CLKDIV(sys_clk),
	.DDLY(main_a7ddrphy_dq_i_delayed5),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.Q1(main_a7ddrphy_bitslip51[7]),
	.Q2(main_a7ddrphy_bitslip51[6]),
	.Q3(main_a7ddrphy_bitslip51[5]),
	.Q4(main_a7ddrphy_bitslip51[4]),
	.Q5(main_a7ddrphy_bitslip51[3]),
	.Q6(main_a7ddrphy_bitslip51[2]),
	.Q7(main_a7ddrphy_bitslip51[1]),
	.Q8(main_a7ddrphy_bitslip51[0])
);

IDELAYE2 #(
	.CINVCTRL_SEL("FALSE"),
	.DELAY_SRC("IDATAIN"),
	.HIGH_PERFORMANCE_MODE("TRUE"),
	.IDELAY_TYPE("VARIABLE"),
	.IDELAY_VALUE(1'd0),
	.PIPE_SEL("FALSE"),
	.REFCLK_FREQUENCY(200.0),
	.SIGNAL_PATTERN("DATA")
) IDELAYE2_5 (
	.C(sys_clk),
	.CE((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN(main_a7ddrphy_dq_i_nodelay5),
	.INC(1'd1),
	.LD(((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_rst_re) | main_a7ddrphy_rst_storage)),
	.LDPIPEEN(1'd0),
	.DATAOUT(main_a7ddrphy_dq_i_delayed5)
);

IOBUF IOBUF_5(
	.I(main_a7ddrphy_dq_o_nodelay5),
	.T(main_a7ddrphy_dq_t5),
	.IO(ddram_dq[5]),
	.O(main_a7ddrphy_dq_i_nodelay5)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_36 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(main_a7ddrphy_bitslip60[0]),
	.D2(main_a7ddrphy_bitslip60[1]),
	.D3(main_a7ddrphy_bitslip60[2]),
	.D4(main_a7ddrphy_bitslip60[3]),
	.D5(main_a7ddrphy_bitslip60[4]),
	.D6(main_a7ddrphy_bitslip60[5]),
	.D7(main_a7ddrphy_bitslip60[6]),
	.D8(main_a7ddrphy_bitslip60[7]),
	.OCE(1'd1),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.T1((~main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE(1'd1),
	.OQ(main_a7ddrphy_dq_o_nodelay6),
	.TQ(main_a7ddrphy_dq_t6)
);

ISERDESE2 #(
	.DATA_RATE("DDR"),
	.DATA_WIDTH(4'd8),
	.INTERFACE_TYPE("NETWORKING"),
	.IOBDELAY("IFD"),
	.NUM_CE(1'd1),
	.SERDES_MODE("MASTER")
) ISERDESE2_6 (
	.BITSLIP(1'd0),
	.CE1(1'd1),
	.CLK(sys4x_clk),
	.CLKB((~sys4x_clk)),
	.CLKDIV(sys_clk),
	.DDLY(main_a7ddrphy_dq_i_delayed6),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.Q1(main_a7ddrphy_bitslip61[7]),
	.Q2(main_a7ddrphy_bitslip61[6]),
	.Q3(main_a7ddrphy_bitslip61[5]),
	.Q4(main_a7ddrphy_bitslip61[4]),
	.Q5(main_a7ddrphy_bitslip61[3]),
	.Q6(main_a7ddrphy_bitslip61[2]),
	.Q7(main_a7ddrphy_bitslip61[1]),
	.Q8(main_a7ddrphy_bitslip61[0])
);

IDELAYE2 #(
	.CINVCTRL_SEL("FALSE"),
	.DELAY_SRC("IDATAIN"),
	.HIGH_PERFORMANCE_MODE("TRUE"),
	.IDELAY_TYPE("VARIABLE"),
	.IDELAY_VALUE(1'd0),
	.PIPE_SEL("FALSE"),
	.REFCLK_FREQUENCY(200.0),
	.SIGNAL_PATTERN("DATA")
) IDELAYE2_6 (
	.C(sys_clk),
	.CE((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN(main_a7ddrphy_dq_i_nodelay6),
	.INC(1'd1),
	.LD(((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_rst_re) | main_a7ddrphy_rst_storage)),
	.LDPIPEEN(1'd0),
	.DATAOUT(main_a7ddrphy_dq_i_delayed6)
);

IOBUF IOBUF_6(
	.I(main_a7ddrphy_dq_o_nodelay6),
	.T(main_a7ddrphy_dq_t6),
	.IO(ddram_dq[6]),
	.O(main_a7ddrphy_dq_i_nodelay6)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_37 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(main_a7ddrphy_bitslip70[0]),
	.D2(main_a7ddrphy_bitslip70[1]),
	.D3(main_a7ddrphy_bitslip70[2]),
	.D4(main_a7ddrphy_bitslip70[3]),
	.D5(main_a7ddrphy_bitslip70[4]),
	.D6(main_a7ddrphy_bitslip70[5]),
	.D7(main_a7ddrphy_bitslip70[6]),
	.D8(main_a7ddrphy_bitslip70[7]),
	.OCE(1'd1),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.T1((~main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE(1'd1),
	.OQ(main_a7ddrphy_dq_o_nodelay7),
	.TQ(main_a7ddrphy_dq_t7)
);

ISERDESE2 #(
	.DATA_RATE("DDR"),
	.DATA_WIDTH(4'd8),
	.INTERFACE_TYPE("NETWORKING"),
	.IOBDELAY("IFD"),
	.NUM_CE(1'd1),
	.SERDES_MODE("MASTER")
) ISERDESE2_7 (
	.BITSLIP(1'd0),
	.CE1(1'd1),
	.CLK(sys4x_clk),
	.CLKB((~sys4x_clk)),
	.CLKDIV(sys_clk),
	.DDLY(main_a7ddrphy_dq_i_delayed7),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.Q1(main_a7ddrphy_bitslip71[7]),
	.Q2(main_a7ddrphy_bitslip71[6]),
	.Q3(main_a7ddrphy_bitslip71[5]),
	.Q4(main_a7ddrphy_bitslip71[4]),
	.Q5(main_a7ddrphy_bitslip71[3]),
	.Q6(main_a7ddrphy_bitslip71[2]),
	.Q7(main_a7ddrphy_bitslip71[1]),
	.Q8(main_a7ddrphy_bitslip71[0])
);

IDELAYE2 #(
	.CINVCTRL_SEL("FALSE"),
	.DELAY_SRC("IDATAIN"),
	.HIGH_PERFORMANCE_MODE("TRUE"),
	.IDELAY_TYPE("VARIABLE"),
	.IDELAY_VALUE(1'd0),
	.PIPE_SEL("FALSE"),
	.REFCLK_FREQUENCY(200.0),
	.SIGNAL_PATTERN("DATA")
) IDELAYE2_7 (
	.C(sys_clk),
	.CE((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN(main_a7ddrphy_dq_i_nodelay7),
	.INC(1'd1),
	.LD(((main_a7ddrphy_dly_sel_storage[0] & main_a7ddrphy_rdly_dq_rst_re) | main_a7ddrphy_rst_storage)),
	.LDPIPEEN(1'd0),
	.DATAOUT(main_a7ddrphy_dq_i_delayed7)
);

IOBUF IOBUF_7(
	.I(main_a7ddrphy_dq_o_nodelay7),
	.T(main_a7ddrphy_dq_t7),
	.IO(ddram_dq[7]),
	.O(main_a7ddrphy_dq_i_nodelay7)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_38 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(main_a7ddrphy_bitslip80[0]),
	.D2(main_a7ddrphy_bitslip80[1]),
	.D3(main_a7ddrphy_bitslip80[2]),
	.D4(main_a7ddrphy_bitslip80[3]),
	.D5(main_a7ddrphy_bitslip80[4]),
	.D6(main_a7ddrphy_bitslip80[5]),
	.D7(main_a7ddrphy_bitslip80[6]),
	.D8(main_a7ddrphy_bitslip80[7]),
	.OCE(1'd1),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.T1((~main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE(1'd1),
	.OQ(main_a7ddrphy_dq_o_nodelay8),
	.TQ(main_a7ddrphy_dq_t8)
);

ISERDESE2 #(
	.DATA_RATE("DDR"),
	.DATA_WIDTH(4'd8),
	.INTERFACE_TYPE("NETWORKING"),
	.IOBDELAY("IFD"),
	.NUM_CE(1'd1),
	.SERDES_MODE("MASTER")
) ISERDESE2_8 (
	.BITSLIP(1'd0),
	.CE1(1'd1),
	.CLK(sys4x_clk),
	.CLKB((~sys4x_clk)),
	.CLKDIV(sys_clk),
	.DDLY(main_a7ddrphy_dq_i_delayed8),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.Q1(main_a7ddrphy_bitslip81[7]),
	.Q2(main_a7ddrphy_bitslip81[6]),
	.Q3(main_a7ddrphy_bitslip81[5]),
	.Q4(main_a7ddrphy_bitslip81[4]),
	.Q5(main_a7ddrphy_bitslip81[3]),
	.Q6(main_a7ddrphy_bitslip81[2]),
	.Q7(main_a7ddrphy_bitslip81[1]),
	.Q8(main_a7ddrphy_bitslip81[0])
);

IDELAYE2 #(
	.CINVCTRL_SEL("FALSE"),
	.DELAY_SRC("IDATAIN"),
	.HIGH_PERFORMANCE_MODE("TRUE"),
	.IDELAY_TYPE("VARIABLE"),
	.IDELAY_VALUE(1'd0),
	.PIPE_SEL("FALSE"),
	.REFCLK_FREQUENCY(200.0),
	.SIGNAL_PATTERN("DATA")
) IDELAYE2_8 (
	.C(sys_clk),
	.CE((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN(main_a7ddrphy_dq_i_nodelay8),
	.INC(1'd1),
	.LD(((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_rst_re) | main_a7ddrphy_rst_storage)),
	.LDPIPEEN(1'd0),
	.DATAOUT(main_a7ddrphy_dq_i_delayed8)
);

IOBUF IOBUF_8(
	.I(main_a7ddrphy_dq_o_nodelay8),
	.T(main_a7ddrphy_dq_t8),
	.IO(ddram_dq[8]),
	.O(main_a7ddrphy_dq_i_nodelay8)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_39 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(main_a7ddrphy_bitslip90[0]),
	.D2(main_a7ddrphy_bitslip90[1]),
	.D3(main_a7ddrphy_bitslip90[2]),
	.D4(main_a7ddrphy_bitslip90[3]),
	.D5(main_a7ddrphy_bitslip90[4]),
	.D6(main_a7ddrphy_bitslip90[5]),
	.D7(main_a7ddrphy_bitslip90[6]),
	.D8(main_a7ddrphy_bitslip90[7]),
	.OCE(1'd1),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.T1((~main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE(1'd1),
	.OQ(main_a7ddrphy_dq_o_nodelay9),
	.TQ(main_a7ddrphy_dq_t9)
);

ISERDESE2 #(
	.DATA_RATE("DDR"),
	.DATA_WIDTH(4'd8),
	.INTERFACE_TYPE("NETWORKING"),
	.IOBDELAY("IFD"),
	.NUM_CE(1'd1),
	.SERDES_MODE("MASTER")
) ISERDESE2_9 (
	.BITSLIP(1'd0),
	.CE1(1'd1),
	.CLK(sys4x_clk),
	.CLKB((~sys4x_clk)),
	.CLKDIV(sys_clk),
	.DDLY(main_a7ddrphy_dq_i_delayed9),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.Q1(main_a7ddrphy_bitslip91[7]),
	.Q2(main_a7ddrphy_bitslip91[6]),
	.Q3(main_a7ddrphy_bitslip91[5]),
	.Q4(main_a7ddrphy_bitslip91[4]),
	.Q5(main_a7ddrphy_bitslip91[3]),
	.Q6(main_a7ddrphy_bitslip91[2]),
	.Q7(main_a7ddrphy_bitslip91[1]),
	.Q8(main_a7ddrphy_bitslip91[0])
);

IDELAYE2 #(
	.CINVCTRL_SEL("FALSE"),
	.DELAY_SRC("IDATAIN"),
	.HIGH_PERFORMANCE_MODE("TRUE"),
	.IDELAY_TYPE("VARIABLE"),
	.IDELAY_VALUE(1'd0),
	.PIPE_SEL("FALSE"),
	.REFCLK_FREQUENCY(200.0),
	.SIGNAL_PATTERN("DATA")
) IDELAYE2_9 (
	.C(sys_clk),
	.CE((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN(main_a7ddrphy_dq_i_nodelay9),
	.INC(1'd1),
	.LD(((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_rst_re) | main_a7ddrphy_rst_storage)),
	.LDPIPEEN(1'd0),
	.DATAOUT(main_a7ddrphy_dq_i_delayed9)
);

IOBUF IOBUF_9(
	.I(main_a7ddrphy_dq_o_nodelay9),
	.T(main_a7ddrphy_dq_t9),
	.IO(ddram_dq[9]),
	.O(main_a7ddrphy_dq_i_nodelay9)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_40 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(main_a7ddrphy_bitslip100[0]),
	.D2(main_a7ddrphy_bitslip100[1]),
	.D3(main_a7ddrphy_bitslip100[2]),
	.D4(main_a7ddrphy_bitslip100[3]),
	.D5(main_a7ddrphy_bitslip100[4]),
	.D6(main_a7ddrphy_bitslip100[5]),
	.D7(main_a7ddrphy_bitslip100[6]),
	.D8(main_a7ddrphy_bitslip100[7]),
	.OCE(1'd1),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.T1((~main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE(1'd1),
	.OQ(main_a7ddrphy_dq_o_nodelay10),
	.TQ(main_a7ddrphy_dq_t10)
);

ISERDESE2 #(
	.DATA_RATE("DDR"),
	.DATA_WIDTH(4'd8),
	.INTERFACE_TYPE("NETWORKING"),
	.IOBDELAY("IFD"),
	.NUM_CE(1'd1),
	.SERDES_MODE("MASTER")
) ISERDESE2_10 (
	.BITSLIP(1'd0),
	.CE1(1'd1),
	.CLK(sys4x_clk),
	.CLKB((~sys4x_clk)),
	.CLKDIV(sys_clk),
	.DDLY(main_a7ddrphy_dq_i_delayed10),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.Q1(main_a7ddrphy_bitslip101[7]),
	.Q2(main_a7ddrphy_bitslip101[6]),
	.Q3(main_a7ddrphy_bitslip101[5]),
	.Q4(main_a7ddrphy_bitslip101[4]),
	.Q5(main_a7ddrphy_bitslip101[3]),
	.Q6(main_a7ddrphy_bitslip101[2]),
	.Q7(main_a7ddrphy_bitslip101[1]),
	.Q8(main_a7ddrphy_bitslip101[0])
);

IDELAYE2 #(
	.CINVCTRL_SEL("FALSE"),
	.DELAY_SRC("IDATAIN"),
	.HIGH_PERFORMANCE_MODE("TRUE"),
	.IDELAY_TYPE("VARIABLE"),
	.IDELAY_VALUE(1'd0),
	.PIPE_SEL("FALSE"),
	.REFCLK_FREQUENCY(200.0),
	.SIGNAL_PATTERN("DATA")
) IDELAYE2_10 (
	.C(sys_clk),
	.CE((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN(main_a7ddrphy_dq_i_nodelay10),
	.INC(1'd1),
	.LD(((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_rst_re) | main_a7ddrphy_rst_storage)),
	.LDPIPEEN(1'd0),
	.DATAOUT(main_a7ddrphy_dq_i_delayed10)
);

IOBUF IOBUF_10(
	.I(main_a7ddrphy_dq_o_nodelay10),
	.T(main_a7ddrphy_dq_t10),
	.IO(ddram_dq[10]),
	.O(main_a7ddrphy_dq_i_nodelay10)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_41 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(main_a7ddrphy_bitslip110[0]),
	.D2(main_a7ddrphy_bitslip110[1]),
	.D3(main_a7ddrphy_bitslip110[2]),
	.D4(main_a7ddrphy_bitslip110[3]),
	.D5(main_a7ddrphy_bitslip110[4]),
	.D6(main_a7ddrphy_bitslip110[5]),
	.D7(main_a7ddrphy_bitslip110[6]),
	.D8(main_a7ddrphy_bitslip110[7]),
	.OCE(1'd1),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.T1((~main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE(1'd1),
	.OQ(main_a7ddrphy_dq_o_nodelay11),
	.TQ(main_a7ddrphy_dq_t11)
);

ISERDESE2 #(
	.DATA_RATE("DDR"),
	.DATA_WIDTH(4'd8),
	.INTERFACE_TYPE("NETWORKING"),
	.IOBDELAY("IFD"),
	.NUM_CE(1'd1),
	.SERDES_MODE("MASTER")
) ISERDESE2_11 (
	.BITSLIP(1'd0),
	.CE1(1'd1),
	.CLK(sys4x_clk),
	.CLKB((~sys4x_clk)),
	.CLKDIV(sys_clk),
	.DDLY(main_a7ddrphy_dq_i_delayed11),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.Q1(main_a7ddrphy_bitslip111[7]),
	.Q2(main_a7ddrphy_bitslip111[6]),
	.Q3(main_a7ddrphy_bitslip111[5]),
	.Q4(main_a7ddrphy_bitslip111[4]),
	.Q5(main_a7ddrphy_bitslip111[3]),
	.Q6(main_a7ddrphy_bitslip111[2]),
	.Q7(main_a7ddrphy_bitslip111[1]),
	.Q8(main_a7ddrphy_bitslip111[0])
);

IDELAYE2 #(
	.CINVCTRL_SEL("FALSE"),
	.DELAY_SRC("IDATAIN"),
	.HIGH_PERFORMANCE_MODE("TRUE"),
	.IDELAY_TYPE("VARIABLE"),
	.IDELAY_VALUE(1'd0),
	.PIPE_SEL("FALSE"),
	.REFCLK_FREQUENCY(200.0),
	.SIGNAL_PATTERN("DATA")
) IDELAYE2_11 (
	.C(sys_clk),
	.CE((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN(main_a7ddrphy_dq_i_nodelay11),
	.INC(1'd1),
	.LD(((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_rst_re) | main_a7ddrphy_rst_storage)),
	.LDPIPEEN(1'd0),
	.DATAOUT(main_a7ddrphy_dq_i_delayed11)
);

IOBUF IOBUF_11(
	.I(main_a7ddrphy_dq_o_nodelay11),
	.T(main_a7ddrphy_dq_t11),
	.IO(ddram_dq[11]),
	.O(main_a7ddrphy_dq_i_nodelay11)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_42 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(main_a7ddrphy_bitslip120[0]),
	.D2(main_a7ddrphy_bitslip120[1]),
	.D3(main_a7ddrphy_bitslip120[2]),
	.D4(main_a7ddrphy_bitslip120[3]),
	.D5(main_a7ddrphy_bitslip120[4]),
	.D6(main_a7ddrphy_bitslip120[5]),
	.D7(main_a7ddrphy_bitslip120[6]),
	.D8(main_a7ddrphy_bitslip120[7]),
	.OCE(1'd1),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.T1((~main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE(1'd1),
	.OQ(main_a7ddrphy_dq_o_nodelay12),
	.TQ(main_a7ddrphy_dq_t12)
);

ISERDESE2 #(
	.DATA_RATE("DDR"),
	.DATA_WIDTH(4'd8),
	.INTERFACE_TYPE("NETWORKING"),
	.IOBDELAY("IFD"),
	.NUM_CE(1'd1),
	.SERDES_MODE("MASTER")
) ISERDESE2_12 (
	.BITSLIP(1'd0),
	.CE1(1'd1),
	.CLK(sys4x_clk),
	.CLKB((~sys4x_clk)),
	.CLKDIV(sys_clk),
	.DDLY(main_a7ddrphy_dq_i_delayed12),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.Q1(main_a7ddrphy_bitslip121[7]),
	.Q2(main_a7ddrphy_bitslip121[6]),
	.Q3(main_a7ddrphy_bitslip121[5]),
	.Q4(main_a7ddrphy_bitslip121[4]),
	.Q5(main_a7ddrphy_bitslip121[3]),
	.Q6(main_a7ddrphy_bitslip121[2]),
	.Q7(main_a7ddrphy_bitslip121[1]),
	.Q8(main_a7ddrphy_bitslip121[0])
);

IDELAYE2 #(
	.CINVCTRL_SEL("FALSE"),
	.DELAY_SRC("IDATAIN"),
	.HIGH_PERFORMANCE_MODE("TRUE"),
	.IDELAY_TYPE("VARIABLE"),
	.IDELAY_VALUE(1'd0),
	.PIPE_SEL("FALSE"),
	.REFCLK_FREQUENCY(200.0),
	.SIGNAL_PATTERN("DATA")
) IDELAYE2_12 (
	.C(sys_clk),
	.CE((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN(main_a7ddrphy_dq_i_nodelay12),
	.INC(1'd1),
	.LD(((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_rst_re) | main_a7ddrphy_rst_storage)),
	.LDPIPEEN(1'd0),
	.DATAOUT(main_a7ddrphy_dq_i_delayed12)
);

IOBUF IOBUF_12(
	.I(main_a7ddrphy_dq_o_nodelay12),
	.T(main_a7ddrphy_dq_t12),
	.IO(ddram_dq[12]),
	.O(main_a7ddrphy_dq_i_nodelay12)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_43 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(main_a7ddrphy_bitslip130[0]),
	.D2(main_a7ddrphy_bitslip130[1]),
	.D3(main_a7ddrphy_bitslip130[2]),
	.D4(main_a7ddrphy_bitslip130[3]),
	.D5(main_a7ddrphy_bitslip130[4]),
	.D6(main_a7ddrphy_bitslip130[5]),
	.D7(main_a7ddrphy_bitslip130[6]),
	.D8(main_a7ddrphy_bitslip130[7]),
	.OCE(1'd1),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.T1((~main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE(1'd1),
	.OQ(main_a7ddrphy_dq_o_nodelay13),
	.TQ(main_a7ddrphy_dq_t13)
);

ISERDESE2 #(
	.DATA_RATE("DDR"),
	.DATA_WIDTH(4'd8),
	.INTERFACE_TYPE("NETWORKING"),
	.IOBDELAY("IFD"),
	.NUM_CE(1'd1),
	.SERDES_MODE("MASTER")
) ISERDESE2_13 (
	.BITSLIP(1'd0),
	.CE1(1'd1),
	.CLK(sys4x_clk),
	.CLKB((~sys4x_clk)),
	.CLKDIV(sys_clk),
	.DDLY(main_a7ddrphy_dq_i_delayed13),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.Q1(main_a7ddrphy_bitslip131[7]),
	.Q2(main_a7ddrphy_bitslip131[6]),
	.Q3(main_a7ddrphy_bitslip131[5]),
	.Q4(main_a7ddrphy_bitslip131[4]),
	.Q5(main_a7ddrphy_bitslip131[3]),
	.Q6(main_a7ddrphy_bitslip131[2]),
	.Q7(main_a7ddrphy_bitslip131[1]),
	.Q8(main_a7ddrphy_bitslip131[0])
);

IDELAYE2 #(
	.CINVCTRL_SEL("FALSE"),
	.DELAY_SRC("IDATAIN"),
	.HIGH_PERFORMANCE_MODE("TRUE"),
	.IDELAY_TYPE("VARIABLE"),
	.IDELAY_VALUE(1'd0),
	.PIPE_SEL("FALSE"),
	.REFCLK_FREQUENCY(200.0),
	.SIGNAL_PATTERN("DATA")
) IDELAYE2_13 (
	.C(sys_clk),
	.CE((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN(main_a7ddrphy_dq_i_nodelay13),
	.INC(1'd1),
	.LD(((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_rst_re) | main_a7ddrphy_rst_storage)),
	.LDPIPEEN(1'd0),
	.DATAOUT(main_a7ddrphy_dq_i_delayed13)
);

IOBUF IOBUF_13(
	.I(main_a7ddrphy_dq_o_nodelay13),
	.T(main_a7ddrphy_dq_t13),
	.IO(ddram_dq[13]),
	.O(main_a7ddrphy_dq_i_nodelay13)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_44 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(main_a7ddrphy_bitslip140[0]),
	.D2(main_a7ddrphy_bitslip140[1]),
	.D3(main_a7ddrphy_bitslip140[2]),
	.D4(main_a7ddrphy_bitslip140[3]),
	.D5(main_a7ddrphy_bitslip140[4]),
	.D6(main_a7ddrphy_bitslip140[5]),
	.D7(main_a7ddrphy_bitslip140[6]),
	.D8(main_a7ddrphy_bitslip140[7]),
	.OCE(1'd1),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.T1((~main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE(1'd1),
	.OQ(main_a7ddrphy_dq_o_nodelay14),
	.TQ(main_a7ddrphy_dq_t14)
);

ISERDESE2 #(
	.DATA_RATE("DDR"),
	.DATA_WIDTH(4'd8),
	.INTERFACE_TYPE("NETWORKING"),
	.IOBDELAY("IFD"),
	.NUM_CE(1'd1),
	.SERDES_MODE("MASTER")
) ISERDESE2_14 (
	.BITSLIP(1'd0),
	.CE1(1'd1),
	.CLK(sys4x_clk),
	.CLKB((~sys4x_clk)),
	.CLKDIV(sys_clk),
	.DDLY(main_a7ddrphy_dq_i_delayed14),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.Q1(main_a7ddrphy_bitslip141[7]),
	.Q2(main_a7ddrphy_bitslip141[6]),
	.Q3(main_a7ddrphy_bitslip141[5]),
	.Q4(main_a7ddrphy_bitslip141[4]),
	.Q5(main_a7ddrphy_bitslip141[3]),
	.Q6(main_a7ddrphy_bitslip141[2]),
	.Q7(main_a7ddrphy_bitslip141[1]),
	.Q8(main_a7ddrphy_bitslip141[0])
);

IDELAYE2 #(
	.CINVCTRL_SEL("FALSE"),
	.DELAY_SRC("IDATAIN"),
	.HIGH_PERFORMANCE_MODE("TRUE"),
	.IDELAY_TYPE("VARIABLE"),
	.IDELAY_VALUE(1'd0),
	.PIPE_SEL("FALSE"),
	.REFCLK_FREQUENCY(200.0),
	.SIGNAL_PATTERN("DATA")
) IDELAYE2_14 (
	.C(sys_clk),
	.CE((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN(main_a7ddrphy_dq_i_nodelay14),
	.INC(1'd1),
	.LD(((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_rst_re) | main_a7ddrphy_rst_storage)),
	.LDPIPEEN(1'd0),
	.DATAOUT(main_a7ddrphy_dq_i_delayed14)
);

IOBUF IOBUF_14(
	.I(main_a7ddrphy_dq_o_nodelay14),
	.T(main_a7ddrphy_dq_t14),
	.IO(ddram_dq[14]),
	.O(main_a7ddrphy_dq_i_nodelay14)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_45 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(main_a7ddrphy_bitslip150[0]),
	.D2(main_a7ddrphy_bitslip150[1]),
	.D3(main_a7ddrphy_bitslip150[2]),
	.D4(main_a7ddrphy_bitslip150[3]),
	.D5(main_a7ddrphy_bitslip150[4]),
	.D6(main_a7ddrphy_bitslip150[5]),
	.D7(main_a7ddrphy_bitslip150[6]),
	.D8(main_a7ddrphy_bitslip150[7]),
	.OCE(1'd1),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.T1((~main_a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE(1'd1),
	.OQ(main_a7ddrphy_dq_o_nodelay15),
	.TQ(main_a7ddrphy_dq_t15)
);

ISERDESE2 #(
	.DATA_RATE("DDR"),
	.DATA_WIDTH(4'd8),
	.INTERFACE_TYPE("NETWORKING"),
	.IOBDELAY("IFD"),
	.NUM_CE(1'd1),
	.SERDES_MODE("MASTER")
) ISERDESE2_15 (
	.BITSLIP(1'd0),
	.CE1(1'd1),
	.CLK(sys4x_clk),
	.CLKB((~sys4x_clk)),
	.CLKDIV(sys_clk),
	.DDLY(main_a7ddrphy_dq_i_delayed15),
	.RST((sys_rst | main_a7ddrphy_rst_storage)),
	.Q1(main_a7ddrphy_bitslip151[7]),
	.Q2(main_a7ddrphy_bitslip151[6]),
	.Q3(main_a7ddrphy_bitslip151[5]),
	.Q4(main_a7ddrphy_bitslip151[4]),
	.Q5(main_a7ddrphy_bitslip151[3]),
	.Q6(main_a7ddrphy_bitslip151[2]),
	.Q7(main_a7ddrphy_bitslip151[1]),
	.Q8(main_a7ddrphy_bitslip151[0])
);

IDELAYE2 #(
	.CINVCTRL_SEL("FALSE"),
	.DELAY_SRC("IDATAIN"),
	.HIGH_PERFORMANCE_MODE("TRUE"),
	.IDELAY_TYPE("VARIABLE"),
	.IDELAY_VALUE(1'd0),
	.PIPE_SEL("FALSE"),
	.REFCLK_FREQUENCY(200.0),
	.SIGNAL_PATTERN("DATA")
) IDELAYE2_15 (
	.C(sys_clk),
	.CE((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN(main_a7ddrphy_dq_i_nodelay15),
	.INC(1'd1),
	.LD(((main_a7ddrphy_dly_sel_storage[1] & main_a7ddrphy_rdly_dq_rst_re) | main_a7ddrphy_rst_storage)),
	.LDPIPEEN(1'd0),
	.DATAOUT(main_a7ddrphy_dq_i_delayed15)
);

IOBUF IOBUF_15(
	.I(main_a7ddrphy_dq_o_nodelay15),
	.T(main_a7ddrphy_dq_t15),
	.IO(ddram_dq[15]),
	.O(main_a7ddrphy_dq_i_nodelay15)
);

//------------------------------------------------------------------------------
// Memory storage_2: 16-words x 25-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 25 
// Port 1 | Read: Async | Write: ---- | 
reg [24:0] storage_2[0:15];
reg [24:0] storage_2_dat0;
always @(posedge sys_clk) begin
	if (main_litedramcore_sdram_bankmachine0_wrport_we)
		storage_2[main_litedramcore_sdram_bankmachine0_wrport_adr] <= main_litedramcore_sdram_bankmachine0_wrport_dat_w;
	storage_2_dat0 <= storage_2[main_litedramcore_sdram_bankmachine0_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign main_litedramcore_sdram_bankmachine0_wrport_dat_r = storage_2_dat0;
assign main_litedramcore_sdram_bankmachine0_rdport_dat_r = storage_2[main_litedramcore_sdram_bankmachine0_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_3: 16-words x 25-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 25 
// Port 1 | Read: Async | Write: ---- | 
reg [24:0] storage_3[0:15];
reg [24:0] storage_3_dat0;
always @(posedge sys_clk) begin
	if (main_litedramcore_sdram_bankmachine1_wrport_we)
		storage_3[main_litedramcore_sdram_bankmachine1_wrport_adr] <= main_litedramcore_sdram_bankmachine1_wrport_dat_w;
	storage_3_dat0 <= storage_3[main_litedramcore_sdram_bankmachine1_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign main_litedramcore_sdram_bankmachine1_wrport_dat_r = storage_3_dat0;
assign main_litedramcore_sdram_bankmachine1_rdport_dat_r = storage_3[main_litedramcore_sdram_bankmachine1_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_4: 16-words x 25-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 25 
// Port 1 | Read: Async | Write: ---- | 
reg [24:0] storage_4[0:15];
reg [24:0] storage_4_dat0;
always @(posedge sys_clk) begin
	if (main_litedramcore_sdram_bankmachine2_wrport_we)
		storage_4[main_litedramcore_sdram_bankmachine2_wrport_adr] <= main_litedramcore_sdram_bankmachine2_wrport_dat_w;
	storage_4_dat0 <= storage_4[main_litedramcore_sdram_bankmachine2_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign main_litedramcore_sdram_bankmachine2_wrport_dat_r = storage_4_dat0;
assign main_litedramcore_sdram_bankmachine2_rdport_dat_r = storage_4[main_litedramcore_sdram_bankmachine2_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_5: 16-words x 25-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 25 
// Port 1 | Read: Async | Write: ---- | 
reg [24:0] storage_5[0:15];
reg [24:0] storage_5_dat0;
always @(posedge sys_clk) begin
	if (main_litedramcore_sdram_bankmachine3_wrport_we)
		storage_5[main_litedramcore_sdram_bankmachine3_wrport_adr] <= main_litedramcore_sdram_bankmachine3_wrport_dat_w;
	storage_5_dat0 <= storage_5[main_litedramcore_sdram_bankmachine3_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign main_litedramcore_sdram_bankmachine3_wrport_dat_r = storage_5_dat0;
assign main_litedramcore_sdram_bankmachine3_rdport_dat_r = storage_5[main_litedramcore_sdram_bankmachine3_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_6: 16-words x 25-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 25 
// Port 1 | Read: Async | Write: ---- | 
reg [24:0] storage_6[0:15];
reg [24:0] storage_6_dat0;
always @(posedge sys_clk) begin
	if (main_litedramcore_sdram_bankmachine4_wrport_we)
		storage_6[main_litedramcore_sdram_bankmachine4_wrport_adr] <= main_litedramcore_sdram_bankmachine4_wrport_dat_w;
	storage_6_dat0 <= storage_6[main_litedramcore_sdram_bankmachine4_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign main_litedramcore_sdram_bankmachine4_wrport_dat_r = storage_6_dat0;
assign main_litedramcore_sdram_bankmachine4_rdport_dat_r = storage_6[main_litedramcore_sdram_bankmachine4_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_7: 16-words x 25-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 25 
// Port 1 | Read: Async | Write: ---- | 
reg [24:0] storage_7[0:15];
reg [24:0] storage_7_dat0;
always @(posedge sys_clk) begin
	if (main_litedramcore_sdram_bankmachine5_wrport_we)
		storage_7[main_litedramcore_sdram_bankmachine5_wrport_adr] <= main_litedramcore_sdram_bankmachine5_wrport_dat_w;
	storage_7_dat0 <= storage_7[main_litedramcore_sdram_bankmachine5_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign main_litedramcore_sdram_bankmachine5_wrport_dat_r = storage_7_dat0;
assign main_litedramcore_sdram_bankmachine5_rdport_dat_r = storage_7[main_litedramcore_sdram_bankmachine5_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_8: 16-words x 25-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 25 
// Port 1 | Read: Async | Write: ---- | 
reg [24:0] storage_8[0:15];
reg [24:0] storage_8_dat0;
always @(posedge sys_clk) begin
	if (main_litedramcore_sdram_bankmachine6_wrport_we)
		storage_8[main_litedramcore_sdram_bankmachine6_wrport_adr] <= main_litedramcore_sdram_bankmachine6_wrport_dat_w;
	storage_8_dat0 <= storage_8[main_litedramcore_sdram_bankmachine6_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign main_litedramcore_sdram_bankmachine6_wrport_dat_r = storage_8_dat0;
assign main_litedramcore_sdram_bankmachine6_rdport_dat_r = storage_8[main_litedramcore_sdram_bankmachine6_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_9: 16-words x 25-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 25 
// Port 1 | Read: Async | Write: ---- | 
reg [24:0] storage_9[0:15];
reg [24:0] storage_9_dat0;
always @(posedge sys_clk) begin
	if (main_litedramcore_sdram_bankmachine7_wrport_we)
		storage_9[main_litedramcore_sdram_bankmachine7_wrport_adr] <= main_litedramcore_sdram_bankmachine7_wrport_dat_w;
	storage_9_dat0 <= storage_9[main_litedramcore_sdram_bankmachine7_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign main_litedramcore_sdram_bankmachine7_wrport_dat_r = storage_9_dat0;
assign main_litedramcore_sdram_bankmachine7_rdport_dat_r = storage_9[main_litedramcore_sdram_bankmachine7_rdport_adr];


//------------------------------------------------------------------------------
// Memory tag_mem: 2-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 32 
reg [31:0] tag_mem[0:1];
reg [0:0] tag_mem_adr0;
always @(posedge sys_clk) begin
	if (main_litedramcore_tag_port_we)
		tag_mem[main_litedramcore_tag_port_adr] <= main_litedramcore_tag_port_dat_w;
	tag_mem_adr0 <= main_litedramcore_tag_port_adr;
end
assign main_litedramcore_tag_port_dat_r = tag_mem[tag_mem_adr0];


//------------------------------------------------------------------------------
// Memory storage_10: 16-words x 82-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 82 
// Port 1 | Read: Sync  | Write: ---- | 
reg [81:0] storage_10[0:15];
reg [81:0] storage_10_dat0;
reg [81:0] storage_10_dat1;
always @(posedge sys_clk) begin
	if (main_write_w_buffer_wrport_we)
		storage_10[main_write_w_buffer_wrport_adr] <= main_write_w_buffer_wrport_dat_w;
	storage_10_dat0 <= storage_10[main_write_w_buffer_wrport_adr];
end
always @(posedge sys_clk) begin
	if (main_write_w_buffer_rdport_re)
		storage_10_dat1 <= storage_10[main_write_w_buffer_rdport_adr];
end
assign main_write_w_buffer_wrport_dat_r = storage_10_dat0;
assign main_write_w_buffer_rdport_dat_r = storage_10_dat1;


//------------------------------------------------------------------------------
// Memory storage_11: 16-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 8 
// Port 1 | Read: Async | Write: ---- | 
reg [7:0] storage_11[0:15];
reg [7:0] storage_11_dat0;
always @(posedge sys_clk) begin
	if (main_write_id_buffer_wrport_we)
		storage_11[main_write_id_buffer_wrport_adr] <= main_write_id_buffer_wrport_dat_w;
	storage_11_dat0 <= storage_11[main_write_id_buffer_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign main_write_id_buffer_wrport_dat_r = storage_11_dat0;
assign main_write_id_buffer_rdport_dat_r = storage_11[main_write_id_buffer_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_12: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Async | Write: ---- | 
reg [9:0] storage_12[0:15];
reg [9:0] storage_12_dat0;
always @(posedge sys_clk) begin
	if (main_write_resp_buffer_wrport_we)
		storage_12[main_write_resp_buffer_wrport_adr] <= main_write_resp_buffer_wrport_dat_w;
	storage_12_dat0 <= storage_12[main_write_resp_buffer_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign main_write_resp_buffer_wrport_dat_r = storage_12_dat0;
assign main_write_resp_buffer_rdport_dat_r = storage_12[main_write_resp_buffer_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_13: 16-words x 76-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 76 
// Port 1 | Read: Sync  | Write: ---- | 
reg [75:0] storage_13[0:15];
reg [75:0] storage_13_dat0;
reg [75:0] storage_13_dat1;
always @(posedge sys_clk) begin
	if (main_read_r_buffer_wrport_we)
		storage_13[main_read_r_buffer_wrport_adr] <= main_read_r_buffer_wrport_dat_w;
	storage_13_dat0 <= storage_13[main_read_r_buffer_wrport_adr];
end
always @(posedge sys_clk) begin
	if (main_read_r_buffer_rdport_re)
		storage_13_dat1 <= storage_13[main_read_r_buffer_rdport_adr];
end
assign main_read_r_buffer_wrport_dat_r = storage_13_dat0;
assign main_read_r_buffer_rdport_dat_r = storage_13_dat1;


//------------------------------------------------------------------------------
// Memory storage_14: 16-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 8 
// Port 1 | Read: Async | Write: ---- | 
reg [7:0] storage_14[0:15];
reg [7:0] storage_14_dat0;
always @(posedge sys_clk) begin
	if (main_read_id_buffer_wrport_we)
		storage_14[main_read_id_buffer_wrport_adr] <= main_read_id_buffer_wrport_dat_w;
	storage_14_dat0 <= storage_14[main_read_id_buffer_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign main_read_id_buffer_wrport_dat_r = storage_14_dat0;
assign main_read_id_buffer_rdport_dat_r = storage_14[main_read_id_buffer_rdport_adr];


serv_rf_top #(
	.RESET_PC(1'd0)
) serv_rf_top (
	.clk(sys_clk),
	.i_dbus_ack(main_litedramcore_serv_dbus_ack),
	.i_dbus_rdt(main_litedramcore_serv_dbus_dat_r),
	.i_ibus_ack(main_litedramcore_serv_ibus_ack),
	.i_ibus_rdt(main_litedramcore_serv_ibus_dat_r),
	.i_rst((sys_rst | main_litedramcore_serv_reset)),
	.i_timer_irq(1'd0),
	.o_dbus_adr({main_litedramcore_serv_dbus_adr, main_litedramcore_serv1}),
	.o_dbus_cyc(main_litedramcore_serv_dbus_cyc),
	.o_dbus_dat(main_litedramcore_serv_dbus_dat_w),
	.o_dbus_sel(main_litedramcore_serv_dbus_sel),
	.o_dbus_we(main_litedramcore_serv_dbus_we),
	.o_ibus_adr({main_litedramcore_serv_ibus_adr, main_litedramcore_serv0}),
	.o_ibus_cyc(main_litedramcore_serv_ibus_cyc)
);

FDCE FDCE(
	.C(main_clkin),
	.CE(1'd1),
	.CLR(1'd0),
	.D(main_reset),
	.Q(builder_litedramcore_reset0)
);

FDCE FDCE_1(
	.C(main_clkin),
	.CE(1'd1),
	.CLR(1'd0),
	.D(builder_litedramcore_reset0),
	.Q(builder_litedramcore_reset1)
);

FDCE FDCE_2(
	.C(main_clkin),
	.CE(1'd1),
	.CLR(1'd0),
	.D(builder_litedramcore_reset1),
	.Q(builder_litedramcore_reset2)
);

FDCE FDCE_3(
	.C(main_clkin),
	.CE(1'd1),
	.CLR(1'd0),
	.D(builder_litedramcore_reset2),
	.Q(builder_litedramcore_reset3)
);

FDCE FDCE_4(
	.C(main_clkin),
	.CE(1'd1),
	.CLR(1'd0),
	.D(builder_litedramcore_reset3),
	.Q(builder_litedramcore_reset4)
);

FDCE FDCE_5(
	.C(main_clkin),
	.CE(1'd1),
	.CLR(1'd0),
	.D(builder_litedramcore_reset4),
	.Q(builder_litedramcore_reset5)
);

FDCE FDCE_6(
	.C(main_clkin),
	.CE(1'd1),
	.CLR(1'd0),
	.D(builder_litedramcore_reset5),
	.Q(builder_litedramcore_reset6)
);

FDCE FDCE_7(
	.C(main_clkin),
	.CE(1'd1),
	.CLR(1'd0),
	.D(builder_litedramcore_reset6),
	.Q(builder_litedramcore_reset7)
);

PLLE2_ADV #(
	.CLKFBOUT_MULT(5'd16),
	.CLKIN1_PERIOD(10.0),
	.CLKOUT0_DIVIDE(4'd8),
	.CLKOUT0_PHASE(1'd0),
	.CLKOUT1_DIVIDE(5'd16),
	.CLKOUT1_PHASE(1'd0),
	.CLKOUT2_DIVIDE(3'd4),
	.CLKOUT2_PHASE(1'd0),
	.CLKOUT3_DIVIDE(3'd4),
	.CLKOUT3_PHASE(7'd90),
	.DIVCLK_DIVIDE(1'd1),
	.REF_JITTER1(0.01),
	.STARTUP_WAIT("FALSE")
) PLLE2_ADV (
	.CLKFBIN(builder_litedramcore_pll_fb),
	.CLKIN1(main_clkin),
	.PWRDWN(main_power_down),
	.RST(builder_litedramcore_reset7),
	.CLKFBOUT(builder_litedramcore_pll_fb),
	.CLKOUT0(main_clkout0),
	.CLKOUT1(main_clkout1),
	.CLKOUT2(main_clkout2),
	.CLKOUT3(main_clkout3),
	.LOCKED(main_locked)
);

//------------------------------------------------------------------------------
// Memory data_mem_grain0: 2-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain0[0:1];
reg [0:0] data_mem_grain0_adr0;
always @(posedge sys_clk) begin
	if (main_litedramcore_data_port_we[0])
		data_mem_grain0[main_litedramcore_data_port_adr] <= main_litedramcore_data_port_dat_w[7:0];
	data_mem_grain0_adr0 <= main_litedramcore_data_port_adr;
end
assign main_litedramcore_data_port_dat_r[7:0] = data_mem_grain0[data_mem_grain0_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain1: 2-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain1[0:1];
reg [0:0] data_mem_grain1_adr0;
always @(posedge sys_clk) begin
	if (main_litedramcore_data_port_we[1])
		data_mem_grain1[main_litedramcore_data_port_adr] <= main_litedramcore_data_port_dat_w[15:8];
	data_mem_grain1_adr0 <= main_litedramcore_data_port_adr;
end
assign main_litedramcore_data_port_dat_r[15:8] = data_mem_grain1[data_mem_grain1_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain2: 2-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain2[0:1];
reg [0:0] data_mem_grain2_adr0;
always @(posedge sys_clk) begin
	if (main_litedramcore_data_port_we[2])
		data_mem_grain2[main_litedramcore_data_port_adr] <= main_litedramcore_data_port_dat_w[23:16];
	data_mem_grain2_adr0 <= main_litedramcore_data_port_adr;
end
assign main_litedramcore_data_port_dat_r[23:16] = data_mem_grain2[data_mem_grain2_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain3: 2-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain3[0:1];
reg [0:0] data_mem_grain3_adr0;
always @(posedge sys_clk) begin
	if (main_litedramcore_data_port_we[3])
		data_mem_grain3[main_litedramcore_data_port_adr] <= main_litedramcore_data_port_dat_w[31:24];
	data_mem_grain3_adr0 <= main_litedramcore_data_port_adr;
end
assign main_litedramcore_data_port_dat_r[31:24] = data_mem_grain3[data_mem_grain3_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain4: 2-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain4[0:1];
reg [0:0] data_mem_grain4_adr0;
always @(posedge sys_clk) begin
	if (main_litedramcore_data_port_we[4])
		data_mem_grain4[main_litedramcore_data_port_adr] <= main_litedramcore_data_port_dat_w[39:32];
	data_mem_grain4_adr0 <= main_litedramcore_data_port_adr;
end
assign main_litedramcore_data_port_dat_r[39:32] = data_mem_grain4[data_mem_grain4_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain5: 2-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain5[0:1];
reg [0:0] data_mem_grain5_adr0;
always @(posedge sys_clk) begin
	if (main_litedramcore_data_port_we[5])
		data_mem_grain5[main_litedramcore_data_port_adr] <= main_litedramcore_data_port_dat_w[47:40];
	data_mem_grain5_adr0 <= main_litedramcore_data_port_adr;
end
assign main_litedramcore_data_port_dat_r[47:40] = data_mem_grain5[data_mem_grain5_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain6: 2-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain6[0:1];
reg [0:0] data_mem_grain6_adr0;
always @(posedge sys_clk) begin
	if (main_litedramcore_data_port_we[6])
		data_mem_grain6[main_litedramcore_data_port_adr] <= main_litedramcore_data_port_dat_w[55:48];
	data_mem_grain6_adr0 <= main_litedramcore_data_port_adr;
end
assign main_litedramcore_data_port_dat_r[55:48] = data_mem_grain6[data_mem_grain6_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain7: 2-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain7[0:1];
reg [0:0] data_mem_grain7_adr0;
always @(posedge sys_clk) begin
	if (main_litedramcore_data_port_we[7])
		data_mem_grain7[main_litedramcore_data_port_adr] <= main_litedramcore_data_port_dat_w[63:56];
	data_mem_grain7_adr0 <= main_litedramcore_data_port_adr;
end
assign main_litedramcore_data_port_dat_r[63:56] = data_mem_grain7[data_mem_grain7_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain8: 2-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain8[0:1];
reg [0:0] data_mem_grain8_adr0;
always @(posedge sys_clk) begin
	if (main_litedramcore_data_port_we[8])
		data_mem_grain8[main_litedramcore_data_port_adr] <= main_litedramcore_data_port_dat_w[71:64];
	data_mem_grain8_adr0 <= main_litedramcore_data_port_adr;
end
assign main_litedramcore_data_port_dat_r[71:64] = data_mem_grain8[data_mem_grain8_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain9: 2-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain9[0:1];
reg [0:0] data_mem_grain9_adr0;
always @(posedge sys_clk) begin
	if (main_litedramcore_data_port_we[9])
		data_mem_grain9[main_litedramcore_data_port_adr] <= main_litedramcore_data_port_dat_w[79:72];
	data_mem_grain9_adr0 <= main_litedramcore_data_port_adr;
end
assign main_litedramcore_data_port_dat_r[79:72] = data_mem_grain9[data_mem_grain9_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain10: 2-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain10[0:1];
reg [0:0] data_mem_grain10_adr0;
always @(posedge sys_clk) begin
	if (main_litedramcore_data_port_we[10])
		data_mem_grain10[main_litedramcore_data_port_adr] <= main_litedramcore_data_port_dat_w[87:80];
	data_mem_grain10_adr0 <= main_litedramcore_data_port_adr;
end
assign main_litedramcore_data_port_dat_r[87:80] = data_mem_grain10[data_mem_grain10_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain11: 2-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain11[0:1];
reg [0:0] data_mem_grain11_adr0;
always @(posedge sys_clk) begin
	if (main_litedramcore_data_port_we[11])
		data_mem_grain11[main_litedramcore_data_port_adr] <= main_litedramcore_data_port_dat_w[95:88];
	data_mem_grain11_adr0 <= main_litedramcore_data_port_adr;
end
assign main_litedramcore_data_port_dat_r[95:88] = data_mem_grain11[data_mem_grain11_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain12: 2-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain12[0:1];
reg [0:0] data_mem_grain12_adr0;
always @(posedge sys_clk) begin
	if (main_litedramcore_data_port_we[12])
		data_mem_grain12[main_litedramcore_data_port_adr] <= main_litedramcore_data_port_dat_w[103:96];
	data_mem_grain12_adr0 <= main_litedramcore_data_port_adr;
end
assign main_litedramcore_data_port_dat_r[103:96] = data_mem_grain12[data_mem_grain12_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain13: 2-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain13[0:1];
reg [0:0] data_mem_grain13_adr0;
always @(posedge sys_clk) begin
	if (main_litedramcore_data_port_we[13])
		data_mem_grain13[main_litedramcore_data_port_adr] <= main_litedramcore_data_port_dat_w[111:104];
	data_mem_grain13_adr0 <= main_litedramcore_data_port_adr;
end
assign main_litedramcore_data_port_dat_r[111:104] = data_mem_grain13[data_mem_grain13_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain14: 2-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain14[0:1];
reg [0:0] data_mem_grain14_adr0;
always @(posedge sys_clk) begin
	if (main_litedramcore_data_port_we[14])
		data_mem_grain14[main_litedramcore_data_port_adr] <= main_litedramcore_data_port_dat_w[119:112];
	data_mem_grain14_adr0 <= main_litedramcore_data_port_adr;
end
assign main_litedramcore_data_port_dat_r[119:112] = data_mem_grain14[data_mem_grain14_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain15: 2-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain15[0:1];
reg [0:0] data_mem_grain15_adr0;
always @(posedge sys_clk) begin
	if (main_litedramcore_data_port_we[15])
		data_mem_grain15[main_litedramcore_data_port_adr] <= main_litedramcore_data_port_dat_w[127:120];
	data_mem_grain15_adr0 <= main_litedramcore_data_port_adr;
end
assign main_litedramcore_data_port_dat_r[127:120] = data_mem_grain15[data_mem_grain15_adr0];


(* ars_ff1 = "true", async_reg = "true" *)
FDPE #(
	.INIT(1'd1)
) FDPE (
	.C(iodelay_clk),
	.CE(1'd1),
	.D(1'd0),
	.PRE(builder_xilinxasyncresetsynchronizerimpl0),
	.Q(builder_xilinxasyncresetsynchronizerimpl0_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *)
FDPE #(
	.INIT(1'd1)
) FDPE_1 (
	.C(iodelay_clk),
	.CE(1'd1),
	.D(builder_xilinxasyncresetsynchronizerimpl0_rst_meta),
	.PRE(builder_xilinxasyncresetsynchronizerimpl0),
	.Q(iodelay_rst)
);

(* ars_ff1 = "true", async_reg = "true" *)
FDPE #(
	.INIT(1'd1)
) FDPE_2 (
	.C(sys_clk),
	.CE(1'd1),
	.D(1'd0),
	.PRE(builder_xilinxasyncresetsynchronizerimpl1),
	.Q(builder_xilinxasyncresetsynchronizerimpl1_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *)
FDPE #(
	.INIT(1'd1)
) FDPE_3 (
	.C(sys_clk),
	.CE(1'd1),
	.D(builder_xilinxasyncresetsynchronizerimpl1_rst_meta),
	.PRE(builder_xilinxasyncresetsynchronizerimpl1),
	.Q(sys_rst)
);

(* ars_ff1 = "true", async_reg = "true" *)
FDPE #(
	.INIT(1'd1)
) FDPE_4 (
	.C(sys4x_clk),
	.CE(1'd1),
	.D(1'd0),
	.PRE(builder_xilinxasyncresetsynchronizerimpl2),
	.Q(builder_xilinxasyncresetsynchronizerimpl2_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *)
FDPE #(
	.INIT(1'd1)
) FDPE_5 (
	.C(sys4x_clk),
	.CE(1'd1),
	.D(builder_xilinxasyncresetsynchronizerimpl2_rst_meta),
	.PRE(builder_xilinxasyncresetsynchronizerimpl2),
	.Q(builder_xilinxasyncresetsynchronizerimpl2_expr)
);

(* ars_ff1 = "true", async_reg = "true" *)
FDPE #(
	.INIT(1'd1)
) FDPE_6 (
	.C(sys4x_dqs_clk),
	.CE(1'd1),
	.D(1'd0),
	.PRE(builder_xilinxasyncresetsynchronizerimpl3),
	.Q(builder_xilinxasyncresetsynchronizerimpl3_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *)
FDPE #(
	.INIT(1'd1)
) FDPE_7 (
	.C(sys4x_dqs_clk),
	.CE(1'd1),
	.D(builder_xilinxasyncresetsynchronizerimpl3_rst_meta),
	.PRE(builder_xilinxasyncresetsynchronizerimpl3),
	.Q(builder_xilinxasyncresetsynchronizerimpl3_expr)
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2023-08-08 23:41:46.
//------------------------------------------------------------------------------
